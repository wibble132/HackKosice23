
HackKosice2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d80  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eec  08004eec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef4  08004ef4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08004f08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004f08  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ec7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb2  00000000  00000000  00037efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0003adb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db8d  00000000  00000000  0003d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001887e  00000000  00000000  0005ae65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0978  00000000  00000000  000736e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013405b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004570  00000000  00000000  001340ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004e24 	.word	0x08004e24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004e24 	.word	0x08004e24

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <setLED>:
#include "ledControl.h"

#include "led12a1.h"


void setLED(LED1202_Object_TypeDef* LED1202Obj, uint8_t x, uint8_t y, uint16_t r, uint16_t g, uint16_t b) {
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	b087      	sub	sp, #28
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	000c      	movs	r4, r1
 8000626:	0010      	movs	r0, r2
 8000628:	0019      	movs	r1, r3
 800062a:	1cfb      	adds	r3, r7, #3
 800062c:	1c22      	adds	r2, r4, #0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	1cbb      	adds	r3, r7, #2
 8000632:	1c02      	adds	r2, r0, #0
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	003b      	movs	r3, r7
 8000638:	1c0a      	adds	r2, r1, #0
 800063a:	801a      	strh	r2, [r3, #0]

	uint8_t dev = x;
 800063c:	240f      	movs	r4, #15
 800063e:	193b      	adds	r3, r7, r4
 8000640:	1cfa      	adds	r2, r7, #3
 8000642:	7812      	ldrb	r2, [r2, #0]
 8000644:	701a      	strb	r2, [r3, #0]
	uint8_t channelr = y * 3;
 8000646:	200e      	movs	r0, #14
 8000648:	1839      	adds	r1, r7, r0
 800064a:	1cbb      	adds	r3, r7, #2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	1c1a      	adds	r2, r3, #0
 8000650:	1892      	adds	r2, r2, r2
 8000652:	18d3      	adds	r3, r2, r3
 8000654:	700b      	strb	r3, [r1, #0]
	uint8_t channelg = y * 3 + 1;
 8000656:	1cbb      	adds	r3, r7, #2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	1c1a      	adds	r2, r3, #0
 800065c:	1892      	adds	r2, r2, r2
 800065e:	18d3      	adds	r3, r2, r3
 8000660:	b2da      	uxtb	r2, r3
 8000662:	250d      	movs	r5, #13
 8000664:	197b      	adds	r3, r7, r5
 8000666:	3201      	adds	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
	uint8_t channelb = y * 3 + 2;
 800066a:	1cbb      	adds	r3, r7, #2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	1c1a      	adds	r2, r3, #0
 8000670:	1892      	adds	r2, r2, r2
 8000672:	18d3      	adds	r3, r2, r3
 8000674:	b2da      	uxtb	r2, r3
 8000676:	260c      	movs	r6, #12
 8000678:	19bb      	adds	r3, r7, r6
 800067a:	3202      	adds	r2, #2
 800067c:	701a      	strb	r2, [r3, #0]

	LED12A1_DigitalDimming(LED1202Obj, &r, channelr, 0, (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 800067e:	183b      	adds	r3, r7, r0
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	0039      	movs	r1, r7
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	193b      	adds	r3, r7, r4
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	f000 ffdc 	bl	800164a <LED12A1_DigitalDimming>
	LED12A1_DigitalDimming(LED1202Obj, &g, channelg, 0, (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8000692:	197b      	adds	r3, r7, r5
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	2320      	movs	r3, #32
 8000698:	2508      	movs	r5, #8
 800069a:	195b      	adds	r3, r3, r5
 800069c:	19d9      	adds	r1, r3, r7
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	f000 ffcf 	bl	800164a <LED12A1_DigitalDimming>
	LED12A1_DigitalDimming(LED1202Obj, &b, channelb, 0, (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 80006ac:	19bb      	adds	r3, r7, r6
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	2324      	movs	r3, #36	; 0x24
 80006b2:	195b      	adds	r3, r3, r5
 80006b4:	19d9      	adds	r1, r3, r7
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	f000 ffc3 	bl	800164a <LED12A1_DigitalDimming>
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b005      	add	sp, #20
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006cc <disableAllLED>:

void disableAllLED(LED1202_Object_TypeDef* LED1202Obj, uint8_t NumOfDev) {
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	000a      	movs	r2, r1
 80006d6:	1cfb      	adds	r3, r7, #3
 80006d8:	701a      	strb	r2, [r3, #0]
	for (uint8_t dev = 0;dev<NumOfDev;dev++)
 80006da:	230f      	movs	r3, #15
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e00d      	b.n	8000700 <disableAllLED+0x34>
		{
		  LED12A1_ChannelDisable( LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 80006e4:	240f      	movs	r4, #15
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	490b      	ldr	r1, [pc, #44]	; (8000718 <disableAllLED+0x4c>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fffc 	bl	80016ec <LED12A1_ChannelDisable>
	for (uint8_t dev = 0;dev<NumOfDev;dev++)
 80006f4:	0021      	movs	r1, r4
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	3201      	adds	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	230f      	movs	r3, #15
 8000702:	18fa      	adds	r2, r7, r3
 8000704:	1cfb      	adds	r3, r7, #3
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d3ea      	bcc.n	80006e4 <disableAllLED+0x18>
		}
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b005      	add	sp, #20
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	00000fff 	.word	0x00000fff

0800071c <setup>:
extern volatile uint8_t command_triggered;
extern   LED1202_Object_TypeDef LED1202Obj;

#define LED_CURRENT 1

void setup() {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /*Wait Time assuring a properly steady state condition */
  HAL_Delay(100);
 8000722:	2064      	movs	r0, #100	; 0x64
 8000724:	f001 f890 	bl	8001848 <HAL_Delay>

  interface_mode = UART_MODE;	/*Set a known condition */
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <setup+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]

  /*Clear Buffer*/
  ClearBuffers();
 800072e:	f000 f8af 	bl	8000890 <ClearBuffers>

  /*LED12A1 Initialization*/
  LED12A1_Init();
 8000732:	f000 fdc7 	bl	80012c4 <LED12A1_Init>

  /*Scan for Number of available LED1202 ICs*/
  NumOfDev =  LED12A1_ScanAvailDevice( &LED1202Obj ,DevAddrArray);
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <setup+0x78>)
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <setup+0x7c>)
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f000 ff3f 	bl	80015c0 <LED12A1_ScanAvailDevice>
 8000742:	0003      	movs	r3, r0
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <setup+0x80>)
 8000748:	701a      	strb	r2, [r3, #0]

  /*Enable available LED1202 ICs*/
  for (uint8_t dev = 0;dev<NumOfDev;dev++)
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	e012      	b.n	8000778 <setup+0x5c>
  {
	LED12A1_DeviceEnable(&LED1202Obj , (TypedefEnumDevAddr)(LED_DEVICE1 + dev));
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <setup+0x7c>)
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fea6 	bl	80014ac <LED12A1_DeviceEnable>
	LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	490e      	ldr	r1, [pc, #56]	; (80007a0 <setup+0x84>)
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <setup+0x7c>)
 8000768:	0018      	movs	r0, r3
 800076a:	f000 ffbf 	bl	80016ec <LED12A1_ChannelDisable>
  for (uint8_t dev = 0;dev<NumOfDev;dev++)
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	3201      	adds	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <setup+0x80>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	1dfa      	adds	r2, r7, #7
 800077e:	7812      	ldrb	r2, [r2, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d3e6      	bcc.n	8000752 <setup+0x36>
  }
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	200000b4 	.word	0x200000b4
 8000794:	20000028 	.word	0x20000028
 8000798:	2000023c 	.word	0x2000023c
 800079c:	20000032 	.word	0x20000032
 80007a0:	00000fff 	.word	0x00000fff

080007a4 <mainLoop>:

void mainLoop() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af02      	add	r7, sp, #8

	disableAllLED( &LED1202Obj, NumOfDev );
 80007aa:	4b37      	ldr	r3, [pc, #220]	; (8000888 <mainLoop+0xe4>)
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <mainLoop+0xe8>)
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff8a 	bl	80006cc <disableAllLED>

	for (uint8_t x = 0; x < 4; ++x) {
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	e02e      	b.n	800081e <mainLoop+0x7a>
		for (uint8_t y = 0; y < 4; ++y) {
 80007c0:	1dbb      	adds	r3, r7, #6
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e021      	b.n	800080c <mainLoop+0x68>
			LED12A1_ChannelEnable( &LED1202Obj, (TypeDefChannel) (LED_CHANNEL_0<<y), (TypedefEnumDevAddr)(LED_DEVICE1 + y));
 80007c8:	1dbb      	adds	r3, r7, #6
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2201      	movs	r2, #1
 80007ce:	409a      	lsls	r2, r3
 80007d0:	0013      	movs	r3, r2
 80007d2:	b299      	uxth	r1, r3
 80007d4:	1dbb      	adds	r3, r7, #6
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <mainLoop+0xe8>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 ff5f 	bl	800169e <LED12A1_ChannelEnable>
			setLED( &LED1202Obj, x, y, 10, 10, 10);
 80007e0:	1dbb      	adds	r3, r7, #6
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	4828      	ldr	r0, [pc, #160]	; (800088c <mainLoop+0xe8>)
 80007ea:	230a      	movs	r3, #10
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	230a      	movs	r3, #10
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	230a      	movs	r3, #10
 80007f4:	f7ff ff12 	bl	800061c <setLED>
			HAL_Delay(1000);
 80007f8:	23fa      	movs	r3, #250	; 0xfa
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f823 	bl	8001848 <HAL_Delay>
		for (uint8_t y = 0; y < 4; ++y) {
 8000802:	1dbb      	adds	r3, r7, #6
 8000804:	1dba      	adds	r2, r7, #6
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	3201      	adds	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	1dbb      	adds	r3, r7, #6
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d9d9      	bls.n	80007c8 <mainLoop+0x24>
	for (uint8_t x = 0; x < 4; ++x) {
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	1dfa      	adds	r2, r7, #7
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	3201      	adds	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d9cc      	bls.n	80007c0 <mainLoop+0x1c>
		}
	}

	for (uint8_t x = 0; x < 4; ++x) {
 8000826:	1d7b      	adds	r3, r7, #5
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	e022      	b.n	8000874 <mainLoop+0xd0>
		for (uint8_t y = 0; y < 4; ++y) {
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	e015      	b.n	8000862 <mainLoop+0xbe>
			setLED( &LED1202Obj, x, y, 0, 0, 0);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	1d7b      	adds	r3, r7, #5
 800083c:	7819      	ldrb	r1, [r3, #0]
 800083e:	4813      	ldr	r0, [pc, #76]	; (800088c <mainLoop+0xe8>)
 8000840:	2300      	movs	r3, #0
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	2300      	movs	r3, #0
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2300      	movs	r3, #0
 800084a:	f7ff fee7 	bl	800061c <setLED>
			HAL_Delay(1000);
 800084e:	23fa      	movs	r3, #250	; 0xfa
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fff8 	bl	8001848 <HAL_Delay>
		for (uint8_t y = 0; y < 4; ++y) {
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	1d3a      	adds	r2, r7, #4
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	3201      	adds	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d9e5      	bls.n	8000836 <mainLoop+0x92>
	for (uint8_t x = 0; x < 4; ++x) {
 800086a:	1d7b      	adds	r3, r7, #5
 800086c:	1d7a      	adds	r2, r7, #5
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	3201      	adds	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	1d7b      	adds	r3, r7, #5
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b03      	cmp	r3, #3
 800087a:	d9d8      	bls.n	800082e <mainLoop+0x8a>
		}
	}

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000032 	.word	0x20000032
 800088c:	2000023c 	.word	0x2000023c

08000890 <ClearBuffers>:
 * @brief  Clear the buffers
 * @param  None
 * @retval None
 */
void ClearBuffers(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  uint8_t count;
  for(count=0;count<BUFFER_SIZE;count++)
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e00e      	b.n	80008bc <ClearBuffers+0x2c>
  {
    bridge_IN_buffer[count]=0x0;
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <ClearBuffers+0x40>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	54d1      	strb	r1, [r2, r3]
    bridge_OUT_buffer[count]=0x0;
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <ClearBuffers+0x44>)
 80008ae:	2100      	movs	r1, #0
 80008b0:	54d1      	strb	r1, [r2, r3]
  for(count=0;count<BUFFER_SIZE;count++)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	3201      	adds	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b3f      	cmp	r3, #63	; 0x3f
 80008c2:	d9ec      	bls.n	800089e <ClearBuffers+0xe>
  }
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	20000034 	.word	0x20000034
 80008d4:	20000074 	.word	0x20000074

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 ff2e 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f81e 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 f99c 	bl	8000c20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e8:	f000 f94c 	bl	8000b84 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008ec:	f000 f860 	bl	80009b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80008f0:	f000 f89e 	bl	8000a30 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008f4:	f000 f8f0 	bl	8000ad8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // mainApp.c

  __HAL_TIM_CLEAR_IT(&htim2,TIM_SR_UIF);
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <main+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2202      	movs	r2, #2
 80008fe:	4252      	negs	r2, r2
 8000900:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT(&htim3,TIM_SR_UIF);
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <main+0x44>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2202      	movs	r2, #2
 8000908:	4252      	negs	r2, r2
 800090a:	611a      	str	r2, [r3, #16]
  setup();
 800090c:	f7ff ff06 	bl	800071c <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// run mainApp
	mainLoop();
 8000910:	f7ff ff48 	bl	80007a4 <mainLoop>
 8000914:	e7fc      	b.n	8000910 <main+0x38>
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	2000010c 	.word	0x2000010c
 800091c:	20000158 	.word	0x20000158

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b095      	sub	sp, #84	; 0x54
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	2414      	movs	r4, #20
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	233c      	movs	r3, #60	; 0x3c
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f004 fa6f 	bl	8004e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	0018      	movs	r0, r3
 800093a:	2310      	movs	r3, #16
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f004 fa68 	bl	8004e14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	0018      	movs	r0, r3
 800094a:	f002 f953 	bl	8002bf4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2202      	movs	r2, #2
 8000952:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2240      	movs	r2, #64	; 0x40
 8000966:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	193b      	adds	r3, r7, r4
 8000970:	0018      	movs	r0, r3
 8000972:	f002 f98b 	bl	8002c8c <HAL_RCC_OscConfig>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800097a:	f000 f9ad 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2100      	movs	r1, #0
 800099a:	0018      	movs	r0, r3
 800099c:	f002 fcd6 	bl	800334c <HAL_RCC_ClockConfig>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009a4:	f000 f998 	bl	8000cd8 <Error_Handler>
  }
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b015      	add	sp, #84	; 0x54
 80009ae:	bd90      	pop	{r4, r7, pc}

080009b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_I2C1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <MX_I2C1_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 fa65 	bl	8001ebc <HAL_I2C_Init>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 f96f 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f860 	bl	8002ac4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 f966 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <MX_I2C1_Init+0x74>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 f8a3 	bl	8002b5c <HAL_I2CEx_ConfigDigitalFilter>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f95d 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000b8 	.word	0x200000b8
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	00303d5b 	.word	0x00303d5b

08000a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	2310      	movs	r3, #16
 8000a38:	18fb      	adds	r3, r7, r3
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	001a      	movs	r2, r3
 8000a40:	2100      	movs	r1, #0
 8000a42:	f004 f9e7 	bl	8004e14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f004 f9e0 	bl	8004e14 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	05d2      	lsls	r2, r2, #23
 8000a5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4252      	negs	r2, r2
 8000a6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 f84a 	bl	8003b18 <HAL_TIM_Base_Init>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f000 f926 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0152      	lsls	r2, r2, #5
 8000a94:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f003 f893 	bl	8003bc8 <HAL_TIM_ConfigClockSource>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000aa6:	f000 f917 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab6:	1d3a      	adds	r2, r7, #4
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f003 fa7f 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ac6:	f000 f907 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b008      	add	sp, #32
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	2000010c 	.word	0x2000010c

08000ad8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	2310      	movs	r3, #16
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f004 f993 	bl	8004e14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	0018      	movs	r0, r3
 8000af2:	230c      	movs	r3, #12
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f004 f98c 	bl	8004e14 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_TIM3_Init+0xa0>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <MX_TIM3_Init+0xa4>)
 8000b00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_TIM3_Init+0xa0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_TIM3_Init+0xa0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_TIM3_Init+0xa0>)
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <MX_TIM3_Init+0xa8>)
 8000b12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_TIM3_Init+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_TIM3_Init+0xa0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_TIM3_Init+0xa0>)
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 fff8 	bl	8003b18 <HAL_TIM_Base_Init>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f000 f8d4 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b30:	2110      	movs	r1, #16
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	0152      	lsls	r2, r2, #5
 8000b38:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b3a:	187a      	adds	r2, r7, r1
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_TIM3_Init+0xa0>)
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f003 f841 	bl	8003bc8 <HAL_TIM_ConfigClockSource>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b4a:	f000 f8c5 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5a:	1d3a      	adds	r2, r7, #4
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_TIM3_Init+0xa0>)
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f003 fa2d 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b6a:	f000 f8b5 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b008      	add	sp, #32
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	20000158 	.word	0x20000158
 8000b7c:	40000400 	.word	0x40000400
 8000b80:	0000ffff 	.word	0x0000ffff

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000b8a:	4a24      	ldr	r2, [pc, #144]	; (8000c1c <MX_USART2_UART_Init+0x98>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000b90:	22e1      	movs	r2, #225	; 0xe1
 8000b92:	0252      	lsls	r2, r2, #9
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f003 fa6c 	bl	80040ac <HAL_UART_Init>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bd8:	f000 f87e 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	0018      	movs	r0, r3
 8000be2:	f004 f813 	bl	8004c0c <HAL_UARTEx_SetTxFifoThreshold>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bea:	f000 f875 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f004 f84a 	bl	8004c8c <HAL_UARTEx_SetRxFifoThreshold>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bfc:	f000 f86c 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <MX_USART2_UART_Init+0x94>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f003 ffc8 	bl	8004b98 <HAL_UARTEx_DisableFifoMode>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c0c:	f000 f864 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	200001a4 	.word	0x200001a4
 8000c1c:	40004400 	.word	0x40004400

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	2414      	movs	r4, #20
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2314      	movs	r3, #20
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f004 f8ef 	bl	8004e14 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c46:	2204      	movs	r2, #4
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c54:	2120      	movs	r1, #32
 8000c56:	430a      	orrs	r2, r1
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	2220      	movs	r2, #32
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	635a      	str	r2, [r3, #52]	; 0x34
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c76:	2201      	movs	r2, #1
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c84:	2102      	movs	r1, #2
 8000c86:	430a      	orrs	r2, r1
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_GPIO_Init+0xb4>)
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	2202      	movs	r2, #2
 8000c90:	4013      	ands	r3, r2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c96:	23a0      	movs	r3, #160	; 0xa0
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f001 f8ee 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ca4:	0021      	movs	r1, r4
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2220      	movs	r2, #32
 8000caa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2201      	movs	r2, #1
 8000cb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2202      	movs	r2, #2
 8000cbc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	187a      	adds	r2, r7, r1
 8000cc0:	23a0      	movs	r3, #160	; 0xa0
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 fe96 	bl	80019f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b00b      	add	sp, #44	; 0x2c
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x44>)
 8000cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x44>)
 8000d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_MspInit+0x44>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0549      	lsls	r1, r1, #21
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_MspInit+0x44>)
 8000d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	055b      	lsls	r3, r3, #21
 8000d18:	4013      	ands	r3, r2
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b09d      	sub	sp, #116	; 0x74
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	235c      	movs	r3, #92	; 0x5c
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2314      	movs	r3, #20
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f004 f868 	bl	8004e14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	2410      	movs	r4, #16
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	234c      	movs	r3, #76	; 0x4c
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f004 f860 	bl	8004e14 <memset>
  if(hi2c->Instance==I2C1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <HAL_I2C_MspInit+0xb8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d13e      	bne.n	8000ddc <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2220      	movs	r2, #32
 8000d62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f002 fc97 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d76:	f7ff ffaf 	bl	8000cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <HAL_I2C_MspInit+0xbc>)
 8000d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_I2C_MspInit+0xbc>)
 8000d80:	2102      	movs	r1, #2
 8000d82:	430a      	orrs	r2, r1
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_I2C_MspInit+0xbc>)
 8000d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d92:	215c      	movs	r1, #92	; 0x5c
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	22c0      	movs	r2, #192	; 0xc0
 8000d98:	0092      	lsls	r2, r2, #2
 8000d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2212      	movs	r2, #18
 8000da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2206      	movs	r2, #6
 8000db2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_I2C_MspInit+0xc0>)
 8000db8:	0019      	movs	r1, r3
 8000dba:	0010      	movs	r0, r2
 8000dbc:	f000 fe1c 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_I2C_MspInit+0xbc>)
 8000dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_I2C_MspInit+0xbc>)
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	0389      	lsls	r1, r1, #14
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_I2C_MspInit+0xbc>)
 8000dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	039b      	lsls	r3, r3, #14
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b01d      	add	sp, #116	; 0x74
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	40005400 	.word	0x40005400
 8000de8:	40021000 	.word	0x40021000
 8000dec:	50000400 	.word	0x50000400

08000df0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_I2C_MspDeInit+0x44>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d113      	bne.n	8000e2a <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_I2C_MspDeInit+0x48>)
 8000e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_I2C_MspDeInit+0x48>)
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <HAL_I2C_MspDeInit+0x4c>)
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_I2C_MspDeInit+0x50>)
 8000e14:	0019      	movs	r1, r3
 8000e16:	0010      	movs	r0, r2
 8000e18:	f000 ff5a 	bl	8001cd0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_I2C_MspDeInit+0x50>)
 8000e22:	0019      	movs	r1, r3
 8000e24:	0010      	movs	r0, r2
 8000e26:	f000 ff53 	bl	8001cd0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40005400 	.word	0x40005400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	ffdfffff 	.word	0xffdfffff
 8000e40:	50000400 	.word	0x50000400

08000e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d10c      	bne.n	8000e72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_TIM_Base_MspInit+0x58>)
 8000e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_TIM_Base_MspInit+0x58>)
 8000e5e:	2101      	movs	r1, #1
 8000e60:	430a      	orrs	r2, r1
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_TIM_Base_MspInit+0x58>)
 8000e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e70:	e010      	b.n	8000e94 <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_TIM_Base_MspInit+0x5c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d10b      	bne.n	8000e94 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_TIM_Base_MspInit+0x58>)
 8000e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_TIM_Base_MspInit+0x58>)
 8000e82:	2102      	movs	r1, #2
 8000e84:	430a      	orrs	r2, r1
 8000e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_TIM_Base_MspInit+0x58>)
 8000e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b004      	add	sp, #16
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40000400 	.word	0x40000400

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b09d      	sub	sp, #116	; 0x74
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	235c      	movs	r3, #92	; 0x5c
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	2314      	movs	r3, #20
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f003 ffac 	bl	8004e14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	2410      	movs	r4, #16
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	234c      	movs	r3, #76	; 0x4c
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f003 ffa4 	bl	8004e14 <memset>
  if(huart->Instance==USART2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <HAL_UART_MspInit+0xb8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d13e      	bne.n	8000f54 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2202      	movs	r2, #2
 8000eda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f002 fbdb 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	1e03      	subs	r3, r0, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eee:	f7ff fef3 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_UART_MspInit+0xbc>)
 8000ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_UART_MspInit+0xbc>)
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	0289      	lsls	r1, r1, #10
 8000efc:	430a      	orrs	r2, r1
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_UART_MspInit+0xbc>)
 8000f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	029b      	lsls	r3, r3, #10
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_UART_MspInit+0xbc>)
 8000f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_UART_MspInit+0xbc>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0xbc>)
 8000f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f26:	215c      	movs	r1, #92	; 0x5c
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2202      	movs	r2, #2
 8000f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2201      	movs	r2, #1
 8000f44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	187a      	adds	r2, r7, r1
 8000f48:	23a0      	movs	r3, #160	; 0xa0
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	0011      	movs	r1, r2
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 fd52 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b01d      	add	sp, #116	; 0x74
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40021000 	.word	0x40021000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f88:	f000 fc42 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa0:	f7ff fff7 	bl	8000f92 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <LoopForever+0xe>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	; (8000fe8 <LoopForever+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fca:	f003 feff 	bl	8004dcc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fce:	f7ff fc83 	bl	80008d8 <main>

08000fd2 <LoopForever>:

LoopForever:
  b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
  ldr   r0, =_estack
 8000fd4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe0:	08004efc 	.word	0x08004efc
  ldr r2, =_sbss
 8000fe4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fe8:	2000026c 	.word	0x2000026c

08000fec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_COMP_IRQHandler>
	...

08000ff0 <LED1202_RegisterBusIO>:
 * @param  pObj the device pObj
 * @param  pIO the IO pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_RegisterBusIO (LED1202_Object_TypeDef* pObj, LED1202_IO_TypeDef *pIO)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  int32_t ret = (int32_t)LED1202_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <LED1202_RegisterBusIO+0x1a>
  {
    ret = (int32_t)LED1202_ERROR;
 8001004:	2303      	movs	r3, #3
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e032      	b.n	8001070 <LED1202_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.BusType     = pIO->BusType;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
    pObj->IO.Address     = pIO->Address;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	791a      	ldrb	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	711a      	strb	r2, [r3, #4]
    pObj->IO.Init        = pIO->Init;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	609a      	str	r2, [r3, #8]
    pObj->IO.DeInit      = pIO->DeInit;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60da      	str	r2, [r3, #12]
    pObj->IO.Write       = pIO->Write;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	691a      	ldr	r2, [r3, #16]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]
    pObj->IO.Read        = pIO->Read;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	615a      	str	r2, [r3, #20]
    pObj->IO.Delay     =   pIO->Delay;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	699a      	ldr	r2, [r3, #24]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LED1202_RegisterBusIO+0x8c>)
 8001046:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LED1202_RegisterBusIO+0x90>)
 800104c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <LED1202_RegisterBusIO+0x72>
    {
      ret = (int32_t)LED1202_ERROR;
 800105c:	2303      	movs	r3, #3
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e006      	b.n	8001070 <LED1202_RegisterBusIO+0x80>
    } else if (pObj->IO.Init() != 0) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4798      	blx	r3
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d001      	beq.n	8001070 <LED1202_RegisterBusIO+0x80>
      ret = (int32_t)LED1202_ERROR;
 800106c:	2303      	movs	r3, #3
 800106e:	60fb      	str	r3, [r7, #12]
    {
      /*DO nothing*/
    }
  }

  return ret;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	08001425 	.word	0x08001425
 8001080:	08001469 	.word	0x08001469

08001084 <LED1202_ReadID>:
 * @param  pID pointer to the buffer
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_ReadID(LED1202_Object_TypeDef* pObj, uint8_t *pID, uint8_t DevAddr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	701a      	strb	r2, [r3, #0]
  int32_t ret;
  pObj->IO.Address = DevAddr<<1;
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	18db      	adds	r3, r3, r3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	711a      	strb	r2, [r3, #4]
  TmpStatus = LED1202_ReadReg(&(pObj->Ctx), LED1202_DEVICE_ID, pID, 1);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	331c      	adds	r3, #28
 80010a2:	0018      	movs	r0, r3
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	2301      	movs	r3, #1
 80010a8:	2100      	movs	r1, #0
 80010aa:	f000 f8c8 	bl	800123e <LED1202_ReadReg>
 80010ae:	0002      	movs	r2, r0
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <LED1202_ReadID+0x4c>)
 80010b2:	601a      	str	r2, [r3, #0]
  
  if((*pID) == I_AM_LED1202)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	d102      	bne.n	80010c2 <LED1202_ReadID+0x3e>
  {
    ret = (int32_t)LED1202_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e001      	b.n	80010c6 <LED1202_ReadID+0x42>
  }
  else
  {
    ret = (int32_t)LED1202_ERROR;
 80010c2:	2303      	movs	r3, #3
 80010c4:	617b      	str	r3, [r7, #20]
  }
  return (ret);
 80010c6:	697b      	ldr	r3, [r7, #20]
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b006      	add	sp, #24
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000238 	.word	0x20000238

080010d4 <LED1202_SetChannelState>:
 * @param  Channel LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_SetChannelState( LED1202_Object_TypeDef* pObj , uint16_t Channel ,StateEnum_TypeDef State, uint8_t DevAddr)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	000c      	movs	r4, r1
 80010de:	0010      	movs	r0, r2
 80010e0:	0019      	movs	r1, r3
 80010e2:	1cbb      	adds	r3, r7, #2
 80010e4:	1c22      	adds	r2, r4, #0
 80010e6:	801a      	strh	r2, [r3, #0]
 80010e8:	1c7b      	adds	r3, r7, #1
 80010ea:	1c02      	adds	r2, r0, #0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	003b      	movs	r3, r7
 80010f0:	1c0a      	adds	r2, r1, #0
 80010f2:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret;
  uint16_t readReg;
  uint16_t chRegVal;
  pObj->IO.Address = DevAddr<<1;
 80010f4:	003b      	movs	r3, r7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	18db      	adds	r3, r3, r3
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	711a      	strb	r2, [r3, #4]
  
  ret = LED1202_ReadReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&readReg, 2);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	331c      	adds	r3, #28
 8001104:	0018      	movs	r0, r3
 8001106:	240a      	movs	r4, #10
 8001108:	193a      	adds	r2, r7, r4
 800110a:	2302      	movs	r3, #2
 800110c:	2102      	movs	r1, #2
 800110e:	f000 f896 	bl	800123e <LED1202_ReadReg>
 8001112:	0003      	movs	r3, r0
 8001114:	60fb      	str	r3, [r7, #12]
    
  if(State == CH_STATE_ENABLE)
 8001116:	1c7b      	adds	r3, r7, #1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d113      	bne.n	8001146 <LED1202_SetChannelState+0x72>
  {
    chRegVal = readReg | Channel;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	881a      	ldrh	r2, [r3, #0]
 8001122:	1cbb      	adds	r3, r7, #2
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	4313      	orrs	r3, r2
 8001128:	b29a      	uxth	r2, r3
 800112a:	2108      	movs	r1, #8
 800112c:	187b      	adds	r3, r7, r1
 800112e:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	331c      	adds	r3, #28
 8001134:	0018      	movs	r0, r3
 8001136:	187a      	adds	r2, r7, r1
 8001138:	2302      	movs	r3, #2
 800113a:	2102      	movs	r1, #2
 800113c:	f000 f8a0 	bl	8001280 <LED1202_WriteReg>
 8001140:	0003      	movs	r3, r0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e036      	b.n	80011b4 <LED1202_SetChannelState+0xe0>
  }
  else if(State == CH_STATE_DISABLE)
 8001146:	1c7b      	adds	r3, r7, #1
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d119      	bne.n	8001182 <LED1202_SetChannelState+0xae>
  {
    chRegVal = readReg & (~Channel);  
 800114e:	1cbb      	adds	r3, r7, #2
 8001150:	2200      	movs	r2, #0
 8001152:	5e9b      	ldrsh	r3, [r3, r2]
 8001154:	43db      	mvns	r3, r3
 8001156:	b21b      	sxth	r3, r3
 8001158:	220a      	movs	r2, #10
 800115a:	18ba      	adds	r2, r7, r2
 800115c:	8812      	ldrh	r2, [r2, #0]
 800115e:	b212      	sxth	r2, r2
 8001160:	4013      	ands	r3, r2
 8001162:	b21b      	sxth	r3, r3
 8001164:	b29a      	uxth	r2, r3
 8001166:	2108      	movs	r1, #8
 8001168:	187b      	adds	r3, r7, r1
 800116a:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	331c      	adds	r3, #28
 8001170:	0018      	movs	r0, r3
 8001172:	187a      	adds	r2, r7, r1
 8001174:	2302      	movs	r3, #2
 8001176:	2102      	movs	r1, #2
 8001178:	f000 f882 	bl	8001280 <LED1202_WriteReg>
 800117c:	0003      	movs	r3, r0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e018      	b.n	80011b4 <LED1202_SetChannelState+0xe0>
  }
  else
  {
    chRegVal = readReg & (~Channel);
 8001182:	1cbb      	adds	r3, r7, #2
 8001184:	2200      	movs	r2, #0
 8001186:	5e9b      	ldrsh	r3, [r3, r2]
 8001188:	43db      	mvns	r3, r3
 800118a:	b21b      	sxth	r3, r3
 800118c:	220a      	movs	r2, #10
 800118e:	18ba      	adds	r2, r7, r2
 8001190:	8812      	ldrh	r2, [r2, #0]
 8001192:	b212      	sxth	r2, r2
 8001194:	4013      	ands	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	b29a      	uxth	r2, r3
 800119a:	2108      	movs	r1, #8
 800119c:	187b      	adds	r3, r7, r1
 800119e:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	331c      	adds	r3, #28
 80011a4:	0018      	movs	r0, r3
 80011a6:	187a      	adds	r2, r7, r1
 80011a8:	2302      	movs	r3, #2
 80011aa:	2102      	movs	r1, #2
 80011ac:	f000 f868 	bl	8001280 <LED1202_WriteReg>
 80011b0:	0003      	movs	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]
  }
  return(ret);
 80011b4:	68fb      	ldr	r3, [r7, #12]
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b005      	add	sp, #20
 80011bc:	bd90      	pop	{r4, r7, pc}

080011be <LED1202_WritePatternPWMConfig>:
 * @param  PatternNum Pattern Number
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_WritePatternPWMConfig( LED1202_Object_TypeDef* pObj , uint8_t *pData ,uint8_t Channel, uint8_t PatternNum, uint8_t DevAddr)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	0019      	movs	r1, r3
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	1dbb      	adds	r3, r7, #6
 80011d0:	1c0a      	adds	r2, r1, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  uint16_t digData;
  uint8_t chOffset;
  int32_t ret = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  pObj->IO.Address = DevAddr<<1;
 80011d8:	2320      	movs	r3, #32
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	18db      	adds	r3, r3, r3
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	711a      	strb	r2, [r3, #4]
  digData = (*((uint16_t *)pData));
 80011e6:	2012      	movs	r0, #18
 80011e8:	183b      	adds	r3, r7, r0
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	8812      	ldrh	r2, [r2, #0]
 80011ee:	801a      	strh	r2, [r3, #0]
  
  chOffset = (((uint8_t)2)*Channel) + (((uint8_t)24)*PatternNum);
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	7819      	ldrb	r1, [r3, #0]
 80011f4:	1dbb      	adds	r3, r7, #6
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	0013      	movs	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	189b      	adds	r3, r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	18cb      	adds	r3, r1, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2111      	movs	r1, #17
 8001206:	187a      	adds	r2, r7, r1
 8001208:	18db      	adds	r3, r3, r3
 800120a:	7013      	strb	r3, [r2, #0]
  
  if(digData<=((uint16_t)4095))
 800120c:	183b      	adds	r3, r7, r0
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	015b      	lsls	r3, r3, #5
 8001214:	429a      	cmp	r2, r3
 8001216:	d20d      	bcs.n	8001234 <LED1202_WritePatternPWMConfig+0x76>
  {
   ret =  LED1202_WriteReg(&(pObj->Ctx),(uint8_t)( LED1202_PATTERN0_CS0_PWM + chOffset), pData, 2); 
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	331c      	adds	r3, #28
 800121c:	0018      	movs	r0, r3
 800121e:	187b      	adds	r3, r7, r1
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	331e      	adds	r3, #30
 8001224:	b2db      	uxtb	r3, r3
 8001226:	b299      	uxth	r1, r3
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	f000 f828 	bl	8001280 <LED1202_WriteReg>
 8001230:	0003      	movs	r3, r0
 8001232:	617b      	str	r3, [r7, #20]
  }
  return (ret);
 8001234:	697b      	ldr	r3, [r7, #20]
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b006      	add	sp, #24
 800123c:	bd80      	pop	{r7, pc}

0800123e <LED1202_ReadReg>:
* @param  len   number of consecutive register to read
* @retval          interface status (MANDATORY: return 0 -> no Error)
*
*/
int32_t LED1202_ReadReg (const LED1202_Ctx_TypeDef *pLed, uint16_t Reg, const uint8_t *Data, uint16_t len)
{
 800123e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001240:	b087      	sub	sp, #28
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	0008      	movs	r0, r1
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	0019      	movs	r1, r3
 800124c:	250a      	movs	r5, #10
 800124e:	197b      	adds	r3, r7, r5
 8001250:	1c02      	adds	r2, r0, #0
 8001252:	801a      	strh	r2, [r3, #0]
 8001254:	2608      	movs	r6, #8
 8001256:	19bb      	adds	r3, r7, r6
 8001258:	1c0a      	adds	r2, r1, #0
 800125a:	801a      	strh	r2, [r3, #0]
  int32_t tmp;
  tmp =(int32_t)( pLed->ReadReg(pLed->handle, Reg,  Data, len));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685c      	ldr	r4, [r3, #4]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6898      	ldr	r0, [r3, #8]
 8001264:	197b      	adds	r3, r7, r5
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	b2d9      	uxtb	r1, r3
 800126a:	19bb      	adds	r3, r7, r6
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	47a0      	blx	r4
 8001272:	0003      	movs	r3, r0
 8001274:	617b      	str	r3, [r7, #20]
  return (tmp);
 8001276:	697b      	ldr	r3, [r7, #20]
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	b007      	add	sp, #28
 800127e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001280 <LED1202_WriteReg>:
* @param  len   number of consecutive register to read
* @retval          interface status (MANDATORY: return 0 -> no Error)
*
*/
int32_t LED1202_WriteReg (const LED1202_Ctx_TypeDef *pLed, uint16_t Reg, const uint8_t* Data, uint16_t len)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	0008      	movs	r0, r1
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	0019      	movs	r1, r3
 800128e:	250a      	movs	r5, #10
 8001290:	197b      	adds	r3, r7, r5
 8001292:	1c02      	adds	r2, r0, #0
 8001294:	801a      	strh	r2, [r3, #0]
 8001296:	2608      	movs	r6, #8
 8001298:	19bb      	adds	r3, r7, r6
 800129a:	1c0a      	adds	r2, r1, #0
 800129c:	801a      	strh	r2, [r3, #0]
  int32_t tmp;
  tmp = (int32_t)(pLed->WriteReg(pLed->handle, Reg, Data, len));
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681c      	ldr	r4, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6898      	ldr	r0, [r3, #8]
 80012a6:	197b      	adds	r3, r7, r5
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b2d9      	uxtb	r1, r3
 80012ac:	19bb      	adds	r3, r7, r6
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	47a0      	blx	r4
 80012b4:	0003      	movs	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]
  return (tmp);
 80012b8:	697b      	ldr	r3, [r7, #20]
}
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	b007      	add	sp, #28
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080012c4 <LED12A1_Init>:
/**
* @brief  LED12A1 Board Initialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_Init( void )
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
  volatile int32_t ret =  (int32_t)LED1202_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  LED1202_IO_TypeDef ledIO;
  
  /*register SPI bus function to the component */
  ledIO.BusType = LED1202_I2C_BUS;
 80012ce:	003b      	movs	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
  ledIO.Address = LED1202_I2C_ADDR;
 80012d4:	003b      	movs	r3, r7
 80012d6:	225c      	movs	r2, #92	; 0x5c
 80012d8:	711a      	strb	r2, [r3, #4]
  ledIO.Init = LED12A1_I2C_Init;
 80012da:	003b      	movs	r3, r7
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <LED12A1_Init+0x50>)
 80012de:	609a      	str	r2, [r3, #8]
  ledIO.DeInit = LED12A1_I2C_DeInit;
 80012e0:	003b      	movs	r3, r7
 80012e2:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <LED12A1_Init+0x54>)
 80012e4:	60da      	str	r2, [r3, #12]
  ledIO.Write = LED12A1_I2C_Write;
 80012e6:	003b      	movs	r3, r7
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <LED12A1_Init+0x58>)
 80012ea:	611a      	str	r2, [r3, #16]
  ledIO.Read = LED12A1_I2C_Read;
 80012ec:	003b      	movs	r3, r7
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <LED12A1_Init+0x5c>)
 80012f0:	615a      	str	r2, [r3, #20]
  ledIO.Delay = LED12A1_Delay;
 80012f2:	003b      	movs	r3, r7
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <LED12A1_Init+0x60>)
 80012f6:	619a      	str	r2, [r3, #24]
  
  ret = LED1202_RegisterBusIO (&LED1202Obj, &ledIO);
 80012f8:	003a      	movs	r2, r7
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <LED12A1_Init+0x64>)
 80012fc:	0011      	movs	r1, r2
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff fe76 	bl	8000ff0 <LED1202_RegisterBusIO>
 8001304:	0003      	movs	r3, r0
 8001306:	61fb      	str	r3, [r7, #28]
  
  return (ret);
 8001308:	69fb      	ldr	r3, [r7, #28]
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b008      	add	sp, #32
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	0800132d 	.word	0x0800132d
 8001318:	0800133d 	.word	0x0800133d
 800131c:	08001361 	.word	0x08001361
 8001320:	080013c5 	.word	0x080013c5
 8001324:	08001849 	.word	0x08001849
 8001328:	2000023c 	.word	0x2000023c

0800132c <BSP_I2C_Init>:
/**
* @brief  LED12A1 I2C Initialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t  BSP_I2C_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  MX_I2C1_Init();
 8001330:	f7ff fb3e 	bl	80009b0 <MX_I2C1_Init>
  return (0);
 8001334:	2300      	movs	r3, #0
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <BSP_I2C_DeInit>:
/**
* @brief  LED12A1 I2C DeInitialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t BSP_I2C_DeInit(void)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret;
  ret  = HAL_I2C_DeInit(&hi2c1);
 8001342:	1dfc      	adds	r4, r7, #7
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <BSP_I2C_DeInit+0x20>)
 8001346:	0018      	movs	r0, r3
 8001348:	f000 fe4e 	bl	8001fe8 <HAL_I2C_DeInit>
 800134c:	0003      	movs	r3, r0
 800134e:	7023      	strb	r3, [r4, #0]
  return((int32_t)ret);
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	781b      	ldrb	r3, [r3, #0]
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b003      	add	sp, #12
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	200000b8 	.word	0x200000b8

08001360 <BSP_I2C_Write>:
* @param  Reg: The target register address to write
* @param  Value: The target register value to be written
* @retval BSP status
*/
int32_t BSP_I2C_Write(uint16_t DevAddr, uint16_t Reg, const uint8_t* pData, uint16_t Len)
{
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af04      	add	r7, sp, #16
 8001366:	0004      	movs	r4, r0
 8001368:	0008      	movs	r0, r1
 800136a:	60ba      	str	r2, [r7, #8]
 800136c:	0019      	movs	r1, r3
 800136e:	250e      	movs	r5, #14
 8001370:	197b      	adds	r3, r7, r5
 8001372:	1c22      	adds	r2, r4, #0
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	240c      	movs	r4, #12
 8001378:	193b      	adds	r3, r7, r4
 800137a:	1c02      	adds	r2, r0, #0
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	1c0a      	adds	r2, r1, #0
 8001382:	801a      	strh	r2, [r3, #0]
  int32_t ret = (int32_t)BSP_ERROR_BUS_FAILURE;
 8001384:	2308      	movs	r3, #8
 8001386:	425b      	negs	r3, r3
 8001388:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, (uint8_t)DevAddr,
 800138a:	197b      	adds	r3, r7, r5
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	b299      	uxth	r1, r3
 8001392:	193b      	adds	r3, r7, r4
 8001394:	881a      	ldrh	r2, [r3, #0]
 8001396:	480a      	ldr	r0, [pc, #40]	; (80013c0 <BSP_I2C_Write+0x60>)
 8001398:	23fa      	movs	r3, #250	; 0xfa
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	1dbb      	adds	r3, r7, #6
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	f000 fe4d 	bl	8002048 <HAL_I2C_Mem_Write>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d101      	bne.n	80013b6 <BSP_I2C_Write+0x56>
                        (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                        (uint8_t *)pData, Len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 80013b6:	697b      	ldr	r3, [r7, #20]
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b006      	add	sp, #24
 80013be:	bdb0      	pop	{r4, r5, r7, pc}
 80013c0:	200000b8 	.word	0x200000b8

080013c4 <BSP_I2C_Read>:
* @param  DevAddr: Device address on BUS
* @param  Reg: The target register address to read
* @retval BSP status
*/
int32_t BSP_I2C_Read(uint16_t DevAddr, uint16_t Reg, const uint8_t* pData, uint16_t Len)
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	0004      	movs	r4, r0
 80013cc:	0008      	movs	r0, r1
 80013ce:	60ba      	str	r2, [r7, #8]
 80013d0:	0019      	movs	r1, r3
 80013d2:	250e      	movs	r5, #14
 80013d4:	197b      	adds	r3, r7, r5
 80013d6:	1c22      	adds	r2, r4, #0
 80013d8:	801a      	strh	r2, [r3, #0]
 80013da:	240c      	movs	r4, #12
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	1c02      	adds	r2, r0, #0
 80013e0:	801a      	strh	r2, [r3, #0]
 80013e2:	1dbb      	adds	r3, r7, #6
 80013e4:	1c0a      	adds	r2, r1, #0
 80013e6:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80013e8:	2308      	movs	r3, #8
 80013ea:	425b      	negs	r3, r3
 80013ec:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, (uint16_t)Reg,
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	881a      	ldrh	r2, [r3, #0]
 80013f2:	197b      	adds	r3, r7, r5
 80013f4:	8819      	ldrh	r1, [r3, #0]
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <BSP_I2C_Read+0x5c>)
 80013f8:	23fa      	movs	r3, #250	; 0xfa
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	1dbb      	adds	r3, r7, #6
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	f000 ff4b 	bl	80022a4 <HAL_I2C_Mem_Read>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d101      	bne.n	8001416 <BSP_I2C_Read+0x52>
                       I2C_MEMADD_SIZE_8BIT, (uint8_t *)pData,
                       Len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001416:	697b      	ldr	r3, [r7, #20]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b006      	add	sp, #24
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	200000b8 	.word	0x200000b8

08001424 <ReadRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
int32_t ReadRegWrap(void *Handle, uint8_t Reg, const uint8_t *pData, uint16_t Length)
{
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	0008      	movs	r0, r1
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	0019      	movs	r1, r3
 8001432:	250b      	movs	r5, #11
 8001434:	197b      	adds	r3, r7, r5
 8001436:	1c02      	adds	r2, r0, #0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	2608      	movs	r6, #8
 800143c:	19bb      	adds	r3, r7, r6
 800143e:	1c0a      	adds	r2, r1, #0
 8001440:	801a      	strh	r2, [r3, #0]
  LED1202_Object_TypeDef *led1202Obj = (LED1202_Object_TypeDef *)Handle;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	617b      	str	r3, [r7, #20]
  
  return led1202Obj->IO.Read(led1202Obj->IO.Address, Reg, pData, Length);
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	695c      	ldr	r4, [r3, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	791b      	ldrb	r3, [r3, #4]
 800144e:	b298      	uxth	r0, r3
 8001450:	197b      	adds	r3, r7, r5
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b299      	uxth	r1, r3
 8001456:	19bb      	adds	r3, r7, r6
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	47a0      	blx	r4
 800145e:	0003      	movs	r3, r0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b007      	add	sp, #28
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001468 <WriteRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
int32_t WriteRegWrap(void *Handle, uint8_t Reg, const uint8_t *pData, uint16_t Length)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	0008      	movs	r0, r1
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	0019      	movs	r1, r3
 8001476:	250b      	movs	r5, #11
 8001478:	197b      	adds	r3, r7, r5
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	2608      	movs	r6, #8
 8001480:	19bb      	adds	r3, r7, r6
 8001482:	1c0a      	adds	r2, r1, #0
 8001484:	801a      	strh	r2, [r3, #0]
  LED1202_Object_TypeDef *led1202Obj  = (LED1202_Object_TypeDef *)Handle;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	617b      	str	r3, [r7, #20]
  
  return led1202Obj->IO.Write(led1202Obj->IO.Address, Reg, pData, Length);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	691c      	ldr	r4, [r3, #16]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	791b      	ldrb	r3, [r3, #4]
 8001492:	b298      	uxth	r0, r3
 8001494:	197b      	adds	r3, r7, r5
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b299      	uxth	r1, r3
 800149a:	19bb      	adds	r3, r7, r6
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	47a0      	blx	r4
 80014a2:	0003      	movs	r3, r0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b007      	add	sp, #28
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ac <LED12A1_DeviceEnable>:
* @param  pObj pointer to Object
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_DeviceEnable( LED1202_Object_TypeDef* pObj , TypedefEnumDevAddr DevSelect)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	000a      	movs	r2, r1
 80014b6:	1cfb      	adds	r3, r7, #3
 80014b8:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  uint8_t tmp = 0x01;
 80014be:	230f      	movs	r3, #15
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
  uint8_t devAddr;
  
  switch(DevSelect)
 80014c6:	1cfb      	adds	r3, r7, #3
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d81d      	bhi.n	800150a <LED12A1_DeviceEnable+0x5e>
 80014ce:	009a      	lsls	r2, r3, #2
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <LED12A1_DeviceEnable+0x98>)
 80014d2:	18d3      	adds	r3, r2, r3
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	469f      	mov	pc, r3
  {
  case LED_DEVICE1:
    devAddr = LED1202_DEV1_7BIT_ADDR;
 80014d8:	2317      	movs	r3, #23
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2258      	movs	r2, #88	; 0x58
 80014de:	701a      	strb	r2, [r3, #0]
    
    break;
 80014e0:	e018      	b.n	8001514 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE2:
    devAddr = LED1202_DEV2_7BIT_ADDR;
 80014e2:	2317      	movs	r3, #23
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	2259      	movs	r2, #89	; 0x59
 80014e8:	701a      	strb	r2, [r3, #0]
    break;
 80014ea:	e013      	b.n	8001514 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE3:
    devAddr = LED1202_DEV3_7BIT_ADDR;
 80014ec:	2317      	movs	r3, #23
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	225a      	movs	r2, #90	; 0x5a
 80014f2:	701a      	strb	r2, [r3, #0]
    break;
 80014f4:	e00e      	b.n	8001514 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE4:
    devAddr = LED1202_DEV4_7BIT_ADDR;
 80014f6:	2317      	movs	r3, #23
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	225b      	movs	r2, #91	; 0x5b
 80014fc:	701a      	strb	r2, [r3, #0]
    break;  
 80014fe:	e009      	b.n	8001514 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE_ALL:
    devAddr = LED1202_GLOBAL_7BIT_ADDR; /*GLOBAL ADDRESS*/
 8001500:	2317      	movs	r3, #23
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	225c      	movs	r2, #92	; 0x5c
 8001506:	701a      	strb	r2, [r3, #0]
    break;
 8001508:	e004      	b.n	8001514 <LED12A1_DeviceEnable+0x68>
    
  default:
    devAddr = LED1202_GLOBAL_7BIT_ADDR;
 800150a:	2317      	movs	r3, #23
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	225c      	movs	r2, #92	; 0x5c
 8001510:	701a      	strb	r2, [r3, #0]
    break;
 8001512:	46c0      	nop			; (mov r8, r8)
    
  }
  
  pObj->IO.Address = (uint8_t)(devAddr<<1);
 8001514:	2317      	movs	r3, #23
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	18db      	adds	r3, r3, r3
 800151c:	b2da      	uxtb	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	711a      	strb	r2, [r3, #4]
  
  ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_DEVICE_ENABLE, &tmp, 1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	331c      	adds	r3, #28
 8001526:	0018      	movs	r0, r3
 8001528:	230f      	movs	r3, #15
 800152a:	18fa      	adds	r2, r7, r3
 800152c:	2301      	movs	r3, #1
 800152e:	2101      	movs	r1, #1
 8001530:	f7ff fea6 	bl	8001280 <LED1202_WriteReg>
 8001534:	0003      	movs	r3, r0
 8001536:	613b      	str	r3, [r7, #16]
  return(ret);
 8001538:	693b      	ldr	r3, [r7, #16]
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b006      	add	sp, #24
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	08004e9c 	.word	0x08004e9c

08001548 <LED12A1_SetDeviceAddr>:
* @param  pObj pointer to Object
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_SetDeviceAddr( LED1202_Object_TypeDef* pObj , TypedefEnumDevAddr DevSelect)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	000a      	movs	r2, r1
 8001552:	1cfb      	adds	r3, r7, #3
 8001554:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  uint8_t devAddr;
  
  switch(DevSelect)
 800155a:	1cfb      	adds	r3, r7, #3
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b04      	cmp	r3, #4
 8001560:	d81d      	bhi.n	800159e <LED12A1_SetDeviceAddr+0x56>
 8001562:	009a      	lsls	r2, r3, #2
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <LED12A1_SetDeviceAddr+0x74>)
 8001566:	18d3      	adds	r3, r2, r3
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	469f      	mov	pc, r3
  {
  case LED_DEVICE1:
    devAddr = LED1202_DEV1_7BIT_ADDR;
 800156c:	230f      	movs	r3, #15
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	2258      	movs	r2, #88	; 0x58
 8001572:	701a      	strb	r2, [r3, #0]
    
    break;
 8001574:	e018      	b.n	80015a8 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE2:
    devAddr = LED1202_DEV2_7BIT_ADDR;
 8001576:	230f      	movs	r3, #15
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	2259      	movs	r2, #89	; 0x59
 800157c:	701a      	strb	r2, [r3, #0]
    break;
 800157e:	e013      	b.n	80015a8 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE3:
    devAddr = LED1202_DEV3_7BIT_ADDR;
 8001580:	230f      	movs	r3, #15
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	225a      	movs	r2, #90	; 0x5a
 8001586:	701a      	strb	r2, [r3, #0]
    break;
 8001588:	e00e      	b.n	80015a8 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE4:
    devAddr = LED1202_DEV4_7BIT_ADDR;
 800158a:	230f      	movs	r3, #15
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	225b      	movs	r2, #91	; 0x5b
 8001590:	701a      	strb	r2, [r3, #0]
    break;
 8001592:	e009      	b.n	80015a8 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE_ALL:
    devAddr = LED1202_GLOBAL_7BIT_ADDR; /*GLOBAL ADDRESS*/
 8001594:	230f      	movs	r3, #15
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	225c      	movs	r2, #92	; 0x5c
 800159a:	701a      	strb	r2, [r3, #0]
    break;
 800159c:	e004      	b.n	80015a8 <LED12A1_SetDeviceAddr+0x60>
    
  default:
    devAddr = LED1202_GLOBAL_7BIT_ADDR;
 800159e:	230f      	movs	r3, #15
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	225c      	movs	r2, #92	; 0x5c
 80015a4:	701a      	strb	r2, [r3, #0]
    break;
 80015a6:	46c0      	nop			; (mov r8, r8)
    
  }
  
  pObj->IO.Address = devAddr;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	220f      	movs	r2, #15
 80015ac:	18ba      	adds	r2, r7, r2
 80015ae:	7812      	ldrb	r2, [r2, #0]
 80015b0:	711a      	strb	r2, [r3, #4]
  
  return(ret);
 80015b2:	68bb      	ldr	r3, [r7, #8]
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b004      	add	sp, #16
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	08004eb0 	.word	0x08004eb0

080015c0 <LED12A1_ScanAvailDevice>:
* @param  pObj pointer to Object
* @param  pBuff Pointer to buffer to store the Available devices 7 bit addresses
* @retval Number of LED1202 devices available on board
*/
int32_t LED12A1_ScanAvailDevice( LED1202_Object_TypeDef* pObj ,uint8_t *pBuff)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint8_t i2cStartAddr = 0x58;
 80015ca:	2113      	movs	r1, #19
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2258      	movs	r2, #88	; 0x58
 80015d0:	701a      	strb	r2, [r3, #0]
  uint8_t i2cEndAddr = 0x60;
 80015d2:	2312      	movs	r3, #18
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	2260      	movs	r2, #96	; 0x60
 80015d8:	701a      	strb	r2, [r3, #0]
  uint8_t addr;
  uint8_t *buffPtr = pBuff;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	61bb      	str	r3, [r7, #24]
  uint8_t devId;
  int32_t status;
  int32_t numDev = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  
  for (addr = i2cStartAddr; addr<=i2cEndAddr; addr++)
 80015e2:	231f      	movs	r3, #31
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	187a      	adds	r2, r7, r1
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	e020      	b.n	8001630 <LED12A1_ScanAvailDevice+0x70>
  {
    devId = 0;
 80015ee:	210b      	movs	r1, #11
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
    status =  LED1202_ReadID(pObj, &devId, addr);
 80015f6:	241f      	movs	r4, #31
 80015f8:	193b      	adds	r3, r7, r4
 80015fa:	781a      	ldrb	r2, [r3, #0]
 80015fc:	1879      	adds	r1, r7, r1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff fd3f 	bl	8001084 <LED1202_ReadID>
 8001606:	0003      	movs	r3, r0
 8001608:	60fb      	str	r3, [r7, #12]
    
    if(status == ((int32_t)LED1202_OK))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <LED12A1_ScanAvailDevice+0x64>
    {
      numDev++;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
      *buffPtr = addr;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	193a      	adds	r2, r7, r4
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	701a      	strb	r2, [r3, #0]
      buffPtr++;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	3301      	adds	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  for (addr = i2cStartAddr; addr<=i2cEndAddr; addr++)
 8001624:	211f      	movs	r1, #31
 8001626:	187b      	adds	r3, r7, r1
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	187b      	adds	r3, r7, r1
 800162c:	3201      	adds	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	231f      	movs	r3, #31
 8001632:	18fa      	adds	r2, r7, r3
 8001634:	2312      	movs	r3, #18
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d9d6      	bls.n	80015ee <LED12A1_ScanAvailDevice+0x2e>
    }
  }
  
  return(numDev);
 8001640:	697b      	ldr	r3, [r7, #20]
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b009      	add	sp, #36	; 0x24
 8001648:	bd90      	pop	{r4, r7, pc}

0800164a <LED12A1_DigitalDimming>:
* @param  PatternNum Pattern Number
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval ret the status of the operartion
*/
int32_t LED12A1_DigitalDimming( LED1202_Object_TypeDef* pObj ,uint16_t *pBuff,uint8_t Channel, uint8_t PatternNum, TypedefEnumDevAddr DevSelect)
{
 800164a:	b590      	push	{r4, r7, lr}
 800164c:	b089      	sub	sp, #36	; 0x24
 800164e:	af02      	add	r7, sp, #8
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	0019      	movs	r1, r3
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	1dbb      	adds	r3, r7, #6
 800165c:	1c0a      	adds	r2, r1, #0
 800165e:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 8001664:	2328      	movs	r3, #40	; 0x28
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	781a      	ldrb	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	0011      	movs	r1, r2
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff ff6a 	bl	8001548 <LED12A1_SetDeviceAddr>
 8001674:	0003      	movs	r3, r0
 8001676:	617b      	str	r3, [r7, #20]
  ret = LED1202_WritePatternPWMConfig(pObj ,(uint8_t *)pBuff,Channel, PatternNum, pObj->IO.Address);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	791b      	ldrb	r3, [r3, #4]
 800167c:	1dba      	adds	r2, r7, #6
 800167e:	7814      	ldrb	r4, [r2, #0]
 8001680:	1dfa      	adds	r2, r7, #7
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	0023      	movs	r3, r4
 800168c:	f7ff fd97 	bl	80011be <LED1202_WritePatternPWMConfig>
 8001690:	0003      	movs	r3, r0
 8001692:	617b      	str	r3, [r7, #20]
  return(ret);
 8001694:	697b      	ldr	r3, [r7, #20]
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b007      	add	sp, #28
 800169c:	bd90      	pop	{r4, r7, pc}

0800169e <LED12A1_ChannelEnable>:
* @param  Channel any combination of LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_ChannelEnable( LED1202_Object_TypeDef* pObj , TypeDefChannel Channel, TypedefEnumDevAddr DevSelect)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	0008      	movs	r0, r1
 80016a8:	0011      	movs	r1, r2
 80016aa:	1cbb      	adds	r3, r7, #2
 80016ac:	1c02      	adds	r2, r0, #0
 80016ae:	801a      	strh	r2, [r3, #0]
 80016b0:	1c7b      	adds	r3, r7, #1
 80016b2:	1c0a      	adds	r2, r1, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 80016ba:	1c7b      	adds	r3, r7, #1
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff ff40 	bl	8001548 <LED12A1_SetDeviceAddr>
 80016c8:	0003      	movs	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]
  ret = LED1202_SetChannelState(pObj ,(uint16_t) Channel ,CH_STATE_ENABLE, pObj->IO.Address);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	791a      	ldrb	r2, [r3, #4]
 80016d0:	1cbb      	adds	r3, r7, #2
 80016d2:	8819      	ldrh	r1, [r3, #0]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	0013      	movs	r3, r2
 80016d8:	2200      	movs	r2, #0
 80016da:	f7ff fcfb 	bl	80010d4 <LED1202_SetChannelState>
 80016de:	0003      	movs	r3, r0
 80016e0:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b004      	add	sp, #16
 80016ea:	bd80      	pop	{r7, pc}

080016ec <LED12A1_ChannelDisable>:
* @param  Channel any combination of LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_ChannelDisable( LED1202_Object_TypeDef* pObj , TypeDefChannel Channel,TypedefEnumDevAddr DevSelect)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	0008      	movs	r0, r1
 80016f6:	0011      	movs	r1, r2
 80016f8:	1cbb      	adds	r3, r7, #2
 80016fa:	1c02      	adds	r2, r0, #0
 80016fc:	801a      	strh	r2, [r3, #0]
 80016fe:	1c7b      	adds	r3, r7, #1
 8001700:	1c0a      	adds	r2, r1, #0
 8001702:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret =  (int32_t)LED1202_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 8001708:	1c7b      	adds	r3, r7, #1
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	0011      	movs	r1, r2
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff ff19 	bl	8001548 <LED12A1_SetDeviceAddr>
 8001716:	0003      	movs	r3, r0
 8001718:	60fb      	str	r3, [r7, #12]
  ret = LED1202_SetChannelState(pObj , (uint16_t) Channel ,CH_STATE_DISABLE, pObj->IO.Address);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	791a      	ldrb	r2, [r3, #4]
 800171e:	1cbb      	adds	r3, r7, #2
 8001720:	8819      	ldrh	r1, [r3, #0]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	0013      	movs	r3, r2
 8001726:	2201      	movs	r2, #1
 8001728:	f7ff fcd4 	bl	80010d4 <LED1202_SetChannelState>
 800172c:	0003      	movs	r3, r0
 800172e:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 8001730:	68fb      	ldr	r3, [r7, #12]
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_Init+0x3c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_Init+0x3c>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0049      	lsls	r1, r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f810 	bl	800177c <HAL_InitTick>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d003      	beq.n	8001768 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	e001      	b.n	800176c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001768:	f7ff fabc 	bl	8000ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	781b      	ldrb	r3, [r3, #0]
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	b002      	add	sp, #8
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40022000 	.word	0x40022000

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_InitTick+0x88>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d02b      	beq.n	80017ec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <HAL_InitTick+0x8c>)
 8001796:	681c      	ldr	r4, [r3, #0]
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_InitTick+0x88>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	0019      	movs	r1, r3
 800179e:	23fa      	movs	r3, #250	; 0xfa
 80017a0:	0098      	lsls	r0, r3, #2
 80017a2:	f7fe fcaf 	bl	8000104 <__udivsi3>
 80017a6:	0003      	movs	r3, r0
 80017a8:	0019      	movs	r1, r3
 80017aa:	0020      	movs	r0, r4
 80017ac:	f7fe fcaa 	bl	8000104 <__udivsi3>
 80017b0:	0003      	movs	r3, r0
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 f913 	bl	80019de <HAL_SYSTICK_Config>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d112      	bne.n	80017e2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d80a      	bhi.n	80017d8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	2301      	movs	r3, #1
 80017c6:	425b      	negs	r3, r3
 80017c8:	2200      	movs	r2, #0
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 f8f2 	bl	80019b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_InitTick+0x90>)
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e00d      	b.n	80017f4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80017d8:	230f      	movs	r3, #15
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e008      	b.n	80017f4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017e2:	230f      	movs	r3, #15
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e003      	b.n	80017f4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ec:	230f      	movs	r3, #15
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80017f4:	230f      	movs	r3, #15
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	781b      	ldrb	r3, [r3, #0]
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b005      	add	sp, #20
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	20000008 	.word	0x20000008
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x1c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	001a      	movs	r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x20>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	18d2      	adds	r2, r2, r3
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_IncTick+0x20>)
 8001822:	601a      	str	r2, [r3, #0]
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	20000008 	.word	0x20000008
 8001830:	20000268 	.word	0x20000268

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <HAL_GetTick+0x10>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	20000268 	.word	0x20000268

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fff0 	bl	8001834 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	001a      	movs	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	189b      	adds	r3, r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	f7ff ffe0 	bl	8001834 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b004      	add	sp, #16
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	20000008 	.word	0x20000008

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	0002      	movs	r2, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b7f      	cmp	r3, #127	; 0x7f
 80018a4:	d828      	bhi.n	80018f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a6:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <__NVIC_SetPriority+0xd4>)
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	33c0      	adds	r3, #192	; 0xc0
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	589b      	ldr	r3, [r3, r2]
 80018b6:	1dfa      	adds	r2, r7, #7
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	0011      	movs	r1, r2
 80018bc:	2203      	movs	r2, #3
 80018be:	400a      	ands	r2, r1
 80018c0:	00d2      	lsls	r2, r2, #3
 80018c2:	21ff      	movs	r1, #255	; 0xff
 80018c4:	4091      	lsls	r1, r2
 80018c6:	000a      	movs	r2, r1
 80018c8:	43d2      	mvns	r2, r2
 80018ca:	401a      	ands	r2, r3
 80018cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	019b      	lsls	r3, r3, #6
 80018d2:	22ff      	movs	r2, #255	; 0xff
 80018d4:	401a      	ands	r2, r3
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	0018      	movs	r0, r3
 80018dc:	2303      	movs	r3, #3
 80018de:	4003      	ands	r3, r0
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e4:	481f      	ldr	r0, [pc, #124]	; (8001964 <__NVIC_SetPriority+0xd4>)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	430a      	orrs	r2, r1
 80018f0:	33c0      	adds	r3, #192	; 0xc0
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018f6:	e031      	b.n	800195c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <__NVIC_SetPriority+0xd8>)
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	0019      	movs	r1, r3
 8001900:	230f      	movs	r3, #15
 8001902:	400b      	ands	r3, r1
 8001904:	3b08      	subs	r3, #8
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3306      	adds	r3, #6
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	18d3      	adds	r3, r2, r3
 800190e:	3304      	adds	r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	1dfa      	adds	r2, r7, #7
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	0011      	movs	r1, r2
 8001918:	2203      	movs	r2, #3
 800191a:	400a      	ands	r2, r1
 800191c:	00d2      	lsls	r2, r2, #3
 800191e:	21ff      	movs	r1, #255	; 0xff
 8001920:	4091      	lsls	r1, r2
 8001922:	000a      	movs	r2, r1
 8001924:	43d2      	mvns	r2, r2
 8001926:	401a      	ands	r2, r3
 8001928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	22ff      	movs	r2, #255	; 0xff
 8001930:	401a      	ands	r2, r3
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	0018      	movs	r0, r3
 8001938:	2303      	movs	r3, #3
 800193a:	4003      	ands	r3, r0
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001940:	4809      	ldr	r0, [pc, #36]	; (8001968 <__NVIC_SetPriority+0xd8>)
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	001c      	movs	r4, r3
 8001948:	230f      	movs	r3, #15
 800194a:	4023      	ands	r3, r4
 800194c:	3b08      	subs	r3, #8
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	430a      	orrs	r2, r1
 8001952:	3306      	adds	r3, #6
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	18c3      	adds	r3, r0, r3
 8001958:	3304      	adds	r3, #4
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b003      	add	sp, #12
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	045b      	lsls	r3, r3, #17
 800197c:	429a      	cmp	r2, r3
 800197e:	d301      	bcc.n	8001984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001980:	2301      	movs	r3, #1
 8001982:	e010      	b.n	80019a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <SysTick_Config+0x44>)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	3a01      	subs	r2, #1
 800198a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198c:	2301      	movs	r3, #1
 800198e:	425b      	negs	r3, r3
 8001990:	2103      	movs	r1, #3
 8001992:	0018      	movs	r0, r3
 8001994:	f7ff ff7c 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x44>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x44>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	210f      	movs	r1, #15
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	1c02      	adds	r2, r0, #0
 80019c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	0011      	movs	r1, r2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff ffbf 	bl	800196c <SysTick_Config>
 80019ee:	0003      	movs	r3, r0
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	e14d      	b.n	8001ca4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4091      	lsls	r1, r2
 8001a12:	000a      	movs	r2, r1
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d100      	bne.n	8001a20 <HAL_GPIO_Init+0x28>
 8001a1e:	e13e      	b.n	8001c9e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d005      	beq.n	8001a38 <HAL_GPIO_Init+0x40>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d130      	bne.n	8001a9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	409a      	lsls	r2, r3
 8001a46:	0013      	movs	r3, r2
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	0013      	movs	r3, r2
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a6e:	2201      	movs	r2, #1
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	43da      	mvns	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	2201      	movs	r2, #1
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d017      	beq.n	8001ad6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2203      	movs	r2, #3
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d123      	bne.n	8001b2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	58d3      	ldr	r3, [r2, r3]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2207      	movs	r2, #7
 8001af4:	4013      	ands	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	409a      	lsls	r2, r3
 8001afc:	0013      	movs	r3, r2
 8001afe:	43da      	mvns	r2, r3
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2107      	movs	r1, #7
 8001b0e:	400b      	ands	r3, r1
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	409a      	lsls	r2, r3
 8001b14:	0013      	movs	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	6939      	ldr	r1, [r7, #16]
 8001b28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	409a      	lsls	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2203      	movs	r2, #3
 8001b48:	401a      	ands	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	0013      	movs	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	23c0      	movs	r3, #192	; 0xc0
 8001b64:	029b      	lsls	r3, r3, #10
 8001b66:	4013      	ands	r3, r2
 8001b68:	d100      	bne.n	8001b6c <HAL_GPIO_Init+0x174>
 8001b6a:	e098      	b.n	8001c9e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b6c:	4a53      	ldr	r2, [pc, #332]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3318      	adds	r3, #24
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	589b      	ldr	r3, [r3, r2]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4013      	ands	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	220f      	movs	r2, #15
 8001b84:	409a      	lsls	r2, r3
 8001b86:	0013      	movs	r3, r2
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	23a0      	movs	r3, #160	; 0xa0
 8001b94:	05db      	lsls	r3, r3, #23
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x1d6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a48      	ldr	r2, [pc, #288]	; (8001cc0 <HAL_GPIO_Init+0x2c8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x1d2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a47      	ldr	r2, [pc, #284]	; (8001cc4 <HAL_GPIO_Init+0x2cc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x1ce>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a46      	ldr	r2, [pc, #280]	; (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x1ca>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a45      	ldr	r2, [pc, #276]	; (8001ccc <HAL_GPIO_Init+0x2d4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x1c6>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e008      	b.n	8001bd0 <HAL_GPIO_Init+0x1d8>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x1d8>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e004      	b.n	8001bd0 <HAL_GPIO_Init+0x1d8>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x1d8>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x1d8>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	00d2      	lsls	r2, r2, #3
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001be0:	4936      	ldr	r1, [pc, #216]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3318      	adds	r3, #24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	035b      	lsls	r3, r3, #13
 8001c06:	4013      	ands	r3, r2
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43da      	mvns	r2, r3
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	039b      	lsls	r3, r3, #14
 8001c30:	4013      	ands	r3, r2
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c42:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001c44:	2384      	movs	r3, #132	; 0x84
 8001c46:	58d3      	ldr	r3, [r2, r3]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43da      	mvns	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	029b      	lsls	r3, r3, #10
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c68:	4914      	ldr	r1, [pc, #80]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001c6a:	2284      	movs	r2, #132	; 0x84
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c70:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	58d3      	ldr	r3, [r2, r3]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	025b      	lsls	r3, r3, #9
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c96:	4909      	ldr	r1, [pc, #36]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	40da      	lsrs	r2, r3
 8001cac:	1e13      	subs	r3, r2, #0
 8001cae:	d000      	beq.n	8001cb2 <HAL_GPIO_Init+0x2ba>
 8001cb0:	e6aa      	b.n	8001a08 <HAL_GPIO_Init+0x10>
  }
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b006      	add	sp, #24
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	50000400 	.word	0x50000400
 8001cc4:	50000800 	.word	0x50000800
 8001cc8:	50000c00 	.word	0x50000c00
 8001ccc:	50001000 	.word	0x50001000

08001cd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001cde:	e0ba      	b.n	8001e56 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d100      	bne.n	8001cf4 <HAL_GPIO_DeInit+0x24>
 8001cf2:	e0ad      	b.n	8001e50 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8001cf4:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3318      	adds	r3, #24
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	589b      	ldr	r3, [r3, r2]
 8001d00:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2203      	movs	r2, #3
 8001d06:	4013      	ands	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	23a0      	movs	r3, #160	; 0xa0
 8001d18:	05db      	lsls	r3, r3, #23
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_DeInit+0x82>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_GPIO_DeInit+0x1a0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_DeInit+0x7e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_GPIO_DeInit+0x1a4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_DeInit+0x7a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a51      	ldr	r2, [pc, #324]	; (8001e78 <HAL_GPIO_DeInit+0x1a8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_DeInit+0x76>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <HAL_GPIO_DeInit+0x1ac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_DeInit+0x72>
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_DeInit+0x84>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_DeInit+0x84>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_DeInit+0x84>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_DeInit+0x84>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_DeInit+0x84>
 8001d52:	2300      	movs	r3, #0
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	2103      	movs	r1, #3
 8001d58:	400a      	ands	r2, r1
 8001d5a:	00d2      	lsls	r2, r2, #3
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d136      	bne.n	8001dd2 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d64:	4a41      	ldr	r2, [pc, #260]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	58d3      	ldr	r3, [r2, r3]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	43d2      	mvns	r2, r2
 8001d6e:	493f      	ldr	r1, [pc, #252]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8001d76:	4a3d      	ldr	r2, [pc, #244]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001d78:	2384      	movs	r3, #132	; 0x84
 8001d7a:	58d3      	ldr	r3, [r2, r3]
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	43d2      	mvns	r2, r2
 8001d80:	493a      	ldr	r1, [pc, #232]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	2284      	movs	r2, #132	; 0x84
 8001d86:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001d96:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43d9      	mvns	r1, r3
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2203      	movs	r2, #3
 8001da8:	4013      	ands	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	220f      	movs	r2, #15
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001db4:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3318      	adds	r3, #24
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	589a      	ldr	r2, [r3, r2]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	4829      	ldr	r0, [pc, #164]	; (8001e6c <HAL_GPIO_DeInit+0x19c>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	400a      	ands	r2, r1
 8001dcc:	3318      	adds	r3, #24
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2103      	movs	r1, #3
 8001ddc:	4099      	lsls	r1, r3
 8001dde:	000b      	movs	r3, r1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	58d3      	ldr	r3, [r2, r3]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	2107      	movs	r1, #7
 8001df6:	400a      	ands	r2, r1
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	4091      	lsls	r1, r2
 8001dfe:	000a      	movs	r2, r1
 8001e00:	43d1      	mvns	r1, r2
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	08d2      	lsrs	r2, r2, #3
 8001e06:	4019      	ands	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	0052      	lsls	r2, r2, #1
 8001e18:	2103      	movs	r1, #3
 8001e1a:	4091      	lsls	r1, r2
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	43d2      	mvns	r2, r2
 8001e20:	401a      	ands	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4091      	lsls	r1, r2
 8001e30:	000a      	movs	r2, r1
 8001e32:	43d2      	mvns	r2, r2
 8001e34:	401a      	ands	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	0052      	lsls	r2, r2, #1
 8001e42:	2103      	movs	r1, #3
 8001e44:	4091      	lsls	r1, r2
 8001e46:	000a      	movs	r2, r1
 8001e48:	43d2      	mvns	r2, r2
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	40da      	lsrs	r2, r3
 8001e5c:	1e13      	subs	r3, r2, #0
 8001e5e:	d000      	beq.n	8001e62 <HAL_GPIO_DeInit+0x192>
 8001e60:	e73e      	b.n	8001ce0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b006      	add	sp, #24
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021800 	.word	0x40021800
 8001e70:	50000400 	.word	0x50000400
 8001e74:	50000800 	.word	0x50000800
 8001e78:	50000c00 	.word	0x50000c00
 8001e7c:	50001000 	.word	0x50001000

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	0008      	movs	r0, r1
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	1cbb      	adds	r3, r7, #2
 8001e8e:	1c02      	adds	r2, r0, #0
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	1c7b      	adds	r3, r7, #1
 8001e94:	1c0a      	adds	r2, r1, #0
 8001e96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e98:	1c7b      	adds	r3, r7, #1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea0:	1cbb      	adds	r3, r7, #2
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eaa:	1cbb      	adds	r3, r7, #2
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e082      	b.n	8001fd4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2241      	movs	r2, #65	; 0x41
 8001ed2:	5c9b      	ldrb	r3, [r3, r2]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2240      	movs	r2, #64	; 0x40
 8001ede:	2100      	movs	r1, #0
 8001ee0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe ff21 	bl	8000d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2241      	movs	r2, #65	; 0x41
 8001eee:	2124      	movs	r1, #36	; 0x24
 8001ef0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	438a      	bics	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4934      	ldr	r1, [pc, #208]	; (8001fdc <HAL_I2C_Init+0x120>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4931      	ldr	r1, [pc, #196]	; (8001fe0 <HAL_I2C_Init+0x124>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	0209      	lsls	r1, r1, #8
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e007      	b.n	8001f4a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2184      	movs	r1, #132	; 0x84
 8001f44:	0209      	lsls	r1, r1, #8
 8001f46:	430a      	orrs	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d104      	bne.n	8001f5c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	491f      	ldr	r1, [pc, #124]	; (8001fe4 <HAL_I2C_Init+0x128>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	491a      	ldr	r1, [pc, #104]	; (8001fe0 <HAL_I2C_Init+0x124>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69d9      	ldr	r1, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2241      	movs	r2, #65	; 0x41
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2242      	movs	r2, #66	; 0x42
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	f0ffffff 	.word	0xf0ffffff
 8001fe0:	ffff7fff 	.word	0xffff7fff
 8001fe4:	02008000 	.word	0x02008000

08001fe8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e022      	b.n	8002040 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2241      	movs	r2, #65	; 0x41
 8001ffe:	2124      	movs	r1, #36	; 0x24
 8002000:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	438a      	bics	r2, r1
 8002010:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	0018      	movs	r0, r3
 8002016:	f7fe feeb 	bl	8000df0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2241      	movs	r2, #65	; 0x41
 8002024:	2100      	movs	r1, #0
 8002026:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2242      	movs	r2, #66	; 0x42
 8002032:	2100      	movs	r1, #0
 8002034:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2240      	movs	r2, #64	; 0x40
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	000c      	movs	r4, r1
 8002052:	0010      	movs	r0, r2
 8002054:	0019      	movs	r1, r3
 8002056:	230a      	movs	r3, #10
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	1c22      	adds	r2, r4, #0
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	2308      	movs	r3, #8
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	1c02      	adds	r2, r0, #0
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	1dbb      	adds	r3, r7, #6
 8002068:	1c0a      	adds	r2, r1, #0
 800206a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2241      	movs	r2, #65	; 0x41
 8002070:	5c9b      	ldrb	r3, [r3, r2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b20      	cmp	r3, #32
 8002076:	d000      	beq.n	800207a <HAL_I2C_Mem_Write+0x32>
 8002078:	e10c      	b.n	8002294 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <HAL_I2C_Mem_Write+0x42>
 8002080:	232c      	movs	r3, #44	; 0x2c
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0ff      	b.n	8002296 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2240      	movs	r2, #64	; 0x40
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_I2C_Mem_Write+0x5c>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e0f8      	b.n	8002296 <HAL_I2C_Mem_Write+0x24e>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2240      	movs	r2, #64	; 0x40
 80020a8:	2101      	movs	r1, #1
 80020aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ac:	f7ff fbc2 	bl	8001834 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	0219      	lsls	r1, r3, #8
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2319      	movs	r3, #25
 80020c0:	2201      	movs	r2, #1
 80020c2:	f000 fb0b 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e0e3      	b.n	8002296 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2241      	movs	r2, #65	; 0x41
 80020d2:	2121      	movs	r1, #33	; 0x21
 80020d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2242      	movs	r2, #66	; 0x42
 80020da:	2140      	movs	r1, #64	; 0x40
 80020dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	222c      	movs	r2, #44	; 0x2c
 80020ee:	18ba      	adds	r2, r7, r2
 80020f0:	8812      	ldrh	r2, [r2, #0]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020fa:	1dbb      	adds	r3, r7, #6
 80020fc:	881c      	ldrh	r4, [r3, #0]
 80020fe:	2308      	movs	r3, #8
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	230a      	movs	r3, #10
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	8819      	ldrh	r1, [r3, #0]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	0023      	movs	r3, r4
 8002116:	f000 f9f9 	bl	800250c <I2C_RequestMemoryWrite>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d005      	beq.n	800212a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2240      	movs	r2, #64	; 0x40
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0b5      	b.n	8002296 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212e:	b29b      	uxth	r3, r3
 8002130:	2bff      	cmp	r3, #255	; 0xff
 8002132:	d911      	bls.n	8002158 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	b2da      	uxtb	r2, r3
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	045c      	lsls	r4, r3, #17
 8002144:	230a      	movs	r3, #10
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	8819      	ldrh	r1, [r3, #0]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	2300      	movs	r3, #0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	0023      	movs	r3, r4
 8002152:	f000 fc7d 	bl	8002a50 <I2C_TransferConfig>
 8002156:	e012      	b.n	800217e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	b2da      	uxtb	r2, r3
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	049c      	lsls	r4, r3, #18
 800216c:	230a      	movs	r3, #10
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	8819      	ldrh	r1, [r3, #0]
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	2300      	movs	r3, #0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	0023      	movs	r3, r4
 800217a:	f000 fc69 	bl	8002a50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 fae8 	bl	800275a <I2C_WaitOnTXISFlagUntilTimeout>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e081      	b.n	8002296 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d03a      	beq.n	8002242 <HAL_I2C_Mem_Write+0x1fa>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d136      	bne.n	8002242 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	0013      	movs	r3, r2
 80021de:	2200      	movs	r2, #0
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	f000 fa7b 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80021e6:	1e03      	subs	r3, r0, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e053      	b.n	8002296 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2bff      	cmp	r3, #255	; 0xff
 80021f6:	d911      	bls.n	800221c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	22ff      	movs	r2, #255	; 0xff
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	b2da      	uxtb	r2, r3
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	045c      	lsls	r4, r3, #17
 8002208:	230a      	movs	r3, #10
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	8819      	ldrh	r1, [r3, #0]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	2300      	movs	r3, #0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	0023      	movs	r3, r4
 8002216:	f000 fc1b 	bl	8002a50 <I2C_TransferConfig>
 800221a:	e012      	b.n	8002242 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	b2da      	uxtb	r2, r3
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	049c      	lsls	r4, r3, #18
 8002230:	230a      	movs	r3, #10
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	8819      	ldrh	r1, [r3, #0]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	2300      	movs	r3, #0
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	0023      	movs	r3, r4
 800223e:	f000 fc07 	bl	8002a50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d198      	bne.n	800217e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 fac0 	bl	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002258:	1e03      	subs	r3, r0, #0
 800225a:	d001      	beq.n	8002260 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e01a      	b.n	8002296 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2220      	movs	r2, #32
 8002266:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	490b      	ldr	r1, [pc, #44]	; (80022a0 <HAL_I2C_Mem_Write+0x258>)
 8002274:	400a      	ands	r2, r1
 8002276:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2241      	movs	r2, #65	; 0x41
 800227c:	2120      	movs	r1, #32
 800227e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2242      	movs	r2, #66	; 0x42
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	2100      	movs	r1, #0
 800228e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b007      	add	sp, #28
 800229c:	bd90      	pop	{r4, r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	fe00e800 	.word	0xfe00e800

080022a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	000c      	movs	r4, r1
 80022ae:	0010      	movs	r0, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	230a      	movs	r3, #10
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	1c22      	adds	r2, r4, #0
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	2308      	movs	r3, #8
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	1c02      	adds	r2, r0, #0
 80022c0:	801a      	strh	r2, [r3, #0]
 80022c2:	1dbb      	adds	r3, r7, #6
 80022c4:	1c0a      	adds	r2, r1, #0
 80022c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2241      	movs	r2, #65	; 0x41
 80022cc:	5c9b      	ldrb	r3, [r3, r2]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d000      	beq.n	80022d6 <HAL_I2C_Mem_Read+0x32>
 80022d4:	e110      	b.n	80024f8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <HAL_I2C_Mem_Read+0x42>
 80022dc:	232c      	movs	r3, #44	; 0x2c
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d105      	bne.n	80022f2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e103      	b.n	80024fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2240      	movs	r2, #64	; 0x40
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_I2C_Mem_Read+0x5c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0fc      	b.n	80024fa <HAL_I2C_Mem_Read+0x256>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2240      	movs	r2, #64	; 0x40
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002308:	f7ff fa94 	bl	8001834 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	0219      	lsls	r1, r3, #8
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2319      	movs	r3, #25
 800231c:	2201      	movs	r2, #1
 800231e:	f000 f9dd 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002322:	1e03      	subs	r3, r0, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0e7      	b.n	80024fa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2241      	movs	r2, #65	; 0x41
 800232e:	2122      	movs	r1, #34	; 0x22
 8002330:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2242      	movs	r2, #66	; 0x42
 8002336:	2140      	movs	r1, #64	; 0x40
 8002338:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	222c      	movs	r2, #44	; 0x2c
 800234a:	18ba      	adds	r2, r7, r2
 800234c:	8812      	ldrh	r2, [r2, #0]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002356:	1dbb      	adds	r3, r7, #6
 8002358:	881c      	ldrh	r4, [r3, #0]
 800235a:	2308      	movs	r3, #8
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	230a      	movs	r3, #10
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	8819      	ldrh	r1, [r3, #0]
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	0023      	movs	r3, r4
 8002372:	f000 f92f 	bl	80025d4 <I2C_RequestMemoryRead>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d005      	beq.n	8002386 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2240      	movs	r2, #64	; 0x40
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0b9      	b.n	80024fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	2bff      	cmp	r3, #255	; 0xff
 800238e:	d911      	bls.n	80023b4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	22ff      	movs	r2, #255	; 0xff
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	b2da      	uxtb	r2, r3
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	045c      	lsls	r4, r3, #17
 80023a0:	230a      	movs	r3, #10
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	8819      	ldrh	r1, [r3, #0]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	4b56      	ldr	r3, [pc, #344]	; (8002504 <HAL_I2C_Mem_Read+0x260>)
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	0023      	movs	r3, r4
 80023ae:	f000 fb4f 	bl	8002a50 <I2C_TransferConfig>
 80023b2:	e012      	b.n	80023da <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	049c      	lsls	r4, r3, #18
 80023c8:	230a      	movs	r3, #10
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	8819      	ldrh	r1, [r3, #0]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <HAL_I2C_Mem_Read+0x260>)
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	0023      	movs	r3, r4
 80023d6:	f000 fb3b 	bl	8002a50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	0013      	movs	r3, r2
 80023e4:	2200      	movs	r2, #0
 80023e6:	2104      	movs	r1, #4
 80023e8:	f000 f978 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80023ec:	1e03      	subs	r3, r0, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e082      	b.n	80024fa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d03a      	beq.n	80024a6 <HAL_I2C_Mem_Read+0x202>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d136      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	0013      	movs	r3, r2
 8002442:	2200      	movs	r2, #0
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	f000 f949 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800244a:	1e03      	subs	r3, r0, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e053      	b.n	80024fa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2bff      	cmp	r3, #255	; 0xff
 800245a:	d911      	bls.n	8002480 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	22ff      	movs	r2, #255	; 0xff
 8002460:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	b2da      	uxtb	r2, r3
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	045c      	lsls	r4, r3, #17
 800246c:	230a      	movs	r3, #10
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	8819      	ldrh	r1, [r3, #0]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	2300      	movs	r3, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	0023      	movs	r3, r4
 800247a:	f000 fae9 	bl	8002a50 <I2C_TransferConfig>
 800247e:	e012      	b.n	80024a6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	b2da      	uxtb	r2, r3
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	049c      	lsls	r4, r3, #18
 8002494:	230a      	movs	r3, #10
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	8819      	ldrh	r1, [r3, #0]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	2300      	movs	r3, #0
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	0023      	movs	r3, r4
 80024a2:	f000 fad5 	bl	8002a50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d194      	bne.n	80023da <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 f98e 	bl	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024bc:	1e03      	subs	r3, r0, #0
 80024be:	d001      	beq.n	80024c4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e01a      	b.n	80024fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2220      	movs	r2, #32
 80024ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	490c      	ldr	r1, [pc, #48]	; (8002508 <HAL_I2C_Mem_Read+0x264>)
 80024d8:	400a      	ands	r2, r1
 80024da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2241      	movs	r2, #65	; 0x41
 80024e0:	2120      	movs	r1, #32
 80024e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2242      	movs	r2, #66	; 0x42
 80024e8:	2100      	movs	r1, #0
 80024ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	2100      	movs	r1, #0
 80024f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b007      	add	sp, #28
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	80002400 	.word	0x80002400
 8002508:	fe00e800 	.word	0xfe00e800

0800250c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	000c      	movs	r4, r1
 8002516:	0010      	movs	r0, r2
 8002518:	0019      	movs	r1, r3
 800251a:	250a      	movs	r5, #10
 800251c:	197b      	adds	r3, r7, r5
 800251e:	1c22      	adds	r2, r4, #0
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	2308      	movs	r3, #8
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	1c02      	adds	r2, r0, #0
 8002528:	801a      	strh	r2, [r3, #0]
 800252a:	1dbb      	adds	r3, r7, #6
 800252c:	1c0a      	adds	r2, r1, #0
 800252e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002530:	1dbb      	adds	r3, r7, #6
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	045c      	lsls	r4, r3, #17
 800253a:	197b      	adds	r3, r7, r5
 800253c:	8819      	ldrh	r1, [r3, #0]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <I2C_RequestMemoryWrite+0xc4>)
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	0023      	movs	r3, r4
 8002546:	f000 fa83 	bl	8002a50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800254a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254c:	6a39      	ldr	r1, [r7, #32]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	0018      	movs	r0, r3
 8002552:	f000 f902 	bl	800275a <I2C_WaitOnTXISFlagUntilTimeout>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d001      	beq.n	800255e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e033      	b.n	80025c6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800255e:	1dbb      	adds	r3, r7, #6
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002566:	2308      	movs	r3, #8
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28
 8002574:	e019      	b.n	80025aa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002576:	2308      	movs	r3, #8
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29b      	uxth	r3, r3
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	6a39      	ldr	r1, [r7, #32]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f8e3 	bl	800275a <I2C_WaitOnTXISFlagUntilTimeout>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d001      	beq.n	800259c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e014      	b.n	80025c6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800259c:	2308      	movs	r3, #8
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025aa:	6a3a      	ldr	r2, [r7, #32]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	0013      	movs	r3, r2
 80025b4:	2200      	movs	r2, #0
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	f000 f890 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80025bc:	1e03      	subs	r3, r0, #0
 80025be:	d001      	beq.n	80025c4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b004      	add	sp, #16
 80025cc:	bdb0      	pop	{r4, r5, r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	80002000 	.word	0x80002000

080025d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	000c      	movs	r4, r1
 80025de:	0010      	movs	r0, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	250a      	movs	r5, #10
 80025e4:	197b      	adds	r3, r7, r5
 80025e6:	1c22      	adds	r2, r4, #0
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	2308      	movs	r3, #8
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	1c02      	adds	r2, r0, #0
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	1dbb      	adds	r3, r7, #6
 80025f4:	1c0a      	adds	r2, r1, #0
 80025f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025f8:	1dbb      	adds	r3, r7, #6
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	197b      	adds	r3, r7, r5
 8002600:	8819      	ldrh	r1, [r3, #0]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	4b23      	ldr	r3, [pc, #140]	; (8002694 <I2C_RequestMemoryRead+0xc0>)
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2300      	movs	r3, #0
 800260a:	f000 fa21 	bl	8002a50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	0018      	movs	r0, r3
 8002616:	f000 f8a0 	bl	800275a <I2C_WaitOnTXISFlagUntilTimeout>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d001      	beq.n	8002622 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e033      	b.n	800268a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262a:	2308      	movs	r3, #8
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28
 8002638:	e019      	b.n	800266e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800263a:	2308      	movs	r3, #8
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	b29b      	uxth	r3, r3
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	6a39      	ldr	r1, [r7, #32]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	0018      	movs	r0, r3
 8002654:	f000 f881 	bl	800275a <I2C_WaitOnTXISFlagUntilTimeout>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d001      	beq.n	8002660 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e014      	b.n	800268a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002660:	2308      	movs	r3, #8
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800266e:	6a3a      	ldr	r2, [r7, #32]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	0013      	movs	r3, r2
 8002678:	2200      	movs	r2, #0
 800267a:	2140      	movs	r1, #64	; 0x40
 800267c:	f000 f82e 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002680:	1e03      	subs	r3, r0, #0
 8002682:	d001      	beq.n	8002688 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bdb0      	pop	{r4, r5, r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	80002000 	.word	0x80002000

08002698 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2202      	movs	r2, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d103      	bne.n	80026b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2201      	movs	r2, #1
 80026be:	4013      	ands	r3, r2
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d007      	beq.n	80026d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	430a      	orrs	r2, r1
 80026d2:	619a      	str	r2, [r3, #24]
  }
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}

080026dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	1dfb      	adds	r3, r7, #7
 80026ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ec:	e021      	b.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	d01e      	beq.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f4:	f7ff f89e 	bl	8001834 <HAL_GetTick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d302      	bcc.n	800270a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d113      	bne.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	2220      	movs	r2, #32
 8002710:	431a      	orrs	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2241      	movs	r2, #65	; 0x41
 800271a:	2120      	movs	r1, #32
 800271c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2242      	movs	r2, #66	; 0x42
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2240      	movs	r2, #64	; 0x40
 800272a:	2100      	movs	r1, #0
 800272c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00f      	b.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	4013      	ands	r3, r2
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	425a      	negs	r2, r3
 8002742:	4153      	adcs	r3, r2
 8002744:	b2db      	uxtb	r3, r3
 8002746:	001a      	movs	r2, r3
 8002748:	1dfb      	adds	r3, r7, #7
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d0ce      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bd80      	pop	{r7, pc}

0800275a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002766:	e02b      	b.n	80027c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 f86e 	bl	8002850 <I2C_IsErrorOccurred>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d001      	beq.n	800277c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e029      	b.n	80027d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	3301      	adds	r3, #1
 8002780:	d01e      	beq.n	80027c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002782:	f7ff f857 	bl	8001834 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	d302      	bcc.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d113      	bne.n	80027c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	2220      	movs	r2, #32
 800279e:	431a      	orrs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2241      	movs	r2, #65	; 0x41
 80027a8:	2120      	movs	r1, #32
 80027aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2242      	movs	r2, #66	; 0x42
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e007      	b.n	80027d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2202      	movs	r2, #2
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d1cc      	bne.n	8002768 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b004      	add	sp, #16
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e4:	e028      	b.n	8002838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f82f 	bl	8002850 <I2C_IsErrorOccurred>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e026      	b.n	8002848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fa:	f7ff f81b 	bl	8001834 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	d302      	bcc.n	8002810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d113      	bne.n	8002838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	2220      	movs	r2, #32
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2241      	movs	r2, #65	; 0x41
 8002820:	2120      	movs	r1, #32
 8002822:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2242      	movs	r2, #66	; 0x42
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2240      	movs	r2, #64	; 0x40
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e007      	b.n	8002848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2220      	movs	r2, #32
 8002840:	4013      	ands	r3, r2
 8002842:	2b20      	cmp	r3, #32
 8002844:	d1cf      	bne.n	80027e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b08b      	sub	sp, #44	; 0x2c
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2327      	movs	r3, #39	; 0x27
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2210      	movs	r2, #16
 8002878:	4013      	ands	r3, r2
 800287a:	d100      	bne.n	800287e <I2C_IsErrorOccurred+0x2e>
 800287c:	e082      	b.n	8002984 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2210      	movs	r2, #16
 8002884:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002886:	e060      	b.n	800294a <I2C_IsErrorOccurred+0xfa>
 8002888:	2427      	movs	r4, #39	; 0x27
 800288a:	193b      	adds	r3, r7, r4
 800288c:	193a      	adds	r2, r7, r4
 800288e:	7812      	ldrb	r2, [r2, #0]
 8002890:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3301      	adds	r3, #1
 8002896:	d058      	beq.n	800294a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002898:	f7fe ffcc 	bl	8001834 <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d306      	bcc.n	80028b6 <I2C_IsErrorOccurred+0x66>
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	193a      	adds	r2, r7, r4
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d149      	bne.n	800294a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	01db      	lsls	r3, r3, #7
 80028c0:	4013      	ands	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028c4:	2013      	movs	r0, #19
 80028c6:	183b      	adds	r3, r7, r0
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	2142      	movs	r1, #66	; 0x42
 80028cc:	5c52      	ldrb	r2, [r2, r1]
 80028ce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	401a      	ands	r2, r3
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d126      	bne.n	8002932 <I2C_IsErrorOccurred+0xe2>
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	01db      	lsls	r3, r3, #7
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d021      	beq.n	8002932 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d01d      	beq.n	8002932 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	01c9      	lsls	r1, r1, #7
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002908:	f7fe ff94 	bl	8001834 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002910:	e00f      	b.n	8002932 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002912:	f7fe ff8f 	bl	8001834 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b19      	cmp	r3, #25
 800291e:	d908      	bls.n	8002932 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2220      	movs	r2, #32
 8002924:	4313      	orrs	r3, r2
 8002926:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002928:	2327      	movs	r3, #39	; 0x27
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]

              break;
 8002930:	e00b      	b.n	800294a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2220      	movs	r2, #32
 800293a:	4013      	ands	r3, r2
 800293c:	2127      	movs	r1, #39	; 0x27
 800293e:	187a      	adds	r2, r7, r1
 8002940:	1879      	adds	r1, r7, r1
 8002942:	7809      	ldrb	r1, [r1, #0]
 8002944:	7011      	strb	r1, [r2, #0]
 8002946:	2b20      	cmp	r3, #32
 8002948:	d1e3      	bne.n	8002912 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2220      	movs	r2, #32
 8002952:	4013      	ands	r3, r2
 8002954:	2b20      	cmp	r3, #32
 8002956:	d004      	beq.n	8002962 <I2C_IsErrorOccurred+0x112>
 8002958:	2327      	movs	r3, #39	; 0x27
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d092      	beq.n	8002888 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002962:	2327      	movs	r3, #39	; 0x27
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d103      	bne.n	8002974 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2220      	movs	r2, #32
 8002972:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2204      	movs	r2, #4
 8002978:	4313      	orrs	r3, r2
 800297a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800297c:	2327      	movs	r3, #39	; 0x27
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4013      	ands	r3, r2
 8002994:	d00c      	beq.n	80029b0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	2201      	movs	r2, #1
 800299a:	4313      	orrs	r3, r2
 800299c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	0052      	lsls	r2, r2, #1
 80029a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029a8:	2327      	movs	r3, #39	; 0x27
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4013      	ands	r3, r2
 80029b8:	d00c      	beq.n	80029d4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	2208      	movs	r2, #8
 80029be:	4313      	orrs	r3, r2
 80029c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	00d2      	lsls	r2, r2, #3
 80029ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029cc:	2327      	movs	r3, #39	; 0x27
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4013      	ands	r3, r2
 80029dc:	d00c      	beq.n	80029f8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2202      	movs	r2, #2
 80029e2:	4313      	orrs	r3, r2
 80029e4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	0092      	lsls	r2, r2, #2
 80029ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029f0:	2327      	movs	r3, #39	; 0x27
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80029f8:	2327      	movs	r3, #39	; 0x27
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d01d      	beq.n	8002a3e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff fe47 	bl	8002698 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	490d      	ldr	r1, [pc, #52]	; (8002a4c <I2C_IsErrorOccurred+0x1fc>)
 8002a16:	400a      	ands	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2241      	movs	r2, #65	; 0x41
 8002a2a:	2120      	movs	r1, #32
 8002a2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2242      	movs	r2, #66	; 0x42
 8002a32:	2100      	movs	r1, #0
 8002a34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002a3e:	2327      	movs	r3, #39	; 0x27
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	781b      	ldrb	r3, [r3, #0]
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b00b      	add	sp, #44	; 0x2c
 8002a4a:	bd90      	pop	{r4, r7, pc}
 8002a4c:	fe00e800 	.word	0xfe00e800

08002a50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	0008      	movs	r0, r1
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	240a      	movs	r4, #10
 8002a60:	193b      	adds	r3, r7, r4
 8002a62:	1c02      	adds	r2, r0, #0
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	2009      	movs	r0, #9
 8002a68:	183b      	adds	r3, r7, r0
 8002a6a:	1c0a      	adds	r2, r1, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a6e:	193b      	adds	r3, r7, r4
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	059b      	lsls	r3, r3, #22
 8002a74:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a76:	183b      	adds	r3, r7, r0
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	0419      	lsls	r1, r3, #16
 8002a7c:	23ff      	movs	r3, #255	; 0xff
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a82:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9a:	0d51      	lsrs	r1, r2, #21
 8002a9c:	2280      	movs	r2, #128	; 0x80
 8002a9e:	00d2      	lsls	r2, r2, #3
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	4907      	ldr	r1, [pc, #28]	; (8002ac0 <I2C_TransferConfig+0x70>)
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	43d2      	mvns	r2, r2
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	0011      	movs	r1, r2
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b007      	add	sp, #28
 8002abc:	bd90      	pop	{r4, r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	03ff63ff 	.word	0x03ff63ff

08002ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2241      	movs	r2, #65	; 0x41
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d138      	bne.n	8002b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2240      	movs	r2, #64	; 0x40
 8002ade:	5c9b      	ldrb	r3, [r3, r2]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e032      	b.n	8002b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2240      	movs	r2, #64	; 0x40
 8002aec:	2101      	movs	r1, #1
 8002aee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2241      	movs	r2, #65	; 0x41
 8002af4:	2124      	movs	r1, #36	; 0x24
 8002af6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	438a      	bics	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4911      	ldr	r1, [pc, #68]	; (8002b58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2101      	movs	r1, #1
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2241      	movs	r2, #65	; 0x41
 8002b3c:	2120      	movs	r1, #32
 8002b3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b002      	add	sp, #8
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	ffffefff 	.word	0xffffefff

08002b5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2241      	movs	r2, #65	; 0x41
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d139      	bne.n	8002be6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2240      	movs	r2, #64	; 0x40
 8002b76:	5c9b      	ldrb	r3, [r3, r2]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e033      	b.n	8002be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2240      	movs	r2, #64	; 0x40
 8002b84:	2101      	movs	r1, #1
 8002b86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2241      	movs	r2, #65	; 0x41
 8002b8c:	2124      	movs	r1, #36	; 0x24
 8002b8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	438a      	bics	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2241      	movs	r2, #65	; 0x41
 8002bd6:	2120      	movs	r1, #32
 8002bd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2240      	movs	r2, #64	; 0x40
 8002bde:	2100      	movs	r1, #0
 8002be0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	0018      	movs	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b004      	add	sp, #16
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	fffff0ff 	.word	0xfffff0ff

08002bf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d11f      	bne.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	189b      	adds	r3, r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4912      	ldr	r1, [pc, #72]	; (8002c70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fd fa6c 	bl	8000104 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c32:	e008      	b.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e001      	b.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e009      	b.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	401a      	ands	r2, r3
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d0ed      	beq.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	40007000 	.word	0x40007000
 8002c68:	fffff9ff 	.word	0xfffff9ff
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	000f4240 	.word	0x000f4240

08002c74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	23e0      	movs	r3, #224	; 0xe0
 8002c7e:	01db      	lsls	r3, r3, #7
 8002c80:	4013      	ands	r3, r2
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f000 fb50 	bl	8003340 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d100      	bne.n	8002cac <HAL_RCC_OscConfig+0x20>
 8002caa:	e07c      	b.n	8002da6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cac:	4bc3      	ldr	r3, [pc, #780]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2238      	movs	r2, #56	; 0x38
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb6:	4bc1      	ldr	r3, [pc, #772]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d102      	bne.n	8002ccc <HAL_RCC_OscConfig+0x40>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d002      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d10b      	bne.n	8002cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd2:	4bba      	ldr	r3, [pc, #744]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	029b      	lsls	r3, r3, #10
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d062      	beq.n	8002da4 <HAL_RCC_OscConfig+0x118>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d15e      	bne.n	8002da4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e32a      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	025b      	lsls	r3, r3, #9
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7a>
 8002cf6:	4bb1      	ldr	r3, [pc, #708]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4bb0      	ldr	r3, [pc, #704]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	0249      	lsls	r1, r1, #9
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e020      	b.n	8002d48 <HAL_RCC_OscConfig+0xbc>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	23a0      	movs	r3, #160	; 0xa0
 8002d0c:	02db      	lsls	r3, r3, #11
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d10e      	bne.n	8002d30 <HAL_RCC_OscConfig+0xa4>
 8002d12:	4baa      	ldr	r3, [pc, #680]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4ba9      	ldr	r3, [pc, #676]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	02c9      	lsls	r1, r1, #11
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	4ba6      	ldr	r3, [pc, #664]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4ba5      	ldr	r3, [pc, #660]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	0249      	lsls	r1, r1, #9
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0xbc>
 8002d30:	4ba2      	ldr	r3, [pc, #648]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4ba1      	ldr	r3, [pc, #644]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d36:	49a2      	ldr	r1, [pc, #648]	; (8002fc0 <HAL_RCC_OscConfig+0x334>)
 8002d38:	400a      	ands	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	4b9f      	ldr	r3, [pc, #636]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b9e      	ldr	r3, [pc, #632]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d42:	49a0      	ldr	r1, [pc, #640]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d44:	400a      	ands	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d014      	beq.n	8002d7a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fd70 	bl	8001834 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5a:	f7fe fd6b 	bl	8001834 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b64      	cmp	r3, #100	; 0x64
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e2e9      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d6c:	4b93      	ldr	r3, [pc, #588]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	029b      	lsls	r3, r3, #10
 8002d74:	4013      	ands	r3, r2
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0xce>
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fd5b 	bl	8001834 <HAL_GetTick>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fd56 	bl	8001834 <HAL_GetTick>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e2d4      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d96:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0xf8>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2202      	movs	r2, #2
 8002dac:	4013      	ands	r3, r2
 8002dae:	d100      	bne.n	8002db2 <HAL_RCC_OscConfig+0x126>
 8002db0:	e099      	b.n	8002ee6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4b82      	ldr	r3, [pc, #520]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2238      	movs	r2, #56	; 0x38
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbc:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d102      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x146>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d135      	bne.n	8002e44 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd8:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4013      	ands	r3, r2
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_OscConfig+0x164>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e2a7      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a74      	ldr	r2, [pc, #464]	; (8002fc8 <HAL_RCC_OscConfig+0x33c>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	021a      	lsls	r2, r3, #8
 8002e00:	4b6e      	ldr	r3, [pc, #440]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d112      	bne.n	8002e32 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e0c:	4b6b      	ldr	r3, [pc, #428]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6e      	ldr	r2, [pc, #440]	; (8002fcc <HAL_RCC_OscConfig+0x340>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e20:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0adb      	lsrs	r3, r3, #11
 8002e26:	2207      	movs	r2, #7
 8002e28:	4013      	ands	r3, r2
 8002e2a:	4a69      	ldr	r2, [pc, #420]	; (8002fd0 <HAL_RCC_OscConfig+0x344>)
 8002e2c:	40da      	lsrs	r2, r3
 8002e2e:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <HAL_RCC_OscConfig+0x348>)
 8002e30:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e32:	4b69      	ldr	r3, [pc, #420]	; (8002fd8 <HAL_RCC_OscConfig+0x34c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7fe fca0 	bl	800177c <HAL_InitTick>
 8002e3c:	1e03      	subs	r3, r0, #0
 8002e3e:	d051      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e27d      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d030      	beq.n	8002eae <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e4c:	4b5b      	ldr	r3, [pc, #364]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5e      	ldr	r2, [pc, #376]	; (8002fcc <HAL_RCC_OscConfig+0x340>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b55      	ldr	r3, [pc, #340]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	0049      	lsls	r1, r1, #1
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fce1 	bl	8001834 <HAL_GetTick>
 8002e72:	0003      	movs	r3, r0
 8002e74:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e78:	f7fe fcdc 	bl	8001834 <HAL_GetTick>
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e25a      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e8a:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4013      	ands	r3, r2
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <HAL_RCC_OscConfig+0x33c>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	021a      	lsls	r2, r3, #8
 8002ea6:	4b45      	ldr	r3, [pc, #276]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	e01b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002eb4:	4949      	ldr	r1, [pc, #292]	; (8002fdc <HAL_RCC_OscConfig+0x350>)
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fe fcbb 	bl	8001834 <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe fcb6 	bl	8001834 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e234      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ed6:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x238>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2208      	movs	r2, #8
 8002eec:	4013      	ands	r3, r2
 8002eee:	d047      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ef0:	4b32      	ldr	r3, [pc, #200]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2238      	movs	r2, #56	; 0x38
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b18      	cmp	r3, #24
 8002efa:	d10a      	bne.n	8002f12 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002efc:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f00:	2202      	movs	r2, #2
 8002f02:	4013      	ands	r3, r2
 8002f04:	d03c      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2f4>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d138      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e216      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d019      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f1a:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002f1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f1e:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	430a      	orrs	r2, r1
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe fc85 	bl	8001834 <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe fc80 	bl	8001834 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1fe      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	2202      	movs	r2, #2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d0f1      	beq.n	8002f30 <HAL_RCC_OscConfig+0x2a4>
 8002f4c:	e018      	b.n	8002f80 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002f50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002f54:	2101      	movs	r1, #1
 8002f56:	438a      	bics	r2, r1
 8002f58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fc6b 	bl	8001834 <HAL_GetTick>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fe fc66 	bl	8001834 <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1e4      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d1f1      	bne.n	8002f64 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2204      	movs	r2, #4
 8002f86:	4013      	ands	r3, r2
 8002f88:	d100      	bne.n	8002f8c <HAL_RCC_OscConfig+0x300>
 8002f8a:	e0c7      	b.n	800311c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8c:	231f      	movs	r3, #31
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2238      	movs	r2, #56	; 0x38
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d11f      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_OscConfig+0x330>)
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d100      	bne.n	8002fac <HAL_RCC_OscConfig+0x320>
 8002faa:	e0b7      	b.n	800311c <HAL_RCC_OscConfig+0x490>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d000      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x32a>
 8002fb4:	e0b2      	b.n	800311c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e1c2      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	fffeffff 	.word	0xfffeffff
 8002fc4:	fffbffff 	.word	0xfffbffff
 8002fc8:	ffff80ff 	.word	0xffff80ff
 8002fcc:	ffffc7ff 	.word	0xffffc7ff
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fe0:	4bb5      	ldr	r3, [pc, #724]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8002fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	055b      	lsls	r3, r3, #21
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x364>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x366>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d011      	beq.n	800301a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	4bb0      	ldr	r3, [pc, #704]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8002ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ffa:	4baf      	ldr	r3, [pc, #700]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	0549      	lsls	r1, r1, #21
 8003000:	430a      	orrs	r2, r1
 8003002:	63da      	str	r2, [r3, #60]	; 0x3c
 8003004:	4bac      	ldr	r3, [pc, #688]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	055b      	lsls	r3, r3, #21
 800300c:	4013      	ands	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003012:	231f      	movs	r3, #31
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301a:	4ba8      	ldr	r3, [pc, #672]	; (80032bc <HAL_RCC_OscConfig+0x630>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4013      	ands	r3, r2
 8003024:	d11a      	bne.n	800305c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003026:	4ba5      	ldr	r3, [pc, #660]	; (80032bc <HAL_RCC_OscConfig+0x630>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4ba4      	ldr	r3, [pc, #656]	; (80032bc <HAL_RCC_OscConfig+0x630>)
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	0049      	lsls	r1, r1, #1
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003034:	f7fe fbfe 	bl	8001834 <HAL_GetTick>
 8003038:	0003      	movs	r3, r0
 800303a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fe fbf9 	bl	8001834 <HAL_GetTick>
 8003042:	0002      	movs	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e177      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003050:	4b9a      	ldr	r3, [pc, #616]	; (80032bc <HAL_RCC_OscConfig+0x630>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4013      	ands	r3, r2
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x3e6>
 8003064:	4b94      	ldr	r3, [pc, #592]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003066:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003068:	4b93      	ldr	r3, [pc, #588]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800306a:	2101      	movs	r1, #1
 800306c:	430a      	orrs	r2, r1
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003070:	e01c      	b.n	80030ac <HAL_RCC_OscConfig+0x420>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x408>
 800307a:	4b8f      	ldr	r3, [pc, #572]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800307c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800307e:	4b8e      	ldr	r3, [pc, #568]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003080:	2104      	movs	r1, #4
 8003082:	430a      	orrs	r2, r1
 8003084:	65da      	str	r2, [r3, #92]	; 0x5c
 8003086:	4b8c      	ldr	r3, [pc, #560]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800308a:	4b8b      	ldr	r3, [pc, #556]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800308c:	2101      	movs	r1, #1
 800308e:	430a      	orrs	r2, r1
 8003090:	65da      	str	r2, [r3, #92]	; 0x5c
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0x420>
 8003094:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003096:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003098:	4b87      	ldr	r3, [pc, #540]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800309a:	2101      	movs	r1, #1
 800309c:	438a      	bics	r2, r1
 800309e:	65da      	str	r2, [r3, #92]	; 0x5c
 80030a0:	4b85      	ldr	r3, [pc, #532]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80030a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030a4:	4b84      	ldr	r3, [pc, #528]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80030a6:	2104      	movs	r1, #4
 80030a8:	438a      	bics	r2, r1
 80030aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d014      	beq.n	80030de <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe fbbe 	bl	8001834 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030bc:	e009      	b.n	80030d2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe fbb9 	bl	8001834 <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	4a7d      	ldr	r2, [pc, #500]	; (80032c0 <HAL_RCC_OscConfig+0x634>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e136      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d2:	4b79      	ldr	r3, [pc, #484]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	2202      	movs	r2, #2
 80030d8:	4013      	ands	r3, r2
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x432>
 80030dc:	e013      	b.n	8003106 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fe fba9 	bl	8001834 <HAL_GetTick>
 80030e2:	0003      	movs	r3, r0
 80030e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e6:	e009      	b.n	80030fc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7fe fba4 	bl	8001834 <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	4a73      	ldr	r2, [pc, #460]	; (80032c0 <HAL_RCC_OscConfig+0x634>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e121      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fc:	4b6e      	ldr	r3, [pc, #440]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	2202      	movs	r2, #2
 8003102:	4013      	ands	r3, r2
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003106:	231f      	movs	r3, #31
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b69      	ldr	r3, [pc, #420]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003114:	4b68      	ldr	r3, [pc, #416]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003116:	496b      	ldr	r1, [pc, #428]	; (80032c4 <HAL_RCC_OscConfig+0x638>)
 8003118:	400a      	ands	r2, r1
 800311a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2220      	movs	r2, #32
 8003122:	4013      	ands	r3, r2
 8003124:	d039      	beq.n	800319a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01b      	beq.n	8003166 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800312e:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	03c9      	lsls	r1, r1, #15
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fb7a 	bl	8001834 <HAL_GetTick>
 8003140:	0003      	movs	r3, r0
 8003142:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003146:	f7fe fb75 	bl	8001834 <HAL_GetTick>
 800314a:	0002      	movs	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0f3      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003158:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	041b      	lsls	r3, r3, #16
 8003160:	4013      	ands	r3, r2
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x4ba>
 8003164:	e019      	b.n	800319a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003166:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800316c:	4956      	ldr	r1, [pc, #344]	; (80032c8 <HAL_RCC_OscConfig+0x63c>)
 800316e:	400a      	ands	r2, r1
 8003170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003172:	f7fe fb5f 	bl	8001834 <HAL_GetTick>
 8003176:	0003      	movs	r3, r0
 8003178:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800317c:	f7fe fb5a 	bl	8001834 <HAL_GetTick>
 8003180:	0002      	movs	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0d8      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800318e:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	4013      	ands	r3, r2
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d100      	bne.n	80031a4 <HAL_RCC_OscConfig+0x518>
 80031a2:	e0cc      	b.n	800333e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a4:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2238      	movs	r2, #56	; 0x38
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d100      	bne.n	80031b2 <HAL_RCC_OscConfig+0x526>
 80031b0:	e07b      	b.n	80032aa <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d156      	bne.n	8003268 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80031c0:	4942      	ldr	r1, [pc, #264]	; (80032cc <HAL_RCC_OscConfig+0x640>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe fb35 	bl	8001834 <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe fb30 	bl	8001834 <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0ae      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e2:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	049b      	lsls	r3, r3, #18
 80031ea:	4013      	ands	r3, r2
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x644>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	431a      	orrs	r2, r3
 800321c:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800321e:	430a      	orrs	r2, r1
 8003220:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003222:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0449      	lsls	r1, r1, #17
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003230:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	0549      	lsls	r1, r1, #21
 800323a:	430a      	orrs	r2, r1
 800323c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fe faf9 	bl	8001834 <HAL_GetTick>
 8003242:	0003      	movs	r3, r0
 8003244:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe faf4 	bl	8001834 <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e072      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	049b      	lsls	r3, r3, #18
 8003262:	4013      	ands	r3, r2
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x5bc>
 8003266:	e06a      	b.n	800333e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800326e:	4917      	ldr	r1, [pc, #92]	; (80032cc <HAL_RCC_OscConfig+0x640>)
 8003270:	400a      	ands	r2, r1
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe fade 	bl	8001834 <HAL_GetTick>
 8003278:	0003      	movs	r3, r0
 800327a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe fad9 	bl	8001834 <HAL_GetTick>
 8003282:	0002      	movs	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e057      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	049b      	lsls	r3, r3, #18
 8003298:	4013      	ands	r3, r2
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCC_OscConfig+0x62c>)
 80032a2:	490c      	ldr	r1, [pc, #48]	; (80032d4 <HAL_RCC_OscConfig+0x648>)
 80032a4:	400a      	ands	r2, r1
 80032a6:	60da      	str	r2, [r3, #12]
 80032a8:	e049      	b.n	800333e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d112      	bne.n	80032d8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e044      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
 80032c0:	00001388 	.word	0x00001388
 80032c4:	efffffff 	.word	0xefffffff
 80032c8:	ffbfffff 	.word	0xffbfffff
 80032cc:	feffffff 	.word	0xfeffffff
 80032d0:	11c1808c 	.word	0x11c1808c
 80032d4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x6bc>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2203      	movs	r2, #3
 80032e2:	401a      	ands	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d126      	bne.n	800333a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2270      	movs	r2, #112	; 0x70
 80032f0:	401a      	ands	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d11f      	bne.n	800333a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	23fe      	movs	r3, #254	; 0xfe
 80032fe:	01db      	lsls	r3, r3, #7
 8003300:	401a      	ands	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d116      	bne.n	800333a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	23f8      	movs	r3, #248	; 0xf8
 8003310:	039b      	lsls	r3, r3, #14
 8003312:	401a      	ands	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d10e      	bne.n	800333a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	23e0      	movs	r3, #224	; 0xe0
 8003320:	051b      	lsls	r3, r3, #20
 8003322:	401a      	ands	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	0f5b      	lsrs	r3, r3, #29
 8003330:	075a      	lsls	r2, r3, #29
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b008      	add	sp, #32
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0e9      	b.n	8003534 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2207      	movs	r2, #7
 8003366:	4013      	ands	r3, r2
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d91e      	bls.n	80033ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2207      	movs	r2, #7
 8003374:	4393      	bics	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	4b70      	ldr	r3, [pc, #448]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003380:	f7fe fa58 	bl	8001834 <HAL_GetTick>
 8003384:	0003      	movs	r3, r0
 8003386:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003388:	e009      	b.n	800339e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338a:	f7fe fa53 	bl	8001834 <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	4a6a      	ldr	r2, [pc, #424]	; (8003540 <HAL_RCC_ClockConfig+0x1f4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0ca      	b.n	8003534 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800339e:	4b67      	ldr	r3, [pc, #412]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2207      	movs	r2, #7
 80033a4:	4013      	ands	r3, r2
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1ee      	bne.n	800338a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2202      	movs	r2, #2
 80033b2:	4013      	ands	r3, r2
 80033b4:	d015      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2204      	movs	r2, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	d006      	beq.n	80033ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033c0:	4b60      	ldr	r3, [pc, #384]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	4b5f      	ldr	r3, [pc, #380]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 80033c6:	21e0      	movs	r1, #224	; 0xe0
 80033c8:	01c9      	lsls	r1, r1, #7
 80033ca:	430a      	orrs	r2, r1
 80033cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ce:	4b5d      	ldr	r3, [pc, #372]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	4a5d      	ldr	r2, [pc, #372]	; (8003548 <HAL_RCC_ClockConfig+0x1fc>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4013      	ands	r3, r2
 80033ea:	d057      	beq.n	800349c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	4013      	ands	r3, r2
 80033fe:	d12b      	bne.n	8003458 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e097      	b.n	8003534 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d107      	bne.n	800341c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340c:	4b4d      	ldr	r3, [pc, #308]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	049b      	lsls	r3, r3, #18
 8003414:	4013      	ands	r3, r2
 8003416:	d11f      	bne.n	8003458 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e08b      	b.n	8003534 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003424:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4013      	ands	r3, r2
 800342e:	d113      	bne.n	8003458 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e07f      	b.n	8003534 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d106      	bne.n	800344a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343c:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	2202      	movs	r2, #2
 8003442:	4013      	ands	r3, r2
 8003444:	d108      	bne.n	8003458 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e074      	b.n	8003534 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	2202      	movs	r2, #2
 8003450:	4013      	ands	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e06d      	b.n	8003534 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003458:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2207      	movs	r2, #7
 800345e:	4393      	bics	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346c:	f7fe f9e2 	bl	8001834 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003474:	e009      	b.n	800348a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003476:	f7fe f9dd 	bl	8001834 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <HAL_RCC_ClockConfig+0x1f4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e054      	b.n	8003534 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2238      	movs	r2, #56	; 0x38
 8003490:	401a      	ands	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	429a      	cmp	r2, r3
 800349a:	d1ec      	bne.n	8003476 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2207      	movs	r2, #7
 80034a2:	4013      	ands	r3, r2
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d21e      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2207      	movs	r2, #7
 80034b0:	4393      	bics	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034bc:	f7fe f9ba 	bl	8001834 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034c4:	e009      	b.n	80034da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c6:	f7fe f9b5 	bl	8001834 <HAL_GetTick>
 80034ca:	0002      	movs	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <HAL_RCC_ClockConfig+0x1f4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e02c      	b.n	8003534 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2207      	movs	r2, #7
 80034e0:	4013      	ands	r3, r2
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1ee      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2204      	movs	r2, #4
 80034ee:	4013      	ands	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034f2:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <HAL_RCC_ClockConfig+0x200>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 8003502:	430a      	orrs	r2, r1
 8003504:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003506:	f000 f829 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800350a:	0001      	movs	r1, r0
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	220f      	movs	r2, #15
 8003514:	401a      	ands	r2, r3
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <HAL_RCC_ClockConfig+0x204>)
 8003518:	0092      	lsls	r2, r2, #2
 800351a:	58d3      	ldr	r3, [r2, r3]
 800351c:	221f      	movs	r2, #31
 800351e:	4013      	ands	r3, r2
 8003520:	000a      	movs	r2, r1
 8003522:	40da      	lsrs	r2, r3
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x208>)
 8003526:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_ClockConfig+0x20c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0018      	movs	r0, r3
 800352e:	f7fe f925 	bl	800177c <HAL_InitTick>
 8003532:	0003      	movs	r3, r0
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40022000 	.word	0x40022000
 8003540:	00001388 	.word	0x00001388
 8003544:	40021000 	.word	0x40021000
 8003548:	fffff0ff 	.word	0xfffff0ff
 800354c:	ffff8fff 	.word	0xffff8fff
 8003550:	08004e3c 	.word	0x08004e3c
 8003554:	20000000 	.word	0x20000000
 8003558:	20000004 	.word	0x20000004

0800355c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003562:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2238      	movs	r2, #56	; 0x38
 8003568:	4013      	ands	r3, r2
 800356a:	d10f      	bne.n	800358c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800356c:	4b39      	ldr	r3, [pc, #228]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0adb      	lsrs	r3, r3, #11
 8003572:	2207      	movs	r2, #7
 8003574:	4013      	ands	r3, r2
 8003576:	2201      	movs	r2, #1
 8003578:	409a      	lsls	r2, r3
 800357a:	0013      	movs	r3, r2
 800357c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800357e:	6839      	ldr	r1, [r7, #0]
 8003580:	4835      	ldr	r0, [pc, #212]	; (8003658 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003582:	f7fc fdbf 	bl	8000104 <__udivsi3>
 8003586:	0003      	movs	r3, r0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e05d      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2238      	movs	r2, #56	; 0x38
 8003592:	4013      	ands	r3, r2
 8003594:	2b08      	cmp	r3, #8
 8003596:	d102      	bne.n	800359e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003598:	4b30      	ldr	r3, [pc, #192]	; (800365c <HAL_RCC_GetSysClockFreq+0x100>)
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	e054      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800359e:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2238      	movs	r2, #56	; 0x38
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d138      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035aa:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2203      	movs	r2, #3
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035b4:	4b27      	ldr	r3, [pc, #156]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	2207      	movs	r2, #7
 80035bc:	4013      	ands	r3, r2
 80035be:	3301      	adds	r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d10d      	bne.n	80035e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4824      	ldr	r0, [pc, #144]	; (800365c <HAL_RCC_GetSysClockFreq+0x100>)
 80035cc:	f7fc fd9a 	bl	8000104 <__udivsi3>
 80035d0:	0003      	movs	r3, r0
 80035d2:	0019      	movs	r1, r3
 80035d4:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	227f      	movs	r2, #127	; 0x7f
 80035dc:	4013      	ands	r3, r2
 80035de:	434b      	muls	r3, r1
 80035e0:	617b      	str	r3, [r7, #20]
        break;
 80035e2:	e00d      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	481c      	ldr	r0, [pc, #112]	; (8003658 <HAL_RCC_GetSysClockFreq+0xfc>)
 80035e8:	f7fc fd8c 	bl	8000104 <__udivsi3>
 80035ec:	0003      	movs	r3, r0
 80035ee:	0019      	movs	r1, r3
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	227f      	movs	r2, #127	; 0x7f
 80035f8:	4013      	ands	r3, r2
 80035fa:	434b      	muls	r3, r1
 80035fc:	617b      	str	r3, [r7, #20]
        break;
 80035fe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	0f5b      	lsrs	r3, r3, #29
 8003606:	2207      	movs	r2, #7
 8003608:	4013      	ands	r3, r2
 800360a:	3301      	adds	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	6978      	ldr	r0, [r7, #20]
 8003612:	f7fc fd77 	bl	8000104 <__udivsi3>
 8003616:	0003      	movs	r3, r0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	e015      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2238      	movs	r2, #56	; 0x38
 8003622:	4013      	ands	r3, r2
 8003624:	2b20      	cmp	r3, #32
 8003626:	d103      	bne.n	8003630 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e00b      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003630:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2238      	movs	r2, #56	; 0x38
 8003636:	4013      	ands	r3, r2
 8003638:	2b18      	cmp	r3, #24
 800363a:	d103      	bne.n	8003644 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800363c:	23fa      	movs	r3, #250	; 0xfa
 800363e:	01db      	lsls	r3, r3, #7
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e001      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003648:	693b      	ldr	r3, [r7, #16]
}
 800364a:	0018      	movs	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	b006      	add	sp, #24
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	40021000 	.word	0x40021000
 8003658:	00f42400 	.word	0x00f42400
 800365c:	007a1200 	.word	0x007a1200

08003660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003664:	4b02      	ldr	r3, [pc, #8]	; (8003670 <HAL_RCC_GetHCLKFreq+0x10>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20000000 	.word	0x20000000

08003674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003674:	b5b0      	push	{r4, r5, r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003678:	f7ff fff2 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 800367c:	0004      	movs	r4, r0
 800367e:	f7ff faf9 	bl	8002c74 <LL_RCC_GetAPB1Prescaler>
 8003682:	0003      	movs	r3, r0
 8003684:	0b1a      	lsrs	r2, r3, #12
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003688:	0092      	lsls	r2, r2, #2
 800368a:	58d3      	ldr	r3, [r2, r3]
 800368c:	221f      	movs	r2, #31
 800368e:	4013      	ands	r3, r2
 8003690:	40dc      	lsrs	r4, r3
 8003692:	0023      	movs	r3, r4
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	bdb0      	pop	{r4, r5, r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	08004e7c 	.word	0x08004e7c

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80036a8:	2313      	movs	r3, #19
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b0:	2312      	movs	r3, #18
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	029b      	lsls	r3, r3, #10
 80036c0:	4013      	ands	r3, r2
 80036c2:	d100      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80036c4:	e0ad      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	2011      	movs	r0, #17
 80036c8:	183b      	adds	r3, r7, r0
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ce:	4b47      	ldr	r3, [pc, #284]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	055b      	lsls	r3, r3, #21
 80036d6:	4013      	ands	r3, r2
 80036d8:	d110      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4b44      	ldr	r3, [pc, #272]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036de:	4b43      	ldr	r3, [pc, #268]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	0549      	lsls	r1, r1, #21
 80036e4:	430a      	orrs	r2, r1
 80036e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80036e8:	4b40      	ldr	r3, [pc, #256]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	055b      	lsls	r3, r3, #21
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f6:	183b      	adds	r3, r7, r0
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036fc:	4b3c      	ldr	r3, [pc, #240]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	0049      	lsls	r1, r1, #1
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800370a:	f7fe f893 	bl	8001834 <HAL_GetTick>
 800370e:	0003      	movs	r3, r0
 8003710:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003712:	e00b      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fe f88e 	bl	8001834 <HAL_GetTick>
 8003718:	0002      	movs	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d904      	bls.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003722:	2313      	movs	r3, #19
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2203      	movs	r2, #3
 8003728:	701a      	strb	r2, [r3, #0]
        break;
 800372a:	e005      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800372c:	4b30      	ldr	r3, [pc, #192]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4013      	ands	r3, r2
 8003736:	d0ed      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003738:	2313      	movs	r3, #19
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d15e      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003744:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003746:	23c0      	movs	r3, #192	; 0xc0
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4013      	ands	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d019      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	429a      	cmp	r2, r3
 800375c:	d014      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003764:	4013      	ands	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800376a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800376c:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	0249      	lsls	r1, r1, #9
 8003772:	430a      	orrs	r2, r1
 8003774:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003778:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800377c:	491e      	ldr	r1, [pc, #120]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800377e:	400a      	ands	r2, r1
 8003780:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2201      	movs	r2, #1
 800378c:	4013      	ands	r3, r2
 800378e:	d016      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe f850 	bl	8001834 <HAL_GetTick>
 8003794:	0003      	movs	r3, r0
 8003796:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003798:	e00c      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fe f84b 	bl	8001834 <HAL_GetTick>
 800379e:	0002      	movs	r2, r0
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d904      	bls.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80037aa:	2313      	movs	r3, #19
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	2203      	movs	r2, #3
 80037b0:	701a      	strb	r2, [r3, #0]
            break;
 80037b2:	e004      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	2202      	movs	r2, #2
 80037ba:	4013      	ands	r3, r2
 80037bc:	d0ed      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80037be:	2313      	movs	r3, #19
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037d8:	430a      	orrs	r2, r1
 80037da:	65da      	str	r2, [r3, #92]	; 0x5c
 80037dc:	e016      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037de:	2312      	movs	r3, #18
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	2213      	movs	r2, #19
 80037e4:	18ba      	adds	r2, r7, r2
 80037e6:	7812      	ldrb	r2, [r2, #0]
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e00f      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40007000 	.word	0x40007000
 80037f4:	fffffcff 	.word	0xfffffcff
 80037f8:	fffeffff 	.word	0xfffeffff
 80037fc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003800:	2312      	movs	r3, #18
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2213      	movs	r2, #19
 8003806:	18ba      	adds	r2, r7, r2
 8003808:	7812      	ldrb	r2, [r2, #0]
 800380a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800380c:	2311      	movs	r3, #17
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d105      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003816:	4bb6      	ldr	r3, [pc, #728]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800381a:	4bb5      	ldr	r3, [pc, #724]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800381c:	49b5      	ldr	r1, [pc, #724]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800381e:	400a      	ands	r2, r1
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	4013      	ands	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800382c:	4bb0      	ldr	r3, [pc, #704]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	2203      	movs	r2, #3
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	4bad      	ldr	r3, [pc, #692]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800383c:	430a      	orrs	r2, r1
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2202      	movs	r2, #2
 8003846:	4013      	ands	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800384a:	4ba9      	ldr	r3, [pc, #676]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	220c      	movs	r2, #12
 8003850:	4393      	bics	r3, r2
 8003852:	0019      	movs	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4ba5      	ldr	r3, [pc, #660]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800385a:	430a      	orrs	r2, r1
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2204      	movs	r2, #4
 8003864:	4013      	ands	r3, r2
 8003866:	d009      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003868:	4ba1      	ldr	r3, [pc, #644]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	2230      	movs	r2, #48	; 0x30
 800386e:	4393      	bics	r3, r2
 8003870:	0019      	movs	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	4b9e      	ldr	r3, [pc, #632]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003878:	430a      	orrs	r2, r1
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2210      	movs	r2, #16
 8003882:	4013      	ands	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003886:	4b9a      	ldr	r3, [pc, #616]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	4a9b      	ldr	r2, [pc, #620]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	4b96      	ldr	r3, [pc, #600]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003896:	430a      	orrs	r2, r1
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	015b      	lsls	r3, r3, #5
 80038a2:	4013      	ands	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80038a6:	4b92      	ldr	r3, [pc, #584]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	4a94      	ldr	r2, [pc, #592]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	4b8e      	ldr	r3, [pc, #568]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038b6:	430a      	orrs	r2, r1
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4013      	ands	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038c6:	4b8a      	ldr	r3, [pc, #552]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	4a8d      	ldr	r2, [pc, #564]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	0019      	movs	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038d4:	4b86      	ldr	r3, [pc, #536]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4013      	ands	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038e6:	4b82      	ldr	r3, [pc, #520]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	4a86      	ldr	r2, [pc, #536]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	0019      	movs	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	4b7e      	ldr	r3, [pc, #504]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038f6:	430a      	orrs	r2, r1
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2220      	movs	r2, #32
 8003900:	4013      	ands	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003904:	4b7a      	ldr	r3, [pc, #488]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	4a7f      	ldr	r2, [pc, #508]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	4b77      	ldr	r3, [pc, #476]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003914:	430a      	orrs	r2, r1
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2240      	movs	r2, #64	; 0x40
 800391e:	4013      	ands	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003922:	4b73      	ldr	r3, [pc, #460]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	4a79      	ldr	r2, [pc, #484]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	4b6f      	ldr	r3, [pc, #444]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003932:	430a      	orrs	r2, r1
 8003934:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	01db      	lsls	r3, r3, #7
 800393e:	4013      	ands	r3, r2
 8003940:	d015      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003942:	4b6b      	ldr	r3, [pc, #428]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	0899      	lsrs	r1, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394e:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003950:	430a      	orrs	r2, r1
 8003952:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	05db      	lsls	r3, r3, #23
 800395c:	429a      	cmp	r2, r3
 800395e:	d106      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003960:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	4b62      	ldr	r3, [pc, #392]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	0249      	lsls	r1, r1, #9
 800396a:	430a      	orrs	r2, r1
 800396c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	031b      	lsls	r3, r3, #12
 8003976:	4013      	ands	r3, r2
 8003978:	d009      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800397a:	4b5d      	ldr	r3, [pc, #372]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	2240      	movs	r2, #64	; 0x40
 8003980:	4393      	bics	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003988:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800398a:	430a      	orrs	r2, r1
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	039b      	lsls	r3, r3, #14
 8003996:	4013      	ands	r3, r2
 8003998:	d016      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800399a:	4b55      	ldr	r3, [pc, #340]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	4a5c      	ldr	r2, [pc, #368]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a8:	4b51      	ldr	r3, [pc, #324]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039aa:	430a      	orrs	r2, r1
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	03db      	lsls	r3, r3, #15
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d106      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80039ba:	4b4d      	ldr	r3, [pc, #308]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	0449      	lsls	r1, r1, #17
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	03db      	lsls	r3, r3, #15
 80039d0:	4013      	ands	r3, r2
 80039d2:	d016      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039d4:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	4a4e      	ldr	r2, [pc, #312]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80039da:	4013      	ands	r3, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e2:	4b43      	ldr	r3, [pc, #268]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039e4:	430a      	orrs	r2, r1
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	045b      	lsls	r3, r3, #17
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d106      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80039f4:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	0449      	lsls	r1, r1, #17
 80039fe:	430a      	orrs	r2, r1
 8003a00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d014      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a0e:	4b38      	ldr	r3, [pc, #224]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	2203      	movs	r2, #3
 8003a14:	4393      	bics	r3, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d106      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a2a:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	0249      	lsls	r1, r1, #9
 8003a34:	430a      	orrs	r2, r1
 8003a36:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	019b      	lsls	r3, r3, #6
 8003a40:	4013      	ands	r3, r2
 8003a42:	d014      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	220c      	movs	r2, #12
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a52:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a60:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	0249      	lsls	r1, r1, #9
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	045b      	lsls	r3, r3, #17
 8003a76:	4013      	ands	r3, r2
 8003a78:	d016      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	4a22      	ldr	r2, [pc, #136]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	0449      	lsls	r1, r1, #17
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	049b      	lsls	r3, r3, #18
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d016      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	4a10      	ldr	r2, [pc, #64]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	0019      	movs	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	0449      	lsls	r1, r1, #17
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003ae2:	2312      	movs	r3, #18
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	781b      	ldrb	r3, [r3, #0]
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b006      	add	sp, #24
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000
 8003af4:	efffffff 	.word	0xefffffff
 8003af8:	fffff3ff 	.word	0xfffff3ff
 8003afc:	fffffcff 	.word	0xfffffcff
 8003b00:	fff3ffff 	.word	0xfff3ffff
 8003b04:	ffcfffff 	.word	0xffcfffff
 8003b08:	ffffcfff 	.word	0xffffcfff
 8003b0c:	ffff3fff 	.word	0xffff3fff
 8003b10:	ffbfffff 	.word	0xffbfffff
 8003b14:	feffffff 	.word	0xfeffffff

08003b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e04a      	b.n	8003bc0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	223d      	movs	r2, #61	; 0x3d
 8003b2e:	5c9b      	ldrb	r3, [r3, r2]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	223c      	movs	r2, #60	; 0x3c
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fd f97f 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	223d      	movs	r2, #61	; 0x3d
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3304      	adds	r3, #4
 8003b56:	0019      	movs	r1, r3
 8003b58:	0010      	movs	r0, r2
 8003b5a:	f000 f90b 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2248      	movs	r2, #72	; 0x48
 8003b62:	2101      	movs	r1, #1
 8003b64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	223e      	movs	r2, #62	; 0x3e
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5499      	strb	r1, [r3, r2]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	223f      	movs	r2, #63	; 0x3f
 8003b72:	2101      	movs	r1, #1
 8003b74:	5499      	strb	r1, [r3, r2]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2240      	movs	r2, #64	; 0x40
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5499      	strb	r1, [r3, r2]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2241      	movs	r2, #65	; 0x41
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2242      	movs	r2, #66	; 0x42
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2243      	movs	r2, #67	; 0x43
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2244      	movs	r2, #68	; 0x44
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2245      	movs	r2, #69	; 0x45
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5499      	strb	r1, [r3, r2]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2246      	movs	r2, #70	; 0x46
 8003baa:	2101      	movs	r1, #1
 8003bac:	5499      	strb	r1, [r3, r2]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2247      	movs	r2, #71	; 0x47
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	223d      	movs	r2, #61	; 0x3d
 8003bba:	2101      	movs	r1, #1
 8003bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b002      	add	sp, #8
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd2:	230f      	movs	r3, #15
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	223c      	movs	r2, #60	; 0x3c
 8003bde:	5c9b      	ldrb	r3, [r3, r2]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_ConfigClockSource+0x20>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0bc      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x19a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	223c      	movs	r2, #60	; 0x3c
 8003bec:	2101      	movs	r1, #1
 8003bee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	223d      	movs	r2, #61	; 0x3d
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4a5a      	ldr	r2, [pc, #360]	; (8003d6c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4a59      	ldr	r2, [pc, #356]	; (8003d70 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	0192      	lsls	r2, r2, #6
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d040      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0xde>
 8003c24:	2280      	movs	r2, #128	; 0x80
 8003c26:	0192      	lsls	r2, r2, #6
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d900      	bls.n	8003c2e <HAL_TIM_ConfigClockSource+0x66>
 8003c2c:	e088      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	0152      	lsls	r2, r2, #5
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d100      	bne.n	8003c38 <HAL_TIM_ConfigClockSource+0x70>
 8003c36:	e088      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x182>
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	0152      	lsls	r2, r2, #5
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d900      	bls.n	8003c42 <HAL_TIM_ConfigClockSource+0x7a>
 8003c40:	e07e      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c42:	2b70      	cmp	r3, #112	; 0x70
 8003c44:	d018      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0xb0>
 8003c46:	d900      	bls.n	8003c4a <HAL_TIM_ConfigClockSource+0x82>
 8003c48:	e07a      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c4a:	2b60      	cmp	r3, #96	; 0x60
 8003c4c:	d04f      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x126>
 8003c4e:	d900      	bls.n	8003c52 <HAL_TIM_ConfigClockSource+0x8a>
 8003c50:	e076      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c52:	2b50      	cmp	r3, #80	; 0x50
 8003c54:	d03b      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x106>
 8003c56:	d900      	bls.n	8003c5a <HAL_TIM_ConfigClockSource+0x92>
 8003c58:	e072      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d057      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x146>
 8003c5e:	d900      	bls.n	8003c62 <HAL_TIM_ConfigClockSource+0x9a>
 8003c60:	e06e      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c62:	2b30      	cmp	r3, #48	; 0x30
 8003c64:	d063      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x166>
 8003c66:	d86b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d060      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x166>
 8003c6c:	d868      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d05d      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x166>
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d05b      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x166>
 8003c76:	e063      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f000 f97a 	bl	8003f80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2277      	movs	r2, #119	; 0x77
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
      break;
 8003ca4:	e052      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f000 f963 	bl	8003f80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2180      	movs	r1, #128	; 0x80
 8003cc6:	01c9      	lsls	r1, r1, #7
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
      break;
 8003ccc:	e03e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	001a      	movs	r2, r3
 8003cdc:	f000 f8d4 	bl	8003e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2150      	movs	r1, #80	; 0x50
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 f92e 	bl	8003f48 <TIM_ITRx_SetConfig>
      break;
 8003cec:	e02e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	f000 f8f2 	bl	8003ee4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2160      	movs	r1, #96	; 0x60
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 f91e 	bl	8003f48 <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e01e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	f000 f8b4 	bl	8003e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2140      	movs	r1, #64	; 0x40
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 f90e 	bl	8003f48 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e00e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	0019      	movs	r1, r3
 8003d38:	0010      	movs	r0, r2
 8003d3a:	f000 f905 	bl	8003f48 <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e005      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d40:	230f      	movs	r3, #15
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
      break;
 8003d48:	e000      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d4a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	223d      	movs	r2, #61	; 0x3d
 8003d50:	2101      	movs	r1, #1
 8003d52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	223c      	movs	r2, #60	; 0x3c
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5499      	strb	r1, [r3, r2]

  return status;
 8003d5c:	230f      	movs	r3, #15
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	781b      	ldrb	r3, [r3, #0]
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b004      	add	sp, #16
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	ffceff88 	.word	0xffceff88
 8003d70:	ffff00ff 	.word	0xffff00ff

08003d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <TIM_Base_SetConfig+0xf4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00c      	beq.n	8003da6 <TIM_Base_SetConfig+0x32>
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	05db      	lsls	r3, r3, #23
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d007      	beq.n	8003da6 <TIM_Base_SetConfig+0x32>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a34      	ldr	r2, [pc, #208]	; (8003e6c <TIM_Base_SetConfig+0xf8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_Base_SetConfig+0x32>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a33      	ldr	r2, [pc, #204]	; (8003e70 <TIM_Base_SetConfig+0xfc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2270      	movs	r2, #112	; 0x70
 8003daa:	4393      	bics	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a2b      	ldr	r2, [pc, #172]	; (8003e68 <TIM_Base_SetConfig+0xf4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d01c      	beq.n	8003dfa <TIM_Base_SetConfig+0x86>
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	05db      	lsls	r3, r3, #23
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d017      	beq.n	8003dfa <TIM_Base_SetConfig+0x86>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <TIM_Base_SetConfig+0xf8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <TIM_Base_SetConfig+0x86>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <TIM_Base_SetConfig+0xfc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00f      	beq.n	8003dfa <TIM_Base_SetConfig+0x86>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <TIM_Base_SetConfig+0x100>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0x86>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a24      	ldr	r2, [pc, #144]	; (8003e78 <TIM_Base_SetConfig+0x104>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0x86>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a23      	ldr	r2, [pc, #140]	; (8003e7c <TIM_Base_SetConfig+0x108>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0x86>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <TIM_Base_SetConfig+0x10c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <TIM_Base_SetConfig+0x110>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	4393      	bics	r3, r2
 8003e12:	001a      	movs	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <TIM_Base_SetConfig+0xf4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00b      	beq.n	8003e52 <TIM_Base_SetConfig+0xde>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <TIM_Base_SetConfig+0x104>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <TIM_Base_SetConfig+0xde>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <TIM_Base_SetConfig+0x108>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_Base_SetConfig+0xde>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a0c      	ldr	r2, [pc, #48]	; (8003e80 <TIM_Base_SetConfig+0x10c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d103      	bne.n	8003e5a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	615a      	str	r2, [r3, #20]
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b004      	add	sp, #16
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40002000 	.word	0x40002000
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800
 8003e84:	fffffcff 	.word	0xfffffcff

08003e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4393      	bics	r3, r2
 8003ea2:	001a      	movs	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	22f0      	movs	r2, #240	; 0xf0
 8003eb2:	4393      	bics	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	220a      	movs	r2, #10
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	621a      	str	r2, [r3, #32]
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b006      	add	sp, #24
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	4393      	bics	r3, r2
 8003ef8:	001a      	movs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	4a0d      	ldr	r2, [pc, #52]	; (8003f44 <TIM_TI2_ConfigInputStage+0x60>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	031b      	lsls	r3, r3, #12
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	22a0      	movs	r2, #160	; 0xa0
 8003f20:	4393      	bics	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b006      	add	sp, #24
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	ffff0fff 	.word	0xffff0fff

08003f48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <TIM_ITRx_SetConfig+0x34>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	2207      	movs	r2, #7
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	609a      	str	r2, [r3, #8]
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b004      	add	sp, #16
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	ffcfff8f 	.word	0xffcfff8f

08003f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <TIM_ETR_SetConfig+0x3c>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	021a      	lsls	r2, r3, #8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	609a      	str	r2, [r3, #8]
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b006      	add	sp, #24
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	ffff00ff 	.word	0xffff00ff

08003fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	223c      	movs	r2, #60	; 0x3c
 8003fce:	5c9b      	ldrb	r3, [r3, r2]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e05a      	b.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	223c      	movs	r2, #60	; 0x3c
 8003fdc:	2101      	movs	r1, #1
 8003fde:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	223d      	movs	r2, #61	; 0x3d
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a26      	ldr	r2, [pc, #152]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a25      	ldr	r2, [pc, #148]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2270      	movs	r2, #112	; 0x70
 8004018:	4393      	bics	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d014      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	05db      	lsls	r3, r3, #23
 8004040:	429a      	cmp	r2, r3
 8004042:	d00e      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10c      	bne.n	800407c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	4393      	bics	r3, r2
 8004068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4313      	orrs	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	223d      	movs	r2, #61	; 0x3d
 8004080:	2101      	movs	r1, #1
 8004082:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	223c      	movs	r2, #60	; 0x3c
 8004088:	2100      	movs	r1, #0
 800408a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	0018      	movs	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	b004      	add	sp, #16
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	40012c00 	.word	0x40012c00
 800409c:	ff0fffff 	.word	0xff0fffff
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40014000 	.word	0x40014000

080040ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e046      	b.n	800414c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2288      	movs	r2, #136	; 0x88
 80040c2:	589b      	ldr	r3, [r3, r2]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d107      	bne.n	80040d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2284      	movs	r2, #132	; 0x84
 80040cc:	2100      	movs	r1, #0
 80040ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7fc fee6 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2288      	movs	r2, #136	; 0x88
 80040dc:	2124      	movs	r1, #36	; 0x24
 80040de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2101      	movs	r1, #1
 80040ec:	438a      	bics	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 f830 	bl	8004158 <UART_SetConfig>
 80040f8:	0003      	movs	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e024      	b.n	800414c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 fb79 	bl	8004804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	490d      	ldr	r1, [pc, #52]	; (8004154 <HAL_UART_Init+0xa8>)
 800411e:	400a      	ands	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	212a      	movs	r1, #42	; 0x2a
 800412e:	438a      	bics	r2, r1
 8004130:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2101      	movs	r1, #1
 800413e:	430a      	orrs	r2, r1
 8004140:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 fc11 	bl	800496c <UART_CheckIdleState>
 800414a:	0003      	movs	r3, r0
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b002      	add	sp, #8
 8004152:	bd80      	pop	{r7, pc}
 8004154:	ffffb7ff 	.word	0xffffb7ff

08004158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004158:	b5b0      	push	{r4, r5, r7, lr}
 800415a:	b090      	sub	sp, #64	; 0x40
 800415c:	af00      	add	r7, sp, #0
 800415e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004160:	231a      	movs	r3, #26
 8004162:	2220      	movs	r2, #32
 8004164:	189b      	adds	r3, r3, r2
 8004166:	19db      	adds	r3, r3, r7
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	431a      	orrs	r2, r3
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	431a      	orrs	r2, r3
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	4313      	orrs	r3, r2
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4ac1      	ldr	r2, [pc, #772]	; (8004490 <UART_SetConfig+0x338>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004196:	430b      	orrs	r3, r1
 8004198:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4abc      	ldr	r2, [pc, #752]	; (8004494 <UART_SetConfig+0x33c>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	68d9      	ldr	r1, [r3, #12]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	0003      	movs	r3, r0
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4ab6      	ldr	r2, [pc, #728]	; (8004498 <UART_SetConfig+0x340>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d009      	beq.n	80041d8 <UART_SetConfig+0x80>
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4ab4      	ldr	r2, [pc, #720]	; (800449c <UART_SetConfig+0x344>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d4:	4313      	orrs	r3, r2
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4ab0      	ldr	r2, [pc, #704]	; (80044a0 <UART_SetConfig+0x348>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ea:	430b      	orrs	r3, r1
 80041ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	220f      	movs	r2, #15
 80041f6:	4393      	bics	r3, r2
 80041f8:	0018      	movs	r0, r3
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	0003      	movs	r3, r0
 8004204:	430b      	orrs	r3, r1
 8004206:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4aa5      	ldr	r2, [pc, #660]	; (80044a4 <UART_SetConfig+0x34c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d131      	bne.n	8004276 <UART_SetConfig+0x11e>
 8004212:	4ba5      	ldr	r3, [pc, #660]	; (80044a8 <UART_SetConfig+0x350>)
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	2203      	movs	r2, #3
 8004218:	4013      	ands	r3, r2
 800421a:	2b03      	cmp	r3, #3
 800421c:	d01d      	beq.n	800425a <UART_SetConfig+0x102>
 800421e:	d823      	bhi.n	8004268 <UART_SetConfig+0x110>
 8004220:	2b02      	cmp	r3, #2
 8004222:	d00c      	beq.n	800423e <UART_SetConfig+0xe6>
 8004224:	d820      	bhi.n	8004268 <UART_SetConfig+0x110>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <UART_SetConfig+0xd8>
 800422a:	2b01      	cmp	r3, #1
 800422c:	d00e      	beq.n	800424c <UART_SetConfig+0xf4>
 800422e:	e01b      	b.n	8004268 <UART_SetConfig+0x110>
 8004230:	231b      	movs	r3, #27
 8004232:	2220      	movs	r2, #32
 8004234:	189b      	adds	r3, r3, r2
 8004236:	19db      	adds	r3, r3, r7
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e154      	b.n	80044e8 <UART_SetConfig+0x390>
 800423e:	231b      	movs	r3, #27
 8004240:	2220      	movs	r2, #32
 8004242:	189b      	adds	r3, r3, r2
 8004244:	19db      	adds	r3, r3, r7
 8004246:	2202      	movs	r2, #2
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	e14d      	b.n	80044e8 <UART_SetConfig+0x390>
 800424c:	231b      	movs	r3, #27
 800424e:	2220      	movs	r2, #32
 8004250:	189b      	adds	r3, r3, r2
 8004252:	19db      	adds	r3, r3, r7
 8004254:	2204      	movs	r2, #4
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	e146      	b.n	80044e8 <UART_SetConfig+0x390>
 800425a:	231b      	movs	r3, #27
 800425c:	2220      	movs	r2, #32
 800425e:	189b      	adds	r3, r3, r2
 8004260:	19db      	adds	r3, r3, r7
 8004262:	2208      	movs	r2, #8
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e13f      	b.n	80044e8 <UART_SetConfig+0x390>
 8004268:	231b      	movs	r3, #27
 800426a:	2220      	movs	r2, #32
 800426c:	189b      	adds	r3, r3, r2
 800426e:	19db      	adds	r3, r3, r7
 8004270:	2210      	movs	r2, #16
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e138      	b.n	80044e8 <UART_SetConfig+0x390>
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a8c      	ldr	r2, [pc, #560]	; (80044ac <UART_SetConfig+0x354>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d131      	bne.n	80042e4 <UART_SetConfig+0x18c>
 8004280:	4b89      	ldr	r3, [pc, #548]	; (80044a8 <UART_SetConfig+0x350>)
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	220c      	movs	r2, #12
 8004286:	4013      	ands	r3, r2
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d01d      	beq.n	80042c8 <UART_SetConfig+0x170>
 800428c:	d823      	bhi.n	80042d6 <UART_SetConfig+0x17e>
 800428e:	2b08      	cmp	r3, #8
 8004290:	d00c      	beq.n	80042ac <UART_SetConfig+0x154>
 8004292:	d820      	bhi.n	80042d6 <UART_SetConfig+0x17e>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <UART_SetConfig+0x146>
 8004298:	2b04      	cmp	r3, #4
 800429a:	d00e      	beq.n	80042ba <UART_SetConfig+0x162>
 800429c:	e01b      	b.n	80042d6 <UART_SetConfig+0x17e>
 800429e:	231b      	movs	r3, #27
 80042a0:	2220      	movs	r2, #32
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	19db      	adds	r3, r3, r7
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e11d      	b.n	80044e8 <UART_SetConfig+0x390>
 80042ac:	231b      	movs	r3, #27
 80042ae:	2220      	movs	r2, #32
 80042b0:	189b      	adds	r3, r3, r2
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e116      	b.n	80044e8 <UART_SetConfig+0x390>
 80042ba:	231b      	movs	r3, #27
 80042bc:	2220      	movs	r2, #32
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	19db      	adds	r3, r3, r7
 80042c2:	2204      	movs	r2, #4
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e10f      	b.n	80044e8 <UART_SetConfig+0x390>
 80042c8:	231b      	movs	r3, #27
 80042ca:	2220      	movs	r2, #32
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	19db      	adds	r3, r3, r7
 80042d0:	2208      	movs	r2, #8
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	e108      	b.n	80044e8 <UART_SetConfig+0x390>
 80042d6:	231b      	movs	r3, #27
 80042d8:	2220      	movs	r2, #32
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	19db      	adds	r3, r3, r7
 80042de:	2210      	movs	r2, #16
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	e101      	b.n	80044e8 <UART_SetConfig+0x390>
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a71      	ldr	r2, [pc, #452]	; (80044b0 <UART_SetConfig+0x358>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d131      	bne.n	8004352 <UART_SetConfig+0x1fa>
 80042ee:	4b6e      	ldr	r3, [pc, #440]	; (80044a8 <UART_SetConfig+0x350>)
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	2230      	movs	r2, #48	; 0x30
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b30      	cmp	r3, #48	; 0x30
 80042f8:	d01d      	beq.n	8004336 <UART_SetConfig+0x1de>
 80042fa:	d823      	bhi.n	8004344 <UART_SetConfig+0x1ec>
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d00c      	beq.n	800431a <UART_SetConfig+0x1c2>
 8004300:	d820      	bhi.n	8004344 <UART_SetConfig+0x1ec>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <UART_SetConfig+0x1b4>
 8004306:	2b10      	cmp	r3, #16
 8004308:	d00e      	beq.n	8004328 <UART_SetConfig+0x1d0>
 800430a:	e01b      	b.n	8004344 <UART_SetConfig+0x1ec>
 800430c:	231b      	movs	r3, #27
 800430e:	2220      	movs	r2, #32
 8004310:	189b      	adds	r3, r3, r2
 8004312:	19db      	adds	r3, r3, r7
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e0e6      	b.n	80044e8 <UART_SetConfig+0x390>
 800431a:	231b      	movs	r3, #27
 800431c:	2220      	movs	r2, #32
 800431e:	189b      	adds	r3, r3, r2
 8004320:	19db      	adds	r3, r3, r7
 8004322:	2202      	movs	r2, #2
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e0df      	b.n	80044e8 <UART_SetConfig+0x390>
 8004328:	231b      	movs	r3, #27
 800432a:	2220      	movs	r2, #32
 800432c:	189b      	adds	r3, r3, r2
 800432e:	19db      	adds	r3, r3, r7
 8004330:	2204      	movs	r2, #4
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e0d8      	b.n	80044e8 <UART_SetConfig+0x390>
 8004336:	231b      	movs	r3, #27
 8004338:	2220      	movs	r2, #32
 800433a:	189b      	adds	r3, r3, r2
 800433c:	19db      	adds	r3, r3, r7
 800433e:	2208      	movs	r2, #8
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e0d1      	b.n	80044e8 <UART_SetConfig+0x390>
 8004344:	231b      	movs	r3, #27
 8004346:	2220      	movs	r2, #32
 8004348:	189b      	adds	r3, r3, r2
 800434a:	19db      	adds	r3, r3, r7
 800434c:	2210      	movs	r2, #16
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	e0ca      	b.n	80044e8 <UART_SetConfig+0x390>
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a57      	ldr	r2, [pc, #348]	; (80044b4 <UART_SetConfig+0x35c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d106      	bne.n	800436a <UART_SetConfig+0x212>
 800435c:	231b      	movs	r3, #27
 800435e:	2220      	movs	r2, #32
 8004360:	189b      	adds	r3, r3, r2
 8004362:	19db      	adds	r3, r3, r7
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e0be      	b.n	80044e8 <UART_SetConfig+0x390>
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <UART_SetConfig+0x360>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d106      	bne.n	8004382 <UART_SetConfig+0x22a>
 8004374:	231b      	movs	r3, #27
 8004376:	2220      	movs	r2, #32
 8004378:	189b      	adds	r3, r3, r2
 800437a:	19db      	adds	r3, r3, r7
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e0b2      	b.n	80044e8 <UART_SetConfig+0x390>
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a4d      	ldr	r2, [pc, #308]	; (80044bc <UART_SetConfig+0x364>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d106      	bne.n	800439a <UART_SetConfig+0x242>
 800438c:	231b      	movs	r3, #27
 800438e:	2220      	movs	r2, #32
 8004390:	189b      	adds	r3, r3, r2
 8004392:	19db      	adds	r3, r3, r7
 8004394:	2200      	movs	r2, #0
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	e0a6      	b.n	80044e8 <UART_SetConfig+0x390>
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a3e      	ldr	r2, [pc, #248]	; (8004498 <UART_SetConfig+0x340>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d13e      	bne.n	8004422 <UART_SetConfig+0x2ca>
 80043a4:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <UART_SetConfig+0x350>)
 80043a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043a8:	23c0      	movs	r3, #192	; 0xc0
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4013      	ands	r3, r2
 80043ae:	22c0      	movs	r2, #192	; 0xc0
 80043b0:	0112      	lsls	r2, r2, #4
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d027      	beq.n	8004406 <UART_SetConfig+0x2ae>
 80043b6:	22c0      	movs	r2, #192	; 0xc0
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d82a      	bhi.n	8004414 <UART_SetConfig+0x2bc>
 80043be:	2280      	movs	r2, #128	; 0x80
 80043c0:	0112      	lsls	r2, r2, #4
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d011      	beq.n	80043ea <UART_SetConfig+0x292>
 80043c6:	2280      	movs	r2, #128	; 0x80
 80043c8:	0112      	lsls	r2, r2, #4
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d822      	bhi.n	8004414 <UART_SetConfig+0x2bc>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <UART_SetConfig+0x284>
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	00d2      	lsls	r2, r2, #3
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <UART_SetConfig+0x2a0>
 80043da:	e01b      	b.n	8004414 <UART_SetConfig+0x2bc>
 80043dc:	231b      	movs	r3, #27
 80043de:	2220      	movs	r2, #32
 80043e0:	189b      	adds	r3, r3, r2
 80043e2:	19db      	adds	r3, r3, r7
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	e07e      	b.n	80044e8 <UART_SetConfig+0x390>
 80043ea:	231b      	movs	r3, #27
 80043ec:	2220      	movs	r2, #32
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	19db      	adds	r3, r3, r7
 80043f2:	2202      	movs	r2, #2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e077      	b.n	80044e8 <UART_SetConfig+0x390>
 80043f8:	231b      	movs	r3, #27
 80043fa:	2220      	movs	r2, #32
 80043fc:	189b      	adds	r3, r3, r2
 80043fe:	19db      	adds	r3, r3, r7
 8004400:	2204      	movs	r2, #4
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	e070      	b.n	80044e8 <UART_SetConfig+0x390>
 8004406:	231b      	movs	r3, #27
 8004408:	2220      	movs	r2, #32
 800440a:	189b      	adds	r3, r3, r2
 800440c:	19db      	adds	r3, r3, r7
 800440e:	2208      	movs	r2, #8
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e069      	b.n	80044e8 <UART_SetConfig+0x390>
 8004414:	231b      	movs	r3, #27
 8004416:	2220      	movs	r2, #32
 8004418:	189b      	adds	r3, r3, r2
 800441a:	19db      	adds	r3, r3, r7
 800441c:	2210      	movs	r2, #16
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e062      	b.n	80044e8 <UART_SetConfig+0x390>
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1d      	ldr	r2, [pc, #116]	; (800449c <UART_SetConfig+0x344>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d157      	bne.n	80044dc <UART_SetConfig+0x384>
 800442c:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <UART_SetConfig+0x350>)
 800442e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004430:	23c0      	movs	r3, #192	; 0xc0
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4013      	ands	r3, r2
 8004436:	22c0      	movs	r2, #192	; 0xc0
 8004438:	0092      	lsls	r2, r2, #2
 800443a:	4293      	cmp	r3, r2
 800443c:	d040      	beq.n	80044c0 <UART_SetConfig+0x368>
 800443e:	22c0      	movs	r2, #192	; 0xc0
 8004440:	0092      	lsls	r2, r2, #2
 8004442:	4293      	cmp	r3, r2
 8004444:	d843      	bhi.n	80044ce <UART_SetConfig+0x376>
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	0092      	lsls	r2, r2, #2
 800444a:	4293      	cmp	r3, r2
 800444c:	d011      	beq.n	8004472 <UART_SetConfig+0x31a>
 800444e:	2280      	movs	r2, #128	; 0x80
 8004450:	0092      	lsls	r2, r2, #2
 8004452:	4293      	cmp	r3, r2
 8004454:	d83b      	bhi.n	80044ce <UART_SetConfig+0x376>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <UART_SetConfig+0x30c>
 800445a:	2280      	movs	r2, #128	; 0x80
 800445c:	0052      	lsls	r2, r2, #1
 800445e:	4293      	cmp	r3, r2
 8004460:	d00e      	beq.n	8004480 <UART_SetConfig+0x328>
 8004462:	e034      	b.n	80044ce <UART_SetConfig+0x376>
 8004464:	231b      	movs	r3, #27
 8004466:	2220      	movs	r2, #32
 8004468:	189b      	adds	r3, r3, r2
 800446a:	19db      	adds	r3, r3, r7
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e03a      	b.n	80044e8 <UART_SetConfig+0x390>
 8004472:	231b      	movs	r3, #27
 8004474:	2220      	movs	r2, #32
 8004476:	189b      	adds	r3, r3, r2
 8004478:	19db      	adds	r3, r3, r7
 800447a:	2202      	movs	r2, #2
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e033      	b.n	80044e8 <UART_SetConfig+0x390>
 8004480:	231b      	movs	r3, #27
 8004482:	2220      	movs	r2, #32
 8004484:	189b      	adds	r3, r3, r2
 8004486:	19db      	adds	r3, r3, r7
 8004488:	2204      	movs	r2, #4
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e02c      	b.n	80044e8 <UART_SetConfig+0x390>
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	cfff69f3 	.word	0xcfff69f3
 8004494:	ffffcfff 	.word	0xffffcfff
 8004498:	40008000 	.word	0x40008000
 800449c:	40008400 	.word	0x40008400
 80044a0:	11fff4ff 	.word	0x11fff4ff
 80044a4:	40013800 	.word	0x40013800
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40004400 	.word	0x40004400
 80044b0:	40004800 	.word	0x40004800
 80044b4:	40004c00 	.word	0x40004c00
 80044b8:	40005000 	.word	0x40005000
 80044bc:	40013c00 	.word	0x40013c00
 80044c0:	231b      	movs	r3, #27
 80044c2:	2220      	movs	r2, #32
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	19db      	adds	r3, r3, r7
 80044c8:	2208      	movs	r2, #8
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e00c      	b.n	80044e8 <UART_SetConfig+0x390>
 80044ce:	231b      	movs	r3, #27
 80044d0:	2220      	movs	r2, #32
 80044d2:	189b      	adds	r3, r3, r2
 80044d4:	19db      	adds	r3, r3, r7
 80044d6:	2210      	movs	r2, #16
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e005      	b.n	80044e8 <UART_SetConfig+0x390>
 80044dc:	231b      	movs	r3, #27
 80044de:	2220      	movs	r2, #32
 80044e0:	189b      	adds	r3, r3, r2
 80044e2:	19db      	adds	r3, r3, r7
 80044e4:	2210      	movs	r2, #16
 80044e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4ac1      	ldr	r2, [pc, #772]	; (80047f4 <UART_SetConfig+0x69c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d005      	beq.n	80044fe <UART_SetConfig+0x3a6>
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4ac0      	ldr	r2, [pc, #768]	; (80047f8 <UART_SetConfig+0x6a0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d000      	beq.n	80044fe <UART_SetConfig+0x3a6>
 80044fc:	e093      	b.n	8004626 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044fe:	231b      	movs	r3, #27
 8004500:	2220      	movs	r2, #32
 8004502:	189b      	adds	r3, r3, r2
 8004504:	19db      	adds	r3, r3, r7
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d015      	beq.n	8004538 <UART_SetConfig+0x3e0>
 800450c:	dc18      	bgt.n	8004540 <UART_SetConfig+0x3e8>
 800450e:	2b04      	cmp	r3, #4
 8004510:	d00d      	beq.n	800452e <UART_SetConfig+0x3d6>
 8004512:	dc15      	bgt.n	8004540 <UART_SetConfig+0x3e8>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <UART_SetConfig+0x3c6>
 8004518:	2b02      	cmp	r3, #2
 800451a:	d005      	beq.n	8004528 <UART_SetConfig+0x3d0>
 800451c:	e010      	b.n	8004540 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800451e:	f7ff f8a9 	bl	8003674 <HAL_RCC_GetPCLK1Freq>
 8004522:	0003      	movs	r3, r0
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004526:	e014      	b.n	8004552 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004528:	4bb4      	ldr	r3, [pc, #720]	; (80047fc <UART_SetConfig+0x6a4>)
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800452c:	e011      	b.n	8004552 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452e:	f7ff f815 	bl	800355c <HAL_RCC_GetSysClockFreq>
 8004532:	0003      	movs	r3, r0
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004536:	e00c      	b.n	8004552 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800453e:	e008      	b.n	8004552 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004544:	231a      	movs	r3, #26
 8004546:	2220      	movs	r2, #32
 8004548:	189b      	adds	r3, r3, r2
 800454a:	19db      	adds	r3, r3, r7
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
        break;
 8004550:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004554:	2b00      	cmp	r3, #0
 8004556:	d100      	bne.n	800455a <UART_SetConfig+0x402>
 8004558:	e135      	b.n	80047c6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800455e:	4ba8      	ldr	r3, [pc, #672]	; (8004800 <UART_SetConfig+0x6a8>)
 8004560:	0052      	lsls	r2, r2, #1
 8004562:	5ad3      	ldrh	r3, [r2, r3]
 8004564:	0019      	movs	r1, r3
 8004566:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004568:	f7fb fdcc 	bl	8000104 <__udivsi3>
 800456c:	0003      	movs	r3, r0
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	0013      	movs	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	189b      	adds	r3, r3, r2
 800457a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457c:	429a      	cmp	r2, r3
 800457e:	d305      	bcc.n	800458c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004588:	429a      	cmp	r2, r3
 800458a:	d906      	bls.n	800459a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800458c:	231a      	movs	r3, #26
 800458e:	2220      	movs	r2, #32
 8004590:	189b      	adds	r3, r3, r2
 8004592:	19db      	adds	r3, r3, r7
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	e044      	b.n	8004624 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045a6:	4b96      	ldr	r3, [pc, #600]	; (8004800 <UART_SetConfig+0x6a8>)
 80045a8:	0052      	lsls	r2, r2, #1
 80045aa:	5ad3      	ldrh	r3, [r2, r3]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	69b8      	ldr	r0, [r7, #24]
 80045b8:	69f9      	ldr	r1, [r7, #28]
 80045ba:	f7fb ff19 	bl	80003f0 <__aeabi_uldivmod>
 80045be:	0002      	movs	r2, r0
 80045c0:	000b      	movs	r3, r1
 80045c2:	0e11      	lsrs	r1, r2, #24
 80045c4:	021d      	lsls	r5, r3, #8
 80045c6:	430d      	orrs	r5, r1
 80045c8:	0214      	lsls	r4, r2, #8
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68b8      	ldr	r0, [r7, #8]
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	1900      	adds	r0, r0, r4
 80045dc:	4169      	adcs	r1, r5
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	2300      	movs	r3, #0
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f7fb ff00 	bl	80003f0 <__aeabi_uldivmod>
 80045f0:	0002      	movs	r2, r0
 80045f2:	000b      	movs	r3, r1
 80045f4:	0013      	movs	r3, r2
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	23c0      	movs	r3, #192	; 0xc0
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	429a      	cmp	r2, r3
 8004600:	d309      	bcc.n	8004616 <UART_SetConfig+0x4be>
 8004602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	035b      	lsls	r3, r3, #13
 8004608:	429a      	cmp	r2, r3
 800460a:	d204      	bcs.n	8004616 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004612:	60da      	str	r2, [r3, #12]
 8004614:	e006      	b.n	8004624 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004616:	231a      	movs	r3, #26
 8004618:	2220      	movs	r2, #32
 800461a:	189b      	adds	r3, r3, r2
 800461c:	19db      	adds	r3, r3, r7
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004622:	e0d0      	b.n	80047c6 <UART_SetConfig+0x66e>
 8004624:	e0cf      	b.n	80047c6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	429a      	cmp	r2, r3
 8004630:	d000      	beq.n	8004634 <UART_SetConfig+0x4dc>
 8004632:	e070      	b.n	8004716 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004634:	231b      	movs	r3, #27
 8004636:	2220      	movs	r2, #32
 8004638:	189b      	adds	r3, r3, r2
 800463a:	19db      	adds	r3, r3, r7
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b08      	cmp	r3, #8
 8004640:	d015      	beq.n	800466e <UART_SetConfig+0x516>
 8004642:	dc18      	bgt.n	8004676 <UART_SetConfig+0x51e>
 8004644:	2b04      	cmp	r3, #4
 8004646:	d00d      	beq.n	8004664 <UART_SetConfig+0x50c>
 8004648:	dc15      	bgt.n	8004676 <UART_SetConfig+0x51e>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <UART_SetConfig+0x4fc>
 800464e:	2b02      	cmp	r3, #2
 8004650:	d005      	beq.n	800465e <UART_SetConfig+0x506>
 8004652:	e010      	b.n	8004676 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004654:	f7ff f80e 	bl	8003674 <HAL_RCC_GetPCLK1Freq>
 8004658:	0003      	movs	r3, r0
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800465c:	e014      	b.n	8004688 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800465e:	4b67      	ldr	r3, [pc, #412]	; (80047fc <UART_SetConfig+0x6a4>)
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004662:	e011      	b.n	8004688 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004664:	f7fe ff7a 	bl	800355c <HAL_RCC_GetSysClockFreq>
 8004668:	0003      	movs	r3, r0
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800466c:	e00c      	b.n	8004688 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004674:	e008      	b.n	8004688 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800467a:	231a      	movs	r3, #26
 800467c:	2220      	movs	r2, #32
 800467e:	189b      	adds	r3, r3, r2
 8004680:	19db      	adds	r3, r3, r7
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
        break;
 8004686:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	2b00      	cmp	r3, #0
 800468c:	d100      	bne.n	8004690 <UART_SetConfig+0x538>
 800468e:	e09a      	b.n	80047c6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004694:	4b5a      	ldr	r3, [pc, #360]	; (8004800 <UART_SetConfig+0x6a8>)
 8004696:	0052      	lsls	r2, r2, #1
 8004698:	5ad3      	ldrh	r3, [r2, r3]
 800469a:	0019      	movs	r1, r3
 800469c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800469e:	f7fb fd31 	bl	8000104 <__udivsi3>
 80046a2:	0003      	movs	r3, r0
 80046a4:	005a      	lsls	r2, r3, #1
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	18d2      	adds	r2, r2, r3
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	0019      	movs	r1, r3
 80046b4:	0010      	movs	r0, r2
 80046b6:	f7fb fd25 	bl	8000104 <__udivsi3>
 80046ba:	0003      	movs	r3, r0
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2b0f      	cmp	r3, #15
 80046c2:	d921      	bls.n	8004708 <UART_SetConfig+0x5b0>
 80046c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	025b      	lsls	r3, r3, #9
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d21c      	bcs.n	8004708 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	200e      	movs	r0, #14
 80046d4:	2420      	movs	r4, #32
 80046d6:	1903      	adds	r3, r0, r4
 80046d8:	19db      	adds	r3, r3, r7
 80046da:	210f      	movs	r1, #15
 80046dc:	438a      	bics	r2, r1
 80046de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2207      	movs	r2, #7
 80046e8:	4013      	ands	r3, r2
 80046ea:	b299      	uxth	r1, r3
 80046ec:	1903      	adds	r3, r0, r4
 80046ee:	19db      	adds	r3, r3, r7
 80046f0:	1902      	adds	r2, r0, r4
 80046f2:	19d2      	adds	r2, r2, r7
 80046f4:	8812      	ldrh	r2, [r2, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	1902      	adds	r2, r0, r4
 8004700:	19d2      	adds	r2, r2, r7
 8004702:	8812      	ldrh	r2, [r2, #0]
 8004704:	60da      	str	r2, [r3, #12]
 8004706:	e05e      	b.n	80047c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004708:	231a      	movs	r3, #26
 800470a:	2220      	movs	r2, #32
 800470c:	189b      	adds	r3, r3, r2
 800470e:	19db      	adds	r3, r3, r7
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e057      	b.n	80047c6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004716:	231b      	movs	r3, #27
 8004718:	2220      	movs	r2, #32
 800471a:	189b      	adds	r3, r3, r2
 800471c:	19db      	adds	r3, r3, r7
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d015      	beq.n	8004750 <UART_SetConfig+0x5f8>
 8004724:	dc18      	bgt.n	8004758 <UART_SetConfig+0x600>
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00d      	beq.n	8004746 <UART_SetConfig+0x5ee>
 800472a:	dc15      	bgt.n	8004758 <UART_SetConfig+0x600>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <UART_SetConfig+0x5de>
 8004730:	2b02      	cmp	r3, #2
 8004732:	d005      	beq.n	8004740 <UART_SetConfig+0x5e8>
 8004734:	e010      	b.n	8004758 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004736:	f7fe ff9d 	bl	8003674 <HAL_RCC_GetPCLK1Freq>
 800473a:	0003      	movs	r3, r0
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800473e:	e014      	b.n	800476a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004740:	4b2e      	ldr	r3, [pc, #184]	; (80047fc <UART_SetConfig+0x6a4>)
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004744:	e011      	b.n	800476a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004746:	f7fe ff09 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800474a:	0003      	movs	r3, r0
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800474e:	e00c      	b.n	800476a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004756:	e008      	b.n	800476a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800475c:	231a      	movs	r3, #26
 800475e:	2220      	movs	r2, #32
 8004760:	189b      	adds	r3, r3, r2
 8004762:	19db      	adds	r3, r3, r7
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
        break;
 8004768:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02a      	beq.n	80047c6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <UART_SetConfig+0x6a8>)
 8004776:	0052      	lsls	r2, r2, #1
 8004778:	5ad3      	ldrh	r3, [r2, r3]
 800477a:	0019      	movs	r1, r3
 800477c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800477e:	f7fb fcc1 	bl	8000104 <__udivsi3>
 8004782:	0003      	movs	r3, r0
 8004784:	001a      	movs	r2, r3
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	18d2      	adds	r2, r2, r3
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	0019      	movs	r1, r3
 8004794:	0010      	movs	r0, r2
 8004796:	f7fb fcb5 	bl	8000104 <__udivsi3>
 800479a:	0003      	movs	r3, r0
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	2b0f      	cmp	r3, #15
 80047a2:	d90a      	bls.n	80047ba <UART_SetConfig+0x662>
 80047a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	025b      	lsls	r3, r3, #9
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d205      	bcs.n	80047ba <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	e005      	b.n	80047c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80047ba:	231a      	movs	r3, #26
 80047bc:	2220      	movs	r2, #32
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	19db      	adds	r3, r3, r7
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	226a      	movs	r2, #106	; 0x6a
 80047ca:	2101      	movs	r1, #1
 80047cc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2268      	movs	r2, #104	; 0x68
 80047d2:	2101      	movs	r1, #1
 80047d4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	2200      	movs	r2, #0
 80047da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	2200      	movs	r2, #0
 80047e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80047e2:	231a      	movs	r3, #26
 80047e4:	2220      	movs	r2, #32
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	19db      	adds	r3, r3, r7
 80047ea:	781b      	ldrb	r3, [r3, #0]
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b010      	add	sp, #64	; 0x40
 80047f2:	bdb0      	pop	{r4, r5, r7, pc}
 80047f4:	40008000 	.word	0x40008000
 80047f8:	40008400 	.word	0x40008400
 80047fc:	00f42400 	.word	0x00f42400
 8004800:	08004ec4 	.word	0x08004ec4

08004804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	2201      	movs	r2, #1
 8004812:	4013      	ands	r3, r2
 8004814:	d00b      	beq.n	800482e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a4a      	ldr	r2, [pc, #296]	; (8004948 <UART_AdvFeatureConfig+0x144>)
 800481e:	4013      	ands	r3, r2
 8004820:	0019      	movs	r1, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	2202      	movs	r2, #2
 8004834:	4013      	ands	r3, r2
 8004836:	d00b      	beq.n	8004850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4a43      	ldr	r2, [pc, #268]	; (800494c <UART_AdvFeatureConfig+0x148>)
 8004840:	4013      	ands	r3, r2
 8004842:	0019      	movs	r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	2204      	movs	r2, #4
 8004856:	4013      	ands	r3, r2
 8004858:	d00b      	beq.n	8004872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a3b      	ldr	r2, [pc, #236]	; (8004950 <UART_AdvFeatureConfig+0x14c>)
 8004862:	4013      	ands	r3, r2
 8004864:	0019      	movs	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	2208      	movs	r2, #8
 8004878:	4013      	ands	r3, r2
 800487a:	d00b      	beq.n	8004894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4a34      	ldr	r2, [pc, #208]	; (8004954 <UART_AdvFeatureConfig+0x150>)
 8004884:	4013      	ands	r3, r2
 8004886:	0019      	movs	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	2210      	movs	r2, #16
 800489a:	4013      	ands	r3, r2
 800489c:	d00b      	beq.n	80048b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <UART_AdvFeatureConfig+0x154>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	2220      	movs	r2, #32
 80048bc:	4013      	ands	r3, r2
 80048be:	d00b      	beq.n	80048d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4a25      	ldr	r2, [pc, #148]	; (800495c <UART_AdvFeatureConfig+0x158>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	0019      	movs	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	2240      	movs	r2, #64	; 0x40
 80048de:	4013      	ands	r3, r2
 80048e0:	d01d      	beq.n	800491e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4a1d      	ldr	r2, [pc, #116]	; (8004960 <UART_AdvFeatureConfig+0x15c>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	0019      	movs	r1, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	035b      	lsls	r3, r3, #13
 8004902:	429a      	cmp	r2, r3
 8004904:	d10b      	bne.n	800491e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a15      	ldr	r2, [pc, #84]	; (8004964 <UART_AdvFeatureConfig+0x160>)
 800490e:	4013      	ands	r3, r2
 8004910:	0019      	movs	r1, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	2280      	movs	r2, #128	; 0x80
 8004924:	4013      	ands	r3, r2
 8004926:	d00b      	beq.n	8004940 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4a0e      	ldr	r2, [pc, #56]	; (8004968 <UART_AdvFeatureConfig+0x164>)
 8004930:	4013      	ands	r3, r2
 8004932:	0019      	movs	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]
  }
}
 8004940:	46c0      	nop			; (mov r8, r8)
 8004942:	46bd      	mov	sp, r7
 8004944:	b002      	add	sp, #8
 8004946:	bd80      	pop	{r7, pc}
 8004948:	fffdffff 	.word	0xfffdffff
 800494c:	fffeffff 	.word	0xfffeffff
 8004950:	fffbffff 	.word	0xfffbffff
 8004954:	ffff7fff 	.word	0xffff7fff
 8004958:	ffffefff 	.word	0xffffefff
 800495c:	ffffdfff 	.word	0xffffdfff
 8004960:	ffefffff 	.word	0xffefffff
 8004964:	ff9fffff 	.word	0xff9fffff
 8004968:	fff7ffff 	.word	0xfff7ffff

0800496c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af02      	add	r7, sp, #8
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2290      	movs	r2, #144	; 0x90
 8004978:	2100      	movs	r1, #0
 800497a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800497c:	f7fc ff5a 	bl	8001834 <HAL_GetTick>
 8004980:	0003      	movs	r3, r0
 8004982:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2208      	movs	r2, #8
 800498c:	4013      	ands	r3, r2
 800498e:	2b08      	cmp	r3, #8
 8004990:	d10c      	bne.n	80049ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	0391      	lsls	r1, r2, #14
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <UART_CheckIdleState+0x98>)
 800499c:	9200      	str	r2, [sp, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	f000 f832 	bl	8004a08 <UART_WaitOnFlagUntilTimeout>
 80049a4:	1e03      	subs	r3, r0, #0
 80049a6:	d001      	beq.n	80049ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e026      	b.n	80049fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2204      	movs	r2, #4
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d10c      	bne.n	80049d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2280      	movs	r2, #128	; 0x80
 80049be:	03d1      	lsls	r1, r2, #15
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <UART_CheckIdleState+0x98>)
 80049c4:	9200      	str	r2, [sp, #0]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f000 f81e 	bl	8004a08 <UART_WaitOnFlagUntilTimeout>
 80049cc:	1e03      	subs	r3, r0, #0
 80049ce:	d001      	beq.n	80049d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e012      	b.n	80049fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2288      	movs	r2, #136	; 0x88
 80049d8:	2120      	movs	r1, #32
 80049da:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	228c      	movs	r2, #140	; 0x8c
 80049e0:	2120      	movs	r1, #32
 80049e2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2284      	movs	r2, #132	; 0x84
 80049f4:	2100      	movs	r1, #0
 80049f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b004      	add	sp, #16
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	01ffffff 	.word	0x01ffffff

08004a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b094      	sub	sp, #80	; 0x50
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	1dfb      	adds	r3, r7, #7
 8004a16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a18:	e0a7      	b.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	d100      	bne.n	8004a22 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004a20:	e0a3      	b.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fc ff07 	bl	8001834 <HAL_GetTick>
 8004a26:	0002      	movs	r2, r0
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d13f      	bne.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a38:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a40:	647b      	str	r3, [r7, #68]	; 0x44
 8004a42:	2301      	movs	r3, #1
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	f383 8810 	msr	PRIMASK, r3
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	494e      	ldr	r1, [pc, #312]	; (8004b94 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a5a:	400a      	ands	r2, r1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a60:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	f383 8810 	msr	PRIMASK, r3
}
 8004a68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	643b      	str	r3, [r7, #64]	; 0x40
 8004a74:	2301      	movs	r3, #1
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	f383 8810 	msr	PRIMASK, r3
}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	438a      	bics	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a96:	f383 8810 	msr	PRIMASK, r3
}
 8004a9a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2288      	movs	r2, #136	; 0x88
 8004aa0:	2120      	movs	r1, #32
 8004aa2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	228c      	movs	r2, #140	; 0x8c
 8004aa8:	2120      	movs	r1, #32
 8004aaa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2284      	movs	r2, #132	; 0x84
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e069      	b.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d052      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	401a      	ands	r2, r3
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d148      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2280      	movs	r2, #128	; 0x80
 8004ade:	0112      	lsls	r2, r2, #4
 8004ae0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ae8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aec:	2301      	movs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4924      	ldr	r1, [pc, #144]	; (8004b94 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	f383 8810 	msr	PRIMASK, r3
}
 8004b12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b14:	f3ef 8310 	mrs	r3, PRIMASK
 8004b18:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b1a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b1e:	2301      	movs	r3, #1
 8004b20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	f383 8810 	msr	PRIMASK, r3
}
 8004b28:	46c0      	nop			; (mov r8, r8)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2101      	movs	r1, #1
 8004b36:	438a      	bics	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
 8004b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2288      	movs	r2, #136	; 0x88
 8004b4a:	2120      	movs	r1, #32
 8004b4c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	228c      	movs	r2, #140	; 0x8c
 8004b52:	2120      	movs	r1, #32
 8004b54:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2290      	movs	r2, #144	; 0x90
 8004b5a:	2120      	movs	r1, #32
 8004b5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2284      	movs	r2, #132	; 0x84
 8004b62:	2100      	movs	r1, #0
 8004b64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e010      	b.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	425a      	negs	r2, r3
 8004b7a:	4153      	adcs	r3, r2
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	001a      	movs	r2, r3
 8004b80:	1dfb      	adds	r3, r7, #7
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d100      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x182>
 8004b88:	e747      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b014      	add	sp, #80	; 0x50
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	fffffe5f 	.word	0xfffffe5f

08004b98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2284      	movs	r2, #132	; 0x84
 8004ba4:	5c9b      	ldrb	r3, [r3, r2]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_UARTEx_DisableFifoMode+0x16>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e027      	b.n	8004bfe <HAL_UARTEx_DisableFifoMode+0x66>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2284      	movs	r2, #132	; 0x84
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2288      	movs	r2, #136	; 0x88
 8004bba:	2124      	movs	r1, #36	; 0x24
 8004bbc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	438a      	bics	r2, r1
 8004bd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a0b      	ldr	r2, [pc, #44]	; (8004c08 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2288      	movs	r2, #136	; 0x88
 8004bf0:	2120      	movs	r1, #32
 8004bf2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2284      	movs	r2, #132	; 0x84
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b004      	add	sp, #16
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	dfffffff 	.word	0xdfffffff

08004c0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2284      	movs	r2, #132	; 0x84
 8004c1a:	5c9b      	ldrb	r3, [r3, r2]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e02e      	b.n	8004c82 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2284      	movs	r2, #132	; 0x84
 8004c28:	2101      	movs	r1, #1
 8004c2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2288      	movs	r2, #136	; 0x88
 8004c30:	2124      	movs	r1, #36	; 0x24
 8004c32:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2101      	movs	r1, #1
 8004c48:	438a      	bics	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	08d9      	lsrs	r1, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 f854 	bl	8004d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2288      	movs	r2, #136	; 0x88
 8004c74:	2120      	movs	r1, #32
 8004c76:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2284      	movs	r2, #132	; 0x84
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	0018      	movs	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b004      	add	sp, #16
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2284      	movs	r2, #132	; 0x84
 8004c9a:	5c9b      	ldrb	r3, [r3, r2]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e02f      	b.n	8004d04 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2284      	movs	r2, #132	; 0x84
 8004ca8:	2101      	movs	r1, #1
 8004caa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2288      	movs	r2, #136	; 0x88
 8004cb0:	2124      	movs	r1, #36	; 0x24
 8004cb2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	438a      	bics	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 f813 	bl	8004d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2288      	movs	r2, #136	; 0x88
 8004cf6:	2120      	movs	r1, #32
 8004cf8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2284      	movs	r2, #132	; 0x84
 8004cfe:	2100      	movs	r1, #0
 8004d00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	0018      	movs	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b004      	add	sp, #16
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	f1ffffff 	.word	0xf1ffffff

08004d10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d108      	bne.n	8004d32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	226a      	movs	r2, #106	; 0x6a
 8004d24:	2101      	movs	r1, #1
 8004d26:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2268      	movs	r2, #104	; 0x68
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d30:	e043      	b.n	8004dba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d32:	260f      	movs	r6, #15
 8004d34:	19bb      	adds	r3, r7, r6
 8004d36:	2208      	movs	r2, #8
 8004d38:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d3a:	200e      	movs	r0, #14
 8004d3c:	183b      	adds	r3, r7, r0
 8004d3e:	2208      	movs	r2, #8
 8004d40:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	0e5b      	lsrs	r3, r3, #25
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	240d      	movs	r4, #13
 8004d4e:	193b      	adds	r3, r7, r4
 8004d50:	2107      	movs	r1, #7
 8004d52:	400a      	ands	r2, r1
 8004d54:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	0f5b      	lsrs	r3, r3, #29
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	250c      	movs	r5, #12
 8004d62:	197b      	adds	r3, r7, r5
 8004d64:	2107      	movs	r1, #7
 8004d66:	400a      	ands	r2, r1
 8004d68:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d6a:	183b      	adds	r3, r7, r0
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	197a      	adds	r2, r7, r5
 8004d70:	7812      	ldrb	r2, [r2, #0]
 8004d72:	4914      	ldr	r1, [pc, #80]	; (8004dc4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d74:	5c8a      	ldrb	r2, [r1, r2]
 8004d76:	435a      	muls	r2, r3
 8004d78:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d7a:	197b      	adds	r3, r7, r5
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004d80:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d82:	0019      	movs	r1, r3
 8004d84:	f7fb fa48 	bl	8000218 <__divsi3>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	b299      	uxth	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	226a      	movs	r2, #106	; 0x6a
 8004d90:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d92:	19bb      	adds	r3, r7, r6
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	193a      	adds	r2, r7, r4
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	490a      	ldr	r1, [pc, #40]	; (8004dc4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d9c:	5c8a      	ldrb	r2, [r1, r2]
 8004d9e:	435a      	muls	r2, r3
 8004da0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004da2:	193b      	adds	r3, r7, r4
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004da8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004daa:	0019      	movs	r1, r3
 8004dac:	f7fb fa34 	bl	8000218 <__divsi3>
 8004db0:	0003      	movs	r3, r0
 8004db2:	b299      	uxth	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2268      	movs	r2, #104	; 0x68
 8004db8:	5299      	strh	r1, [r3, r2]
}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b005      	add	sp, #20
 8004dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	08004edc 	.word	0x08004edc
 8004dc8:	08004ee4 	.word	0x08004ee4

08004dcc <__libc_init_array>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	2600      	movs	r6, #0
 8004dd0:	4d0c      	ldr	r5, [pc, #48]	; (8004e04 <__libc_init_array+0x38>)
 8004dd2:	4c0d      	ldr	r4, [pc, #52]	; (8004e08 <__libc_init_array+0x3c>)
 8004dd4:	1b64      	subs	r4, r4, r5
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	42a6      	cmp	r6, r4
 8004dda:	d109      	bne.n	8004df0 <__libc_init_array+0x24>
 8004ddc:	2600      	movs	r6, #0
 8004dde:	f000 f821 	bl	8004e24 <_init>
 8004de2:	4d0a      	ldr	r5, [pc, #40]	; (8004e0c <__libc_init_array+0x40>)
 8004de4:	4c0a      	ldr	r4, [pc, #40]	; (8004e10 <__libc_init_array+0x44>)
 8004de6:	1b64      	subs	r4, r4, r5
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	42a6      	cmp	r6, r4
 8004dec:	d105      	bne.n	8004dfa <__libc_init_array+0x2e>
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	00b3      	lsls	r3, r6, #2
 8004df2:	58eb      	ldr	r3, [r5, r3]
 8004df4:	4798      	blx	r3
 8004df6:	3601      	adds	r6, #1
 8004df8:	e7ee      	b.n	8004dd8 <__libc_init_array+0xc>
 8004dfa:	00b3      	lsls	r3, r6, #2
 8004dfc:	58eb      	ldr	r3, [r5, r3]
 8004dfe:	4798      	blx	r3
 8004e00:	3601      	adds	r6, #1
 8004e02:	e7f2      	b.n	8004dea <__libc_init_array+0x1e>
 8004e04:	08004ef4 	.word	0x08004ef4
 8004e08:	08004ef4 	.word	0x08004ef4
 8004e0c:	08004ef4 	.word	0x08004ef4
 8004e10:	08004ef8 	.word	0x08004ef8

08004e14 <memset>:
 8004e14:	0003      	movs	r3, r0
 8004e16:	1882      	adds	r2, r0, r2
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d100      	bne.n	8004e1e <memset+0xa>
 8004e1c:	4770      	bx	lr
 8004e1e:	7019      	strb	r1, [r3, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	e7f9      	b.n	8004e18 <memset+0x4>

08004e24 <_init>:
 8004e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2a:	bc08      	pop	{r3}
 8004e2c:	469e      	mov	lr, r3
 8004e2e:	4770      	bx	lr

08004e30 <_fini>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr
