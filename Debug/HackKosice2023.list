
HackKosice2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fcc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08005088  08005088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005324  08005324  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800532c  0800532c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08005340  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08005340  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184c2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000301b  00000000  00000000  000384f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003b518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0a5  00000000  00000000  0003dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019228  00000000  00000000  0005cb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c43be  00000000  00000000  00075d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a13b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  0013a18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005070 	.word	0x08005070

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005070 	.word	0x08005070

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8d8 	bl	8000604 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8d3 	bl	8000604 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzsi2>:
 80005c8:	211c      	movs	r1, #28
 80005ca:	2301      	movs	r3, #1
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	4298      	cmp	r0, r3
 80005d0:	d301      	bcc.n	80005d6 <__clzsi2+0xe>
 80005d2:	0c00      	lsrs	r0, r0, #16
 80005d4:	3910      	subs	r1, #16
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	4298      	cmp	r0, r3
 80005da:	d301      	bcc.n	80005e0 <__clzsi2+0x18>
 80005dc:	0a00      	lsrs	r0, r0, #8
 80005de:	3908      	subs	r1, #8
 80005e0:	091b      	lsrs	r3, r3, #4
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0x22>
 80005e6:	0900      	lsrs	r0, r0, #4
 80005e8:	3904      	subs	r1, #4
 80005ea:	a202      	add	r2, pc, #8	; (adr r2, 80005f4 <__clzsi2+0x2c>)
 80005ec:	5c10      	ldrb	r0, [r2, r0]
 80005ee:	1840      	adds	r0, r0, r1
 80005f0:	4770      	bx	lr
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	02020304 	.word	0x02020304
 80005f8:	01010101 	.word	0x01010101
	...

08000604 <__clzdi2>:
 8000604:	b510      	push	{r4, lr}
 8000606:	2900      	cmp	r1, #0
 8000608:	d103      	bne.n	8000612 <__clzdi2+0xe>
 800060a:	f7ff ffdd 	bl	80005c8 <__clzsi2>
 800060e:	3020      	adds	r0, #32
 8000610:	e002      	b.n	8000618 <__clzdi2+0x14>
 8000612:	0008      	movs	r0, r1
 8000614:	f7ff ffd8 	bl	80005c8 <__clzsi2>
 8000618:	bd10      	pop	{r4, pc}
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <make_colour>:
#include "datatypes.h"

Colour make_colour(uint16_t r, uint16_t g, uint16_t b) {
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	000c      	movs	r4, r1
 8000626:	0010      	movs	r0, r2
 8000628:	0019      	movs	r1, r3
 800062a:	250a      	movs	r5, #10
 800062c:	197b      	adds	r3, r7, r5
 800062e:	1c22      	adds	r2, r4, #0
 8000630:	801a      	strh	r2, [r3, #0]
 8000632:	2408      	movs	r4, #8
 8000634:	193b      	adds	r3, r7, r4
 8000636:	1c02      	adds	r2, r0, #0
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	1dbb      	adds	r3, r7, #6
 800063c:	1c0a      	adds	r2, r1, #0
 800063e:	801a      	strh	r2, [r3, #0]
	Colour mycol;
	mycol.Red = r;
 8000640:	2110      	movs	r1, #16
 8000642:	187b      	adds	r3, r7, r1
 8000644:	197a      	adds	r2, r7, r5
 8000646:	8812      	ldrh	r2, [r2, #0]
 8000648:	801a      	strh	r2, [r3, #0]
	mycol.Green = g;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	193a      	adds	r2, r7, r4
 800064e:	8812      	ldrh	r2, [r2, #0]
 8000650:	805a      	strh	r2, [r3, #2]
	mycol.Blue = b;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	1dba      	adds	r2, r7, #6
 8000656:	8812      	ldrh	r2, [r2, #0]
 8000658:	809a      	strh	r2, [r3, #4]

	return mycol;
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	187b      	adds	r3, r7, r1
 800065e:	0010      	movs	r0, r2
 8000660:	0019      	movs	r1, r3
 8000662:	2306      	movs	r3, #6
 8000664:	001a      	movs	r2, r3
 8000666:	f004 fcf1 	bl	800504c <memcpy>
}
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	46bd      	mov	sp, r7
 800066e:	b006      	add	sp, #24
 8000670:	bdb0      	pop	{r4, r5, r7, pc}

08000672 <enableLED>:

#include "led12a1.h"

#include "datatypes.h"

void enableLED(LED1202_Object_TypeDef *obj, uint8_t x, uint8_t y) {
 8000672:	b590      	push	{r4, r7, lr}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	0008      	movs	r0, r1
 800067c:	0011      	movs	r1, r2
 800067e:	1cfb      	adds	r3, r7, #3
 8000680:	1c02      	adds	r2, r0, #0
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	1cbb      	adds	r3, r7, #2
 8000686:	1c0a      	adds	r2, r1, #0
 8000688:	701a      	strb	r2, [r3, #0]
	/*
	 * Utility function to enable an LED.
	 */
	uint8_t dev = x;
 800068a:	230e      	movs	r3, #14
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	1cfa      	adds	r2, r7, #3
 8000690:	7812      	ldrb	r2, [r2, #0]
 8000692:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 3; i++) {
 8000694:	230f      	movs	r3, #15
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	e022      	b.n	80006e4 <enableLED+0x72>
		uint8_t channel = 3*(3-y) + i;
 800069e:	1cbb      	adds	r3, r7, #2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2203      	movs	r2, #3
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	1c1a      	adds	r2, r3, #0
 80006aa:	1c13      	adds	r3, r2, #0
 80006ac:	18db      	adds	r3, r3, r3
 80006ae:	189b      	adds	r3, r3, r2
 80006b0:	b2d9      	uxtb	r1, r3
 80006b2:	200d      	movs	r0, #13
 80006b4:	183b      	adds	r3, r7, r0
 80006b6:	240f      	movs	r4, #15
 80006b8:	193a      	adds	r2, r7, r4
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	188a      	adds	r2, r1, r2
 80006be:	701a      	strb	r2, [r3, #0]

		LED12A1_ChannelEnable(
			obj,
			(TypeDefChannel) (LED_CHANNEL_0 << channel),
 80006c0:	183b      	adds	r3, r7, r0
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2201      	movs	r2, #1
 80006c6:	409a      	lsls	r2, r3
 80006c8:	0013      	movs	r3, r2
		LED12A1_ChannelEnable(
 80006ca:	b299      	uxth	r1, r3
 80006cc:	230e      	movs	r3, #14
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 f8fe 	bl	80018d6 <LED12A1_ChannelEnable>
	for (uint8_t i = 0; i < 3; i++) {
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	3201      	adds	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d9d7      	bls.n	800069e <enableLED+0x2c>
			(TypedefEnumDevAddr)(LED_DEVICE1 + dev)
		);
	}

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b005      	add	sp, #20
 80006f6:	bd90      	pop	{r4, r7, pc}

080006f8 <setLED>:

void setLED(LED1202_Object_TypeDef *LED1202Obj, uint8_t x, uint8_t y, Colour col) {
 80006f8:	b082      	sub	sp, #8
 80006fa:	b5b0      	push	{r4, r5, r7, lr}
 80006fc:	b088      	sub	sp, #32
 80006fe:	af02      	add	r7, sp, #8
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	0008      	movs	r0, r1
 8000704:	0011      	movs	r1, r2
 8000706:	2204      	movs	r2, #4
 8000708:	2420      	movs	r4, #32
 800070a:	1912      	adds	r2, r2, r4
 800070c:	2508      	movs	r5, #8
 800070e:	46ac      	mov	ip, r5
 8000710:	44bc      	add	ip, r7
 8000712:	4462      	add	r2, ip
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	1cfb      	adds	r3, r7, #3
 8000718:	1c02      	adds	r2, r0, #0
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	1cbb      	adds	r3, r7, #2
 800071e:	1c0a      	adds	r2, r1, #0
 8000720:	701a      	strb	r2, [r3, #0]
	/*
	 * Utility function to set the colour of an LED.
	 */

	uint8_t dev = y;
 8000722:	2316      	movs	r3, #22
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	1cba      	adds	r2, r7, #2
 8000728:	7812      	ldrb	r2, [r2, #0]
 800072a:	701a      	strb	r2, [r3, #0]
	uint16_t colours[3] = {
		col.Red,
 800072c:	2304      	movs	r3, #4
 800072e:	191b      	adds	r3, r3, r4
 8000730:	2208      	movs	r2, #8
 8000732:	4694      	mov	ip, r2
 8000734:	44bc      	add	ip, r7
 8000736:	4463      	add	r3, ip
 8000738:	881a      	ldrh	r2, [r3, #0]
	uint16_t colours[3] = {
 800073a:	210c      	movs	r1, #12
 800073c:	187b      	adds	r3, r7, r1
 800073e:	801a      	strh	r2, [r3, #0]
		col.Green,
 8000740:	2304      	movs	r3, #4
 8000742:	191b      	adds	r3, r3, r4
 8000744:	2208      	movs	r2, #8
 8000746:	4694      	mov	ip, r2
 8000748:	44bc      	add	ip, r7
 800074a:	4463      	add	r3, ip
 800074c:	885a      	ldrh	r2, [r3, #2]
	uint16_t colours[3] = {
 800074e:	187b      	adds	r3, r7, r1
 8000750:	805a      	strh	r2, [r3, #2]
		col.Blue
 8000752:	2304      	movs	r3, #4
 8000754:	191b      	adds	r3, r3, r4
 8000756:	2208      	movs	r2, #8
 8000758:	4694      	mov	ip, r2
 800075a:	44bc      	add	ip, r7
 800075c:	4463      	add	r3, ip
 800075e:	889a      	ldrh	r2, [r3, #4]
	uint16_t colours[3] = {
 8000760:	187b      	adds	r3, r7, r1
 8000762:	809a      	strh	r2, [r3, #4]
	};

	for (uint8_t i=0; i<3; i++) {
 8000764:	2317      	movs	r3, #23
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e025      	b.n	80007ba <setLED+0xc2>
		uint8_t channel_col = 3*(3-x) + i;
 800076e:	1cfb      	adds	r3, r7, #3
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2203      	movs	r2, #3
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	1c1a      	adds	r2, r3, #0
 800077a:	1c13      	adds	r3, r2, #0
 800077c:	18db      	adds	r3, r3, r3
 800077e:	189b      	adds	r3, r3, r2
 8000780:	b2d9      	uxtb	r1, r3
 8000782:	2015      	movs	r0, #21
 8000784:	183b      	adds	r3, r7, r0
 8000786:	2417      	movs	r4, #23
 8000788:	193a      	adds	r2, r7, r4
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	188a      	adds	r2, r1, r2
 800078e:	701a      	strb	r2, [r3, #0]

		LED12A1_DigitalDimming(
			LED1202Obj,
			&colours[i],
 8000790:	193b      	adds	r3, r7, r4
 8000792:	781b      	ldrb	r3, [r3, #0]
		LED12A1_DigitalDimming(
 8000794:	220c      	movs	r2, #12
 8000796:	18ba      	adds	r2, r7, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	18d1      	adds	r1, r2, r3
 800079c:	183b      	adds	r3, r7, r0
 800079e:	781a      	ldrb	r2, [r3, #0]
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	2316      	movs	r3, #22
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	f001 f869 	bl	8001882 <LED12A1_DigitalDimming>
	for (uint8_t i=0; i<3; i++) {
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	3201      	adds	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	2317      	movs	r3, #23
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d9d4      	bls.n	800076e <setLED+0x76>
			channel_col,
			0, // Pattern num, but we don't know what this is yet
			(TypedefEnumDevAddr)(LED_DEVICE1 + dev)
		);
	}
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b006      	add	sp, #24
 80007cc:	bcb0      	pop	{r4, r5, r7}
 80007ce:	bc08      	pop	{r3}
 80007d0:	b002      	add	sp, #8
 80007d2:	4718      	bx	r3

080007d4 <disableAllLED>:

void disableAllLED(LED1202_Object_TypeDef* LED1202Obj, uint8_t NumOfDev) {
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	000a      	movs	r2, r1
 80007de:	1cfb      	adds	r3, r7, #3
 80007e0:	701a      	strb	r2, [r3, #0]
	for (uint8_t dev = 0;dev<NumOfDev;dev++)
 80007e2:	230f      	movs	r3, #15
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	e00d      	b.n	8000808 <disableAllLED+0x34>
		{
		  LED12A1_ChannelDisable( LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 80007ec:	240f      	movs	r4, #15
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	490b      	ldr	r1, [pc, #44]	; (8000820 <disableAllLED+0x4c>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 f894 	bl	8001924 <LED12A1_ChannelDisable>
	for (uint8_t dev = 0;dev<NumOfDev;dev++)
 80007fc:	0021      	movs	r1, r4
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	187b      	adds	r3, r7, r1
 8000804:	3201      	adds	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	230f      	movs	r3, #15
 800080a:	18fa      	adds	r2, r7, r3
 800080c:	1cfb      	adds	r3, r7, #3
 800080e:	7812      	ldrb	r2, [r2, #0]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d3ea      	bcc.n	80007ec <disableAllLED+0x18>
		}
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b005      	add	sp, #20
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	00000fff 	.word	0x00000fff

08000824 <setup>:
extern   LED1202_Object_TypeDef LED1202Obj;

#define LED_CURRENT 1
#define square(x) x*x

void setup() {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /*Wait Time assuring a properly steady state condition */
  HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	; 0x64
 800082c:	f001 f928 	bl	8001a80 <HAL_Delay>

  interface_mode = UART_MODE;	/*Set a known condition */
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <setup+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]

  /*Clear Buffer*/
  ClearBuffers();
 8000836:	f000 f947 	bl	8000ac8 <ClearBuffers>

  /*LED12A1 Initialization*/
  LED12A1_Init();
 800083a:	f000 fe5f 	bl	80014fc <LED12A1_Init>

  /*Scan for Number of available LED1202 ICs*/
  NumOfDev =  LED12A1_ScanAvailDevice( &LED1202Obj ,DevAddrArray);
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <setup+0x78>)
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <setup+0x7c>)
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 ffd7 	bl	80017f8 <LED12A1_ScanAvailDevice>
 800084a:	0003      	movs	r3, r0
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <setup+0x80>)
 8000850:	701a      	strb	r2, [r3, #0]

  /*Enable available LED1202 ICs*/
  for (uint8_t dev = 0;dev<NumOfDev;dev++)
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e012      	b.n	8000880 <setup+0x5c>
  {
	LED12A1_DeviceEnable(&LED1202Obj , (TypedefEnumDevAddr)(LED_DEVICE1 + dev));
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <setup+0x7c>)
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f000 ff3e 	bl	80016e4 <LED12A1_DeviceEnable>
	LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	490e      	ldr	r1, [pc, #56]	; (80008a8 <setup+0x84>)
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <setup+0x7c>)
 8000870:	0018      	movs	r0, r3
 8000872:	f001 f857 	bl	8001924 <LED12A1_ChannelDisable>
  for (uint8_t dev = 0;dev<NumOfDev;dev++)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	3201      	adds	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <setup+0x80>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	1dfa      	adds	r2, r7, #7
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3e6      	bcc.n	800085a <setup+0x36>
  }
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	200000b4 	.word	0x200000b4
 800089c:	20000028 	.word	0x20000028
 80008a0:	2000023c 	.word	0x2000023c
 80008a4:	20000032 	.word	0x20000032
 80008a8:	00000fff 	.word	0x00000fff

080008ac <mainLoop>:

void mainLoop() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	task2();
 80008b0:	f000 f804 	bl	80008bc <task2>
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <task2>:

		HAL_Delay(200); // set the delay
	}
}

void task2() {
 80008bc:	b5b0      	push	{r4, r5, r7, lr}
 80008be:	b0a6      	sub	sp, #152	; 0x98
 80008c0:	af02      	add	r7, sp, #8

	// initialise LEDs as all red
	disableAllLED( &LED1202Obj, NumOfDev );
 80008c2:	4b7e      	ldr	r3, [pc, #504]	; (8000abc <task2+0x200>)
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	4b7e      	ldr	r3, [pc, #504]	; (8000ac0 <task2+0x204>)
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff ff82 	bl	80007d4 <disableAllLED>
	const int letters_buffer[27] =  {0, 0, 0, 0, 7, 9, 7, 1, 1, 1, 0, 6, 9, 4, 2, 9, 6, 0, 9, 9, 7, 1, 1, 1, 0, 0, 0};
 80008d0:	231c      	movs	r3, #28
 80008d2:	18fa      	adds	r2, r7, r3
 80008d4:	4b7b      	ldr	r3, [pc, #492]	; (8000ac4 <task2+0x208>)
 80008d6:	0010      	movs	r0, r2
 80008d8:	0019      	movs	r1, r3
 80008da:	236c      	movs	r3, #108	; 0x6c
 80008dc:	001a      	movs	r2, r3
 80008de:	f004 fbb5 	bl	800504c <memcpy>
//	const bool device3_buffer[27] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0};
//	const bool device2_buffer[27] = {0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
//	const bool device1_buffer[27] = {0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
//	const bool device0_buffer[27] = {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0};

	bool enabled_flag = false;
 80008e2:	238f      	movs	r3, #143	; 0x8f
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]

	const Colour bright_white = make_colour(50, 50, 50);
 80008ea:	2314      	movs	r3, #20
 80008ec:	18f8      	adds	r0, r7, r3
 80008ee:	2332      	movs	r3, #50	; 0x32
 80008f0:	2232      	movs	r2, #50	; 0x32
 80008f2:	2132      	movs	r1, #50	; 0x32
 80008f4:	f7ff fe92 	bl	800061c <make_colour>
//	const Colour black = make_colour(0, 0, 0);

	while (1) {
		uint8_t t = 3;
 80008f8:	238e      	movs	r3, #142	; 0x8e
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2203      	movs	r2, #3
 80008fe:	701a      	strb	r2, [r3, #0]
		while (t < 27) {
 8000900:	e0d5      	b.n	8000aae <task2+0x1f2>
			for (uint8_t x = 0; x < 4; ++x) {
 8000902:	238d      	movs	r3, #141	; 0x8d
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
 800090a:	e0b6      	b.n	8000a7a <task2+0x1be>
				for (uint8_t y = 0; y < 4; ++y) {
 800090c:	238c      	movs	r3, #140	; 0x8c
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e0a5      	b.n	8000a62 <task2+0x1a6>
					if (!enabled_flag) {
 8000916:	238f      	movs	r3, #143	; 0x8f
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2201      	movs	r2, #1
 800091e:	4053      	eors	r3, r2
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d009      	beq.n	800093a <task2+0x7e>
						enableLED(&LED1202Obj, x, y);
 8000926:	238c      	movs	r3, #140	; 0x8c
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	238d      	movs	r3, #141	; 0x8d
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	7819      	ldrb	r1, [r3, #0]
 8000932:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <task2+0x204>)
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fe9c 	bl	8000672 <enableLED>
//						LED12A1_ChannelEnable( &LED1202Obj, (TypeDefChannel) (LED_CHANNEL_0<<(3*x)), (TypedefEnumDevAddr)(LED_DEVICE1 + y));
//						LED12A1_ChannelEnable( &LED1202Obj, (TypeDefChannel) (LED_CHANNEL_0<<(3*x+1)), (TypedefEnumDevAddr)(LED_DEVICE1 + y));
//						LED12A1_ChannelEnable( &LED1202Obj, (TypeDefChannel) (LED_CHANNEL_0<<(3*x+2)), (TypedefEnumDevAddr)(LED_DEVICE1 + y));
					}
					if ((letters_buffer[t - y] >> x) & 1) {
 800093a:	238e      	movs	r3, #142	; 0x8e
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	218c      	movs	r1, #140	; 0x8c
 8000942:	187b      	adds	r3, r7, r1
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	1ad2      	subs	r2, r2, r3
 8000948:	231c      	movs	r3, #28
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	58d2      	ldr	r2, [r2, r3]
 8000950:	208d      	movs	r0, #141	; 0x8d
 8000952:	183b      	adds	r3, r7, r0
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	411a      	asrs	r2, r3
 8000958:	0013      	movs	r3, r2
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	d00f      	beq.n	8000980 <task2+0xc4>
						setLED(&LED1202Obj, x, y, bright_white);
 8000960:	2314      	movs	r3, #20
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	187a      	adds	r2, r7, r1
 8000966:	7815      	ldrb	r5, [r2, #0]
 8000968:	183a      	adds	r2, r7, r0
 800096a:	7814      	ldrb	r4, [r2, #0]
 800096c:	4854      	ldr	r0, [pc, #336]	; (8000ac0 <task2+0x204>)
 800096e:	466a      	mov	r2, sp
 8000970:	8899      	ldrh	r1, [r3, #4]
 8000972:	8011      	strh	r1, [r2, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	002a      	movs	r2, r5
 8000978:	0021      	movs	r1, r4
 800097a:	f7ff febd 	bl	80006f8 <setLED>
 800097e:	e06a      	b.n	8000a56 <task2+0x19a>
					}
					else {
						Colour myCol;
						uint8_t t_off = (t - y) % 24;
 8000980:	238e      	movs	r3, #142	; 0x8e
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	238c      	movs	r3, #140	; 0x8c
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	2118      	movs	r1, #24
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fd27 	bl	80003e4 <__aeabi_idivmod>
 8000996:	000b      	movs	r3, r1
 8000998:	001a      	movs	r2, r3
 800099a:	208b      	movs	r0, #139	; 0x8b
 800099c:	183b      	adds	r3, r7, r0
 800099e:	701a      	strb	r2, [r3, #0]
						if (t_off < 8) {
 80009a0:	183b      	adds	r3, r7, r0
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b07      	cmp	r3, #7
 80009a6:	d80e      	bhi.n	80009c6 <task2+0x10a>
							myCol = make_colour(8 - t_off, t_off, 0);
 80009a8:	183b      	adds	r3, r7, r0
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	2208      	movs	r2, #8
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	b299      	uxth	r1, r3
 80009b4:	183b      	adds	r3, r7, r0
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	230c      	movs	r3, #12
 80009bc:	18f8      	adds	r0, r7, r3
 80009be:	2300      	movs	r3, #0
 80009c0:	f7ff fe2c 	bl	800061c <make_colour>
 80009c4:	e036      	b.n	8000a34 <task2+0x178>
						}
						else if (t_off < 16) {
 80009c6:	218b      	movs	r1, #139	; 0x8b
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d818      	bhi.n	8000a02 <task2+0x146>
							myCol = make_colour(0, 16 - t_off, t_off - 8);
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	2210      	movs	r2, #16
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	b29a      	uxth	r2, r3
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	3b08      	subs	r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	210c      	movs	r1, #12
 80009e8:	187c      	adds	r4, r7, r1
 80009ea:	0038      	movs	r0, r7
 80009ec:	2100      	movs	r1, #0
 80009ee:	f7ff fe15 	bl	800061c <make_colour>
 80009f2:	003b      	movs	r3, r7
 80009f4:	0020      	movs	r0, r4
 80009f6:	0019      	movs	r1, r3
 80009f8:	2306      	movs	r3, #6
 80009fa:	001a      	movs	r2, r3
 80009fc:	f004 fb26 	bl	800504c <memcpy>
 8000a00:	e018      	b.n	8000a34 <task2+0x178>
						}
						else {
							myCol = make_colour(t_off - 16, 0, 24 - t_off);
 8000a02:	228b      	movs	r2, #139	; 0x8b
 8000a04:	18bb      	adds	r3, r7, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	3b10      	subs	r3, #16
 8000a0c:	b299      	uxth	r1, r3
 8000a0e:	18bb      	adds	r3, r7, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	2218      	movs	r2, #24
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	18bc      	adds	r4, r7, r2
 8000a1e:	0038      	movs	r0, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	f7ff fdfb 	bl	800061c <make_colour>
 8000a26:	003b      	movs	r3, r7
 8000a28:	0020      	movs	r0, r4
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	001a      	movs	r2, r3
 8000a30:	f004 fb0c 	bl	800504c <memcpy>
						}
						setLED(&LED1202Obj, x, y, myCol);
 8000a34:	230c      	movs	r3, #12
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	228c      	movs	r2, #140	; 0x8c
 8000a3a:	18ba      	adds	r2, r7, r2
 8000a3c:	7815      	ldrb	r5, [r2, #0]
 8000a3e:	228d      	movs	r2, #141	; 0x8d
 8000a40:	18ba      	adds	r2, r7, r2
 8000a42:	7814      	ldrb	r4, [r2, #0]
 8000a44:	481e      	ldr	r0, [pc, #120]	; (8000ac0 <task2+0x204>)
 8000a46:	466a      	mov	r2, sp
 8000a48:	8899      	ldrh	r1, [r3, #4]
 8000a4a:	8011      	strh	r1, [r2, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	002a      	movs	r2, r5
 8000a50:	0021      	movs	r1, r4
 8000a52:	f7ff fe51 	bl	80006f8 <setLED>
				for (uint8_t y = 0; y < 4; ++y) {
 8000a56:	228c      	movs	r2, #140	; 0x8c
 8000a58:	18bb      	adds	r3, r7, r2
 8000a5a:	18ba      	adds	r2, r7, r2
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	3201      	adds	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	238c      	movs	r3, #140	; 0x8c
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d800      	bhi.n	8000a6e <task2+0x1b2>
 8000a6c:	e753      	b.n	8000916 <task2+0x5a>
			for (uint8_t x = 0; x < 4; ++x) {
 8000a6e:	228d      	movs	r2, #141	; 0x8d
 8000a70:	18bb      	adds	r3, r7, r2
 8000a72:	18ba      	adds	r2, r7, r2
 8000a74:	7812      	ldrb	r2, [r2, #0]
 8000a76:	3201      	adds	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	238d      	movs	r3, #141	; 0x8d
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d800      	bhi.n	8000a86 <task2+0x1ca>
 8000a84:	e742      	b.n	800090c <task2+0x50>
					}
				}
			}
			if (!enabled_flag) {
 8000a86:	218f      	movs	r1, #143	; 0x8f
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4053      	eors	r3, r2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d002      	beq.n	8000a9c <task2+0x1e0>
				enabled_flag = true;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
			}
			HAL_Delay(200);
 8000a9c:	20c8      	movs	r0, #200	; 0xc8
 8000a9e:	f000 ffef 	bl	8001a80 <HAL_Delay>
			t++;
 8000aa2:	218e      	movs	r1, #142	; 0x8e
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	3201      	adds	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
		while (t < 27) {
 8000aae:	238e      	movs	r3, #142	; 0x8e
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b1a      	cmp	r3, #26
 8000ab6:	d800      	bhi.n	8000aba <task2+0x1fe>
 8000ab8:	e723      	b.n	8000902 <task2+0x46>
	while (1) {
 8000aba:	e71d      	b.n	80008f8 <task2+0x3c>
 8000abc:	20000032 	.word	0x20000032
 8000ac0:	2000023c 	.word	0x2000023c
 8000ac4:	08005208 	.word	0x08005208

08000ac8 <ClearBuffers>:
 * @brief  Clear the buffers
 * @param  None
 * @retval None
 */
void ClearBuffers(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  uint8_t count;
  for(count=0;count<BUFFER_SIZE;count++)
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e00e      	b.n	8000af4 <ClearBuffers+0x2c>
  {
    bridge_IN_buffer[count]=0x0;
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <ClearBuffers+0x40>)
 8000adc:	2100      	movs	r1, #0
 8000ade:	54d1      	strb	r1, [r2, r3]
    bridge_OUT_buffer[count]=0x0;
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <ClearBuffers+0x44>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	54d1      	strb	r1, [r2, r3]
  for(count=0;count<BUFFER_SIZE;count++)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	3201      	adds	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b3f      	cmp	r3, #63	; 0x3f
 8000afa:	d9ec      	bls.n	8000ad6 <ClearBuffers+0xe>
  }
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000034 	.word	0x20000034
 8000b0c:	20000074 	.word	0x20000074

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b14:	f000 ff2e 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b18:	f000 f81e 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1c:	f000 f99c 	bl	8000e58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b20:	f000 f94c 	bl	8000dbc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b24:	f000 f8a0 	bl	8000c68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b28:	f000 f8f2 	bl	8000d10 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000b2c:	f000 f85c 	bl	8000be8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // mainApp.c

  __HAL_TIM_CLEAR_IT(&htim2,TIM_SR_UIF);
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <main+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2202      	movs	r2, #2
 8000b36:	4252      	negs	r2, r2
 8000b38:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT(&htim3,TIM_SR_UIF);
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <main+0x44>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2202      	movs	r2, #2
 8000b40:	4252      	negs	r2, r2
 8000b42:	611a      	str	r2, [r3, #16]
  setup();
 8000b44:	f7ff fe6e 	bl	8000824 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// run mainApp
	mainLoop();
 8000b48:	f7ff feb0 	bl	80008ac <mainLoop>
 8000b4c:	e7fc      	b.n	8000b48 <main+0x38>
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	2000010c 	.word	0x2000010c
 8000b54:	20000158 	.word	0x20000158

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b095      	sub	sp, #84	; 0x54
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	2414      	movs	r4, #20
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	0018      	movs	r0, r3
 8000b64:	233c      	movs	r3, #60	; 0x3c
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f004 fa78 	bl	800505e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	0018      	movs	r0, r3
 8000b72:	2310      	movs	r3, #16
 8000b74:	001a      	movs	r2, r3
 8000b76:	2100      	movs	r1, #0
 8000b78:	f004 fa71 	bl	800505e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f002 f953 	bl	8002e2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2202      	movs	r2, #2
 8000b8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	0052      	lsls	r2, r2, #1
 8000b92:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 f98b 	bl	8002ec4 <HAL_RCC_OscConfig>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bb2:	f000 f9ad 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fcd6 	bl	8003584 <HAL_RCC_ClockConfig>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000bdc:	f000 f998 	bl	8000f10 <Error_Handler>
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b015      	add	sp, #84	; 0x54
 8000be6:	bd90      	pop	{r4, r7, pc}

08000be8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <MX_I2C1_Init+0x78>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <MX_I2C1_Init+0x7c>)
 8000bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 fa65 	bl	80020f4 <HAL_I2C_Init>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c2e:	f000 f96f 	bl	8000f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c34:	2100      	movs	r1, #0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 f860 	bl	8002cfc <HAL_I2CEx_ConfigAnalogFilter>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 f966 	bl	8000f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f002 f8a3 	bl	8002d94 <HAL_I2CEx_ConfigDigitalFilter>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c52:	f000 f95d 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200000b8 	.word	0x200000b8
 8000c60:	40005400 	.word	0x40005400
 8000c64:	00303d5b 	.word	0x00303d5b

08000c68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	2310      	movs	r3, #16
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	0018      	movs	r0, r3
 8000c74:	2310      	movs	r3, #16
 8000c76:	001a      	movs	r2, r3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f004 f9f0 	bl	800505e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	0018      	movs	r0, r3
 8000c82:	230c      	movs	r3, #12
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f004 f9e9 	bl	800505e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_TIM2_Init+0xa4>)
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	05d2      	lsls	r2, r2, #23
 8000c92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_TIM2_Init+0xa4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_TIM2_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_TIM2_Init+0xa4>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4252      	negs	r2, r2
 8000ca6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_TIM2_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_TIM2_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_TIM2_Init+0xa4>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f003 f84a 	bl	8003d50 <HAL_TIM_Base_Init>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000cc0:	f000 f926 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	0152      	lsls	r2, r2, #5
 8000ccc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cce:	187a      	adds	r2, r7, r1
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_TIM2_Init+0xa4>)
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f003 f893 	bl	8003e00 <HAL_TIM_ConfigClockSource>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cde:	f000 f917 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cee:	1d3a      	adds	r2, r7, #4
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_TIM2_Init+0xa4>)
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f003 fa7f 	bl	80041f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cfe:	f000 f907 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b008      	add	sp, #32
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	2000010c 	.word	0x2000010c

08000d10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	2310      	movs	r3, #16
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f004 f99c 	bl	800505e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	0018      	movs	r0, r3
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f004 f995 	bl	800505e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_TIM3_Init+0xa0>)
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <MX_TIM3_Init+0xa4>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_TIM3_Init+0xa0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_TIM3_Init+0xa0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_TIM3_Init+0xa0>)
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <MX_TIM3_Init+0xa8>)
 8000d4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_TIM3_Init+0xa0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_TIM3_Init+0xa0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_TIM3_Init+0xa0>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f002 fff8 	bl	8003d50 <HAL_TIM_Base_Init>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d64:	f000 f8d4 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d68:	2110      	movs	r1, #16
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	0152      	lsls	r2, r2, #5
 8000d70:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d72:	187a      	adds	r2, r7, r1
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_TIM3_Init+0xa0>)
 8000d76:	0011      	movs	r1, r2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f003 f841 	bl	8003e00 <HAL_TIM_ConfigClockSource>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d82:	f000 f8c5 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d92:	1d3a      	adds	r2, r7, #4
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_TIM3_Init+0xa0>)
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f003 fa2d 	bl	80041f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000da2:	f000 f8b5 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b008      	add	sp, #32
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	20000158 	.word	0x20000158
 8000db4:	40000400 	.word	0x40000400
 8000db8:	0000ffff 	.word	0x0000ffff

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <MX_USART2_UART_Init+0x98>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dc8:	22e1      	movs	r2, #225	; 0xe1
 8000dca:	0252      	lsls	r2, r2, #9
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f003 fa6c 	bl	80042e4 <HAL_UART_Init>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e10:	f000 f87e 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f004 f813 	bl	8004e44 <HAL_UARTEx_SetTxFifoThreshold>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e22:	f000 f875 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f004 f84a 	bl	8004ec4 <HAL_UARTEx_SetRxFifoThreshold>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e34:	f000 f86c 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f003 ffc8 	bl	8004dd0 <HAL_UARTEx_DisableFifoMode>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e44:	f000 f864 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	200001a4 	.word	0x200001a4
 8000e54:	40004400 	.word	0x40004400

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b08b      	sub	sp, #44	; 0x2c
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	2414      	movs	r4, #20
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	0018      	movs	r0, r3
 8000e64:	2314      	movs	r3, #20
 8000e66:	001a      	movs	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f004 f8f8 	bl	800505e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e74:	2104      	movs	r1, #4
 8000e76:	430a      	orrs	r2, r1
 8000e78:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	2204      	movs	r2, #4
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e96:	2220      	movs	r2, #32
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4013      	ands	r3, r2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ece:	23a0      	movs	r3, #160	; 0xa0
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f001 f8ee 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000edc:	0021      	movs	r1, r4
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2220      	movs	r2, #32
 8000ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	187a      	adds	r2, r7, r1
 8000ef8:	23a0      	movs	r3, #160	; 0xa0
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	0011      	movs	r1, r2
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fe96 	bl	8001c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b00b      	add	sp, #44	; 0x2c
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	40021000 	.word	0x40021000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0549      	lsls	r1, r1, #21
 8000f44:	430a      	orrs	r2, r1
 8000f46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_MspInit+0x44>)
 8000f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	055b      	lsls	r3, r3, #21
 8000f50:	4013      	ands	r3, r2
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b09d      	sub	sp, #116	; 0x74
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	235c      	movs	r3, #92	; 0x5c
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	0018      	movs	r0, r3
 8000f72:	2314      	movs	r3, #20
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f004 f871 	bl	800505e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	2410      	movs	r4, #16
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	234c      	movs	r3, #76	; 0x4c
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f004 f869 	bl	800505e <memset>
  if(hi2c->Instance==I2C1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_I2C_MspInit+0xb8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d13e      	bne.n	8001014 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2220      	movs	r2, #32
 8000f9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f002 fc97 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	1e03      	subs	r3, r0, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fae:	f7ff ffaf 	bl	8000f10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_I2C_MspInit+0xbc>)
 8000fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_I2C_MspInit+0xbc>)
 8000fb8:	2102      	movs	r1, #2
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_I2C_MspInit+0xbc>)
 8000fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fca:	215c      	movs	r1, #92	; 0x5c
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	22c0      	movs	r2, #192	; 0xc0
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2212      	movs	r2, #18
 8000fd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2206      	movs	r2, #6
 8000fea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <HAL_I2C_MspInit+0xc0>)
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	f000 fe1c 	bl	8001c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_I2C_MspInit+0xbc>)
 8000ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_I2C_MspInit+0xbc>)
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	0389      	lsls	r1, r1, #14
 8001002:	430a      	orrs	r2, r1
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_I2C_MspInit+0xbc>)
 8001008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	039b      	lsls	r3, r3, #14
 800100e:	4013      	ands	r3, r2
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b01d      	add	sp, #116	; 0x74
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	40005400 	.word	0x40005400
 8001020:	40021000 	.word	0x40021000
 8001024:	50000400 	.word	0x50000400

08001028 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <HAL_I2C_MspDeInit+0x44>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d113      	bne.n	8001062 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_I2C_MspDeInit+0x48>)
 800103c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_I2C_MspDeInit+0x48>)
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <HAL_I2C_MspDeInit+0x4c>)
 8001042:	400a      	ands	r2, r1
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_I2C_MspDeInit+0x50>)
 800104c:	0019      	movs	r1, r3
 800104e:	0010      	movs	r0, r2
 8001050:	f000 ff5a 	bl	8001f08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_I2C_MspDeInit+0x50>)
 800105a:	0019      	movs	r1, r3
 800105c:	0010      	movs	r0, r2
 800105e:	f000 ff53 	bl	8001f08 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	40005400 	.word	0x40005400
 8001070:	40021000 	.word	0x40021000
 8001074:	ffdfffff 	.word	0xffdfffff
 8001078:	50000400 	.word	0x50000400

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	429a      	cmp	r2, r3
 800108e:	d10c      	bne.n	80010aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_TIM_Base_MspInit+0x58>)
 8001092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_TIM_Base_MspInit+0x58>)
 8001096:	2101      	movs	r1, #1
 8001098:	430a      	orrs	r2, r1
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_TIM_Base_MspInit+0x58>)
 800109e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a0:	2201      	movs	r2, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010a8:	e010      	b.n	80010cc <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_TIM_Base_MspInit+0x5c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d10b      	bne.n	80010cc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_TIM_Base_MspInit+0x58>)
 80010b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_TIM_Base_MspInit+0x58>)
 80010ba:	2102      	movs	r1, #2
 80010bc:	430a      	orrs	r2, r1
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <HAL_TIM_Base_MspInit+0x58>)
 80010c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c4:	2202      	movs	r2, #2
 80010c6:	4013      	ands	r3, r2
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b004      	add	sp, #16
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40000400 	.word	0x40000400

080010dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b09d      	sub	sp, #116	; 0x74
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	235c      	movs	r3, #92	; 0x5c
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	0018      	movs	r0, r3
 80010ea:	2314      	movs	r3, #20
 80010ec:	001a      	movs	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	f003 ffb5 	bl	800505e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f4:	2410      	movs	r4, #16
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	0018      	movs	r0, r3
 80010fa:	234c      	movs	r3, #76	; 0x4c
 80010fc:	001a      	movs	r2, r3
 80010fe:	2100      	movs	r1, #0
 8001100:	f003 ffad 	bl	800505e <memset>
  if(huart->Instance==USART2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <HAL_UART_MspInit+0xb8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d13e      	bne.n	800118c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800110e:	193b      	adds	r3, r7, r4
 8001110:	2202      	movs	r2, #2
 8001112:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001114:	193b      	adds	r3, r7, r4
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111a:	193b      	adds	r3, r7, r4
 800111c:	0018      	movs	r0, r3
 800111e:	f002 fbdb 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d001      	beq.n	800112a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001126:	f7ff fef3 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_UART_MspInit+0xbc>)
 800112c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_UART_MspInit+0xbc>)
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	0289      	lsls	r1, r1, #10
 8001134:	430a      	orrs	r2, r1
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_UART_MspInit+0xbc>)
 800113a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_UART_MspInit+0xbc>)
 8001148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_UART_MspInit+0xbc>)
 800114c:	2101      	movs	r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_UART_MspInit+0xbc>)
 8001154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001156:	2201      	movs	r2, #1
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800115e:	215c      	movs	r1, #92	; 0x5c
 8001160:	187b      	adds	r3, r7, r1
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2202      	movs	r2, #2
 800116a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2201      	movs	r2, #1
 800117c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	187a      	adds	r2, r7, r1
 8001180:	23a0      	movs	r3, #160	; 0xa0
 8001182:	05db      	lsls	r3, r3, #23
 8001184:	0011      	movs	r1, r2
 8001186:	0018      	movs	r0, r3
 8001188:	f000 fd52 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b01d      	add	sp, #116	; 0x74
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	40004400 	.word	0x40004400
 8001198:	40021000 	.word	0x40021000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c0:	f000 fc42 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d8:	f7ff fff7 	bl	80011ca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <LoopForever+0x6>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	; (8001214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <LoopForever+0xe>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	; (8001220 <LoopForever+0x16>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001202:	f003 feff 	bl	8005004 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001206:	f7ff fc83 	bl	8000b10 <main>

0800120a <LoopForever>:

LoopForever:
  b LoopForever
 800120a:	e7fe      	b.n	800120a <LoopForever>
  ldr   r0, =_estack
 800120c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001218:	08005334 	.word	0x08005334
  ldr r2, =_sbss
 800121c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001220:	2000026c 	.word	0x2000026c

08001224 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_COMP_IRQHandler>
	...

08001228 <LED1202_RegisterBusIO>:
 * @param  pObj the device pObj
 * @param  pIO the IO pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_RegisterBusIO (LED1202_Object_TypeDef* pObj, LED1202_IO_TypeDef *pIO)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  int32_t ret = (int32_t)LED1202_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <LED1202_RegisterBusIO+0x1a>
  {
    ret = (int32_t)LED1202_ERROR;
 800123c:	2303      	movs	r3, #3
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e032      	b.n	80012a8 <LED1202_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.BusType     = pIO->BusType;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
    pObj->IO.Address     = pIO->Address;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	791a      	ldrb	r2, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	711a      	strb	r2, [r3, #4]
    pObj->IO.Init        = pIO->Init;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]
    pObj->IO.DeInit      = pIO->DeInit;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60da      	str	r2, [r3, #12]
    pObj->IO.Write       = pIO->Write;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]
    pObj->IO.Read        = pIO->Read;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	615a      	str	r2, [r3, #20]
    pObj->IO.Delay     =   pIO->Delay;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	699a      	ldr	r2, [r3, #24]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LED1202_RegisterBusIO+0x8c>)
 800127e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <LED1202_RegisterBusIO+0x90>)
 8001284:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <LED1202_RegisterBusIO+0x72>
    {
      ret = (int32_t)LED1202_ERROR;
 8001294:	2303      	movs	r3, #3
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e006      	b.n	80012a8 <LED1202_RegisterBusIO+0x80>
    } else if (pObj->IO.Init() != 0) {
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	4798      	blx	r3
 80012a0:	1e03      	subs	r3, r0, #0
 80012a2:	d001      	beq.n	80012a8 <LED1202_RegisterBusIO+0x80>
      ret = (int32_t)LED1202_ERROR;
 80012a4:	2303      	movs	r3, #3
 80012a6:	60fb      	str	r3, [r7, #12]
    {
      /*DO nothing*/
    }
  }

  return ret;
 80012a8:	68fb      	ldr	r3, [r7, #12]
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	0800165d 	.word	0x0800165d
 80012b8:	080016a1 	.word	0x080016a1

080012bc <LED1202_ReadID>:
 * @param  pID pointer to the buffer
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_ReadID(LED1202_Object_TypeDef* pObj, uint8_t *pID, uint8_t DevAddr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	701a      	strb	r2, [r3, #0]
  int32_t ret;
  pObj->IO.Address = DevAddr<<1;
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	18db      	adds	r3, r3, r3
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	711a      	strb	r2, [r3, #4]
  TmpStatus = LED1202_ReadReg(&(pObj->Ctx), LED1202_DEVICE_ID, pID, 1);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	331c      	adds	r3, #28
 80012da:	0018      	movs	r0, r3
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	2301      	movs	r3, #1
 80012e0:	2100      	movs	r1, #0
 80012e2:	f000 f8c8 	bl	8001476 <LED1202_ReadReg>
 80012e6:	0002      	movs	r2, r0
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <LED1202_ReadID+0x4c>)
 80012ea:	601a      	str	r2, [r3, #0]
  
  if((*pID) == I_AM_LED1202)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d102      	bne.n	80012fa <LED1202_ReadID+0x3e>
  {
    ret = (int32_t)LED1202_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e001      	b.n	80012fe <LED1202_ReadID+0x42>
  }
  else
  {
    ret = (int32_t)LED1202_ERROR;
 80012fa:	2303      	movs	r3, #3
 80012fc:	617b      	str	r3, [r7, #20]
  }
  return (ret);
 80012fe:	697b      	ldr	r3, [r7, #20]
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b006      	add	sp, #24
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000238 	.word	0x20000238

0800130c <LED1202_SetChannelState>:
 * @param  Channel LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_SetChannelState( LED1202_Object_TypeDef* pObj , uint16_t Channel ,StateEnum_TypeDef State, uint8_t DevAddr)
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	000c      	movs	r4, r1
 8001316:	0010      	movs	r0, r2
 8001318:	0019      	movs	r1, r3
 800131a:	1cbb      	adds	r3, r7, #2
 800131c:	1c22      	adds	r2, r4, #0
 800131e:	801a      	strh	r2, [r3, #0]
 8001320:	1c7b      	adds	r3, r7, #1
 8001322:	1c02      	adds	r2, r0, #0
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	003b      	movs	r3, r7
 8001328:	1c0a      	adds	r2, r1, #0
 800132a:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret;
  uint16_t readReg;
  uint16_t chRegVal;
  pObj->IO.Address = DevAddr<<1;
 800132c:	003b      	movs	r3, r7
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	18db      	adds	r3, r3, r3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	711a      	strb	r2, [r3, #4]
  
  ret = LED1202_ReadReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&readReg, 2);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	331c      	adds	r3, #28
 800133c:	0018      	movs	r0, r3
 800133e:	240a      	movs	r4, #10
 8001340:	193a      	adds	r2, r7, r4
 8001342:	2302      	movs	r3, #2
 8001344:	2102      	movs	r1, #2
 8001346:	f000 f896 	bl	8001476 <LED1202_ReadReg>
 800134a:	0003      	movs	r3, r0
 800134c:	60fb      	str	r3, [r7, #12]
    
  if(State == CH_STATE_ENABLE)
 800134e:	1c7b      	adds	r3, r7, #1
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d113      	bne.n	800137e <LED1202_SetChannelState+0x72>
  {
    chRegVal = readReg | Channel;
 8001356:	193b      	adds	r3, r7, r4
 8001358:	881a      	ldrh	r2, [r3, #0]
 800135a:	1cbb      	adds	r3, r7, #2
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	b29a      	uxth	r2, r3
 8001362:	2108      	movs	r1, #8
 8001364:	187b      	adds	r3, r7, r1
 8001366:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	331c      	adds	r3, #28
 800136c:	0018      	movs	r0, r3
 800136e:	187a      	adds	r2, r7, r1
 8001370:	2302      	movs	r3, #2
 8001372:	2102      	movs	r1, #2
 8001374:	f000 f8a0 	bl	80014b8 <LED1202_WriteReg>
 8001378:	0003      	movs	r3, r0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e036      	b.n	80013ec <LED1202_SetChannelState+0xe0>
  }
  else if(State == CH_STATE_DISABLE)
 800137e:	1c7b      	adds	r3, r7, #1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d119      	bne.n	80013ba <LED1202_SetChannelState+0xae>
  {
    chRegVal = readReg & (~Channel);  
 8001386:	1cbb      	adds	r3, r7, #2
 8001388:	2200      	movs	r2, #0
 800138a:	5e9b      	ldrsh	r3, [r3, r2]
 800138c:	43db      	mvns	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	220a      	movs	r2, #10
 8001392:	18ba      	adds	r2, r7, r2
 8001394:	8812      	ldrh	r2, [r2, #0]
 8001396:	b212      	sxth	r2, r2
 8001398:	4013      	ands	r3, r2
 800139a:	b21b      	sxth	r3, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	2108      	movs	r1, #8
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	331c      	adds	r3, #28
 80013a8:	0018      	movs	r0, r3
 80013aa:	187a      	adds	r2, r7, r1
 80013ac:	2302      	movs	r3, #2
 80013ae:	2102      	movs	r1, #2
 80013b0:	f000 f882 	bl	80014b8 <LED1202_WriteReg>
 80013b4:	0003      	movs	r3, r0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e018      	b.n	80013ec <LED1202_SetChannelState+0xe0>
  }
  else
  {
    chRegVal = readReg & (~Channel);
 80013ba:	1cbb      	adds	r3, r7, #2
 80013bc:	2200      	movs	r2, #0
 80013be:	5e9b      	ldrsh	r3, [r3, r2]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	220a      	movs	r2, #10
 80013c6:	18ba      	adds	r2, r7, r2
 80013c8:	8812      	ldrh	r2, [r2, #0]
 80013ca:	b212      	sxth	r2, r2
 80013cc:	4013      	ands	r3, r2
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	2108      	movs	r1, #8
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	331c      	adds	r3, #28
 80013dc:	0018      	movs	r0, r3
 80013de:	187a      	adds	r2, r7, r1
 80013e0:	2302      	movs	r3, #2
 80013e2:	2102      	movs	r1, #2
 80013e4:	f000 f868 	bl	80014b8 <LED1202_WriteReg>
 80013e8:	0003      	movs	r3, r0
 80013ea:	60fb      	str	r3, [r7, #12]
  }
  return(ret);
 80013ec:	68fb      	ldr	r3, [r7, #12]
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b005      	add	sp, #20
 80013f4:	bd90      	pop	{r4, r7, pc}

080013f6 <LED1202_WritePatternPWMConfig>:
 * @param  PatternNum Pattern Number
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_WritePatternPWMConfig( LED1202_Object_TypeDef* pObj , uint8_t *pData ,uint8_t Channel, uint8_t PatternNum, uint8_t DevAddr)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	0019      	movs	r1, r3
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	1dbb      	adds	r3, r7, #6
 8001408:	1c0a      	adds	r2, r1, #0
 800140a:	701a      	strb	r2, [r3, #0]
  uint16_t digData;
  uint8_t chOffset;
  int32_t ret = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  pObj->IO.Address = DevAddr<<1;
 8001410:	2320      	movs	r3, #32
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	18db      	adds	r3, r3, r3
 8001418:	b2da      	uxtb	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	711a      	strb	r2, [r3, #4]
  digData = (*((uint16_t *)pData));
 800141e:	2012      	movs	r0, #18
 8001420:	183b      	adds	r3, r7, r0
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	8812      	ldrh	r2, [r2, #0]
 8001426:	801a      	strh	r2, [r3, #0]
  
  chOffset = (((uint8_t)2)*Channel) + (((uint8_t)24)*PatternNum);
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	7819      	ldrb	r1, [r3, #0]
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	0013      	movs	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	189b      	adds	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	18cb      	adds	r3, r1, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2111      	movs	r1, #17
 800143e:	187a      	adds	r2, r7, r1
 8001440:	18db      	adds	r3, r3, r3
 8001442:	7013      	strb	r3, [r2, #0]
  
  if(digData<=((uint16_t)4095))
 8001444:	183b      	adds	r3, r7, r0
 8001446:	881a      	ldrh	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	015b      	lsls	r3, r3, #5
 800144c:	429a      	cmp	r2, r3
 800144e:	d20d      	bcs.n	800146c <LED1202_WritePatternPWMConfig+0x76>
  {
   ret =  LED1202_WriteReg(&(pObj->Ctx),(uint8_t)( LED1202_PATTERN0_CS0_PWM + chOffset), pData, 2); 
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	331c      	adds	r3, #28
 8001454:	0018      	movs	r0, r3
 8001456:	187b      	adds	r3, r7, r1
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	331e      	adds	r3, #30
 800145c:	b2db      	uxtb	r3, r3
 800145e:	b299      	uxth	r1, r3
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	2302      	movs	r3, #2
 8001464:	f000 f828 	bl	80014b8 <LED1202_WriteReg>
 8001468:	0003      	movs	r3, r0
 800146a:	617b      	str	r3, [r7, #20]
  }
  return (ret);
 800146c:	697b      	ldr	r3, [r7, #20]
}
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b006      	add	sp, #24
 8001474:	bd80      	pop	{r7, pc}

08001476 <LED1202_ReadReg>:
* @param  len   number of consecutive register to read
* @retval          interface status (MANDATORY: return 0 -> no Error)
*
*/
int32_t LED1202_ReadReg (const LED1202_Ctx_TypeDef *pLed, uint16_t Reg, const uint8_t *Data, uint16_t len)
{
 8001476:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001478:	b087      	sub	sp, #28
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	0008      	movs	r0, r1
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	0019      	movs	r1, r3
 8001484:	250a      	movs	r5, #10
 8001486:	197b      	adds	r3, r7, r5
 8001488:	1c02      	adds	r2, r0, #0
 800148a:	801a      	strh	r2, [r3, #0]
 800148c:	2608      	movs	r6, #8
 800148e:	19bb      	adds	r3, r7, r6
 8001490:	1c0a      	adds	r2, r1, #0
 8001492:	801a      	strh	r2, [r3, #0]
  int32_t tmp;
  tmp =(int32_t)( pLed->ReadReg(pLed->handle, Reg,  Data, len));
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	685c      	ldr	r4, [r3, #4]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6898      	ldr	r0, [r3, #8]
 800149c:	197b      	adds	r3, r7, r5
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b2d9      	uxtb	r1, r3
 80014a2:	19bb      	adds	r3, r7, r6
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	47a0      	blx	r4
 80014aa:	0003      	movs	r3, r0
 80014ac:	617b      	str	r3, [r7, #20]
  return (tmp);
 80014ae:	697b      	ldr	r3, [r7, #20]
}
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b007      	add	sp, #28
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014b8 <LED1202_WriteReg>:
* @param  len   number of consecutive register to read
* @retval          interface status (MANDATORY: return 0 -> no Error)
*
*/
int32_t LED1202_WriteReg (const LED1202_Ctx_TypeDef *pLed, uint16_t Reg, const uint8_t* Data, uint16_t len)
{
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	0008      	movs	r0, r1
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	0019      	movs	r1, r3
 80014c6:	250a      	movs	r5, #10
 80014c8:	197b      	adds	r3, r7, r5
 80014ca:	1c02      	adds	r2, r0, #0
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	2608      	movs	r6, #8
 80014d0:	19bb      	adds	r3, r7, r6
 80014d2:	1c0a      	adds	r2, r1, #0
 80014d4:	801a      	strh	r2, [r3, #0]
  int32_t tmp;
  tmp = (int32_t)(pLed->WriteReg(pLed->handle, Reg, Data, len));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681c      	ldr	r4, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6898      	ldr	r0, [r3, #8]
 80014de:	197b      	adds	r3, r7, r5
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	b2d9      	uxtb	r1, r3
 80014e4:	19bb      	adds	r3, r7, r6
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	47a0      	blx	r4
 80014ec:	0003      	movs	r3, r0
 80014ee:	617b      	str	r3, [r7, #20]
  return (tmp);
 80014f0:	697b      	ldr	r3, [r7, #20]
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b007      	add	sp, #28
 80014f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080014fc <LED12A1_Init>:
/**
* @brief  LED12A1 Board Initialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_Init( void )
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
  volatile int32_t ret =  (int32_t)LED1202_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  LED1202_IO_TypeDef ledIO;
  
  /*register SPI bus function to the component */
  ledIO.BusType = LED1202_I2C_BUS;
 8001506:	003b      	movs	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
  ledIO.Address = LED1202_I2C_ADDR;
 800150c:	003b      	movs	r3, r7
 800150e:	225c      	movs	r2, #92	; 0x5c
 8001510:	711a      	strb	r2, [r3, #4]
  ledIO.Init = LED12A1_I2C_Init;
 8001512:	003b      	movs	r3, r7
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <LED12A1_Init+0x50>)
 8001516:	609a      	str	r2, [r3, #8]
  ledIO.DeInit = LED12A1_I2C_DeInit;
 8001518:	003b      	movs	r3, r7
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <LED12A1_Init+0x54>)
 800151c:	60da      	str	r2, [r3, #12]
  ledIO.Write = LED12A1_I2C_Write;
 800151e:	003b      	movs	r3, r7
 8001520:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <LED12A1_Init+0x58>)
 8001522:	611a      	str	r2, [r3, #16]
  ledIO.Read = LED12A1_I2C_Read;
 8001524:	003b      	movs	r3, r7
 8001526:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <LED12A1_Init+0x5c>)
 8001528:	615a      	str	r2, [r3, #20]
  ledIO.Delay = LED12A1_Delay;
 800152a:	003b      	movs	r3, r7
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LED12A1_Init+0x60>)
 800152e:	619a      	str	r2, [r3, #24]
  
  ret = LED1202_RegisterBusIO (&LED1202Obj, &ledIO);
 8001530:	003a      	movs	r2, r7
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <LED12A1_Init+0x64>)
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f7ff fe76 	bl	8001228 <LED1202_RegisterBusIO>
 800153c:	0003      	movs	r3, r0
 800153e:	61fb      	str	r3, [r7, #28]
  
  return (ret);
 8001540:	69fb      	ldr	r3, [r7, #28]
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b008      	add	sp, #32
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	08001565 	.word	0x08001565
 8001550:	08001575 	.word	0x08001575
 8001554:	08001599 	.word	0x08001599
 8001558:	080015fd 	.word	0x080015fd
 800155c:	08001a81 	.word	0x08001a81
 8001560:	2000023c 	.word	0x2000023c

08001564 <BSP_I2C_Init>:
/**
* @brief  LED12A1 I2C Initialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t  BSP_I2C_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  MX_I2C1_Init();
 8001568:	f7ff fb3e 	bl	8000be8 <MX_I2C1_Init>
  return (0);
 800156c:	2300      	movs	r3, #0
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <BSP_I2C_DeInit>:
/**
* @brief  LED12A1 I2C DeInitialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t BSP_I2C_DeInit(void)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret;
  ret  = HAL_I2C_DeInit(&hi2c1);
 800157a:	1dfc      	adds	r4, r7, #7
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <BSP_I2C_DeInit+0x20>)
 800157e:	0018      	movs	r0, r3
 8001580:	f000 fe4e 	bl	8002220 <HAL_I2C_DeInit>
 8001584:	0003      	movs	r3, r0
 8001586:	7023      	strb	r3, [r4, #0]
  return((int32_t)ret);
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	781b      	ldrb	r3, [r3, #0]
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b003      	add	sp, #12
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	200000b8 	.word	0x200000b8

08001598 <BSP_I2C_Write>:
* @param  Reg: The target register address to write
* @param  Value: The target register value to be written
* @retval BSP status
*/
int32_t BSP_I2C_Write(uint16_t DevAddr, uint16_t Reg, const uint8_t* pData, uint16_t Len)
{
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af04      	add	r7, sp, #16
 800159e:	0004      	movs	r4, r0
 80015a0:	0008      	movs	r0, r1
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	0019      	movs	r1, r3
 80015a6:	250e      	movs	r5, #14
 80015a8:	197b      	adds	r3, r7, r5
 80015aa:	1c22      	adds	r2, r4, #0
 80015ac:	801a      	strh	r2, [r3, #0]
 80015ae:	240c      	movs	r4, #12
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	1c02      	adds	r2, r0, #0
 80015b4:	801a      	strh	r2, [r3, #0]
 80015b6:	1dbb      	adds	r3, r7, #6
 80015b8:	1c0a      	adds	r2, r1, #0
 80015ba:	801a      	strh	r2, [r3, #0]
  int32_t ret = (int32_t)BSP_ERROR_BUS_FAILURE;
 80015bc:	2308      	movs	r3, #8
 80015be:	425b      	negs	r3, r3
 80015c0:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, (uint8_t)DevAddr,
 80015c2:	197b      	adds	r3, r7, r5
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	b299      	uxth	r1, r3
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	881a      	ldrh	r2, [r3, #0]
 80015ce:	480a      	ldr	r0, [pc, #40]	; (80015f8 <BSP_I2C_Write+0x60>)
 80015d0:	23fa      	movs	r3, #250	; 0xfa
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	1dbb      	adds	r3, r7, #6
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f000 fe4d 	bl	8002280 <HAL_I2C_Mem_Write>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d101      	bne.n	80015ee <BSP_I2C_Write+0x56>
                        (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                        (uint8_t *)pData, Len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 80015ee:	697b      	ldr	r3, [r7, #20]
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b006      	add	sp, #24
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}
 80015f8:	200000b8 	.word	0x200000b8

080015fc <BSP_I2C_Read>:
* @param  DevAddr: Device address on BUS
* @param  Reg: The target register address to read
* @retval BSP status
*/
int32_t BSP_I2C_Read(uint16_t DevAddr, uint16_t Reg, const uint8_t* pData, uint16_t Len)
{
 80015fc:	b5b0      	push	{r4, r5, r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af04      	add	r7, sp, #16
 8001602:	0004      	movs	r4, r0
 8001604:	0008      	movs	r0, r1
 8001606:	60ba      	str	r2, [r7, #8]
 8001608:	0019      	movs	r1, r3
 800160a:	250e      	movs	r5, #14
 800160c:	197b      	adds	r3, r7, r5
 800160e:	1c22      	adds	r2, r4, #0
 8001610:	801a      	strh	r2, [r3, #0]
 8001612:	240c      	movs	r4, #12
 8001614:	193b      	adds	r3, r7, r4
 8001616:	1c02      	adds	r2, r0, #0
 8001618:	801a      	strh	r2, [r3, #0]
 800161a:	1dbb      	adds	r3, r7, #6
 800161c:	1c0a      	adds	r2, r1, #0
 800161e:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8001620:	2308      	movs	r3, #8
 8001622:	425b      	negs	r3, r3
 8001624:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, (uint16_t)Reg,
 8001626:	193b      	adds	r3, r7, r4
 8001628:	881a      	ldrh	r2, [r3, #0]
 800162a:	197b      	adds	r3, r7, r5
 800162c:	8819      	ldrh	r1, [r3, #0]
 800162e:	480a      	ldr	r0, [pc, #40]	; (8001658 <BSP_I2C_Read+0x5c>)
 8001630:	23fa      	movs	r3, #250	; 0xfa
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	1dbb      	adds	r3, r7, #6
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	f000 ff4b 	bl	80024dc <HAL_I2C_Mem_Read>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d101      	bne.n	800164e <BSP_I2C_Read+0x52>
                       I2C_MEMADD_SIZE_8BIT, (uint8_t *)pData,
                       Len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 800164e:	697b      	ldr	r3, [r7, #20]
}
 8001650:	0018      	movs	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	b006      	add	sp, #24
 8001656:	bdb0      	pop	{r4, r5, r7, pc}
 8001658:	200000b8 	.word	0x200000b8

0800165c <ReadRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
int32_t ReadRegWrap(void *Handle, uint8_t Reg, const uint8_t *pData, uint16_t Length)
{
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	0008      	movs	r0, r1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	0019      	movs	r1, r3
 800166a:	250b      	movs	r5, #11
 800166c:	197b      	adds	r3, r7, r5
 800166e:	1c02      	adds	r2, r0, #0
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	2608      	movs	r6, #8
 8001674:	19bb      	adds	r3, r7, r6
 8001676:	1c0a      	adds	r2, r1, #0
 8001678:	801a      	strh	r2, [r3, #0]
  LED1202_Object_TypeDef *led1202Obj = (LED1202_Object_TypeDef *)Handle;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	617b      	str	r3, [r7, #20]
  
  return led1202Obj->IO.Read(led1202Obj->IO.Address, Reg, pData, Length);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	695c      	ldr	r4, [r3, #20]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	791b      	ldrb	r3, [r3, #4]
 8001686:	b298      	uxth	r0, r3
 8001688:	197b      	adds	r3, r7, r5
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b299      	uxth	r1, r3
 800168e:	19bb      	adds	r3, r7, r6
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	47a0      	blx	r4
 8001696:	0003      	movs	r3, r0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b007      	add	sp, #28
 800169e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016a0 <WriteRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
int32_t WriteRegWrap(void *Handle, uint8_t Reg, const uint8_t *pData, uint16_t Length)
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	0008      	movs	r0, r1
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	0019      	movs	r1, r3
 80016ae:	250b      	movs	r5, #11
 80016b0:	197b      	adds	r3, r7, r5
 80016b2:	1c02      	adds	r2, r0, #0
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	2608      	movs	r6, #8
 80016b8:	19bb      	adds	r3, r7, r6
 80016ba:	1c0a      	adds	r2, r1, #0
 80016bc:	801a      	strh	r2, [r3, #0]
  LED1202_Object_TypeDef *led1202Obj  = (LED1202_Object_TypeDef *)Handle;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	617b      	str	r3, [r7, #20]
  
  return led1202Obj->IO.Write(led1202Obj->IO.Address, Reg, pData, Length);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	691c      	ldr	r4, [r3, #16]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	791b      	ldrb	r3, [r3, #4]
 80016ca:	b298      	uxth	r0, r3
 80016cc:	197b      	adds	r3, r7, r5
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b299      	uxth	r1, r3
 80016d2:	19bb      	adds	r3, r7, r6
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	47a0      	blx	r4
 80016da:	0003      	movs	r3, r0
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b007      	add	sp, #28
 80016e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016e4 <LED12A1_DeviceEnable>:
* @param  pObj pointer to Object
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_DeviceEnable( LED1202_Object_TypeDef* pObj , TypedefEnumDevAddr DevSelect)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	000a      	movs	r2, r1
 80016ee:	1cfb      	adds	r3, r7, #3
 80016f0:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  uint8_t tmp = 0x01;
 80016f6:	230f      	movs	r3, #15
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
  uint8_t devAddr;
  
  switch(DevSelect)
 80016fe:	1cfb      	adds	r3, r7, #3
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b04      	cmp	r3, #4
 8001704:	d81d      	bhi.n	8001742 <LED12A1_DeviceEnable+0x5e>
 8001706:	009a      	lsls	r2, r3, #2
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <LED12A1_DeviceEnable+0x98>)
 800170a:	18d3      	adds	r3, r2, r3
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	469f      	mov	pc, r3
  {
  case LED_DEVICE1:
    devAddr = LED1202_DEV1_7BIT_ADDR;
 8001710:	2317      	movs	r3, #23
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	2258      	movs	r2, #88	; 0x58
 8001716:	701a      	strb	r2, [r3, #0]
    
    break;
 8001718:	e018      	b.n	800174c <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE2:
    devAddr = LED1202_DEV2_7BIT_ADDR;
 800171a:	2317      	movs	r3, #23
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2259      	movs	r2, #89	; 0x59
 8001720:	701a      	strb	r2, [r3, #0]
    break;
 8001722:	e013      	b.n	800174c <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE3:
    devAddr = LED1202_DEV3_7BIT_ADDR;
 8001724:	2317      	movs	r3, #23
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	225a      	movs	r2, #90	; 0x5a
 800172a:	701a      	strb	r2, [r3, #0]
    break;
 800172c:	e00e      	b.n	800174c <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE4:
    devAddr = LED1202_DEV4_7BIT_ADDR;
 800172e:	2317      	movs	r3, #23
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	225b      	movs	r2, #91	; 0x5b
 8001734:	701a      	strb	r2, [r3, #0]
    break;  
 8001736:	e009      	b.n	800174c <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE_ALL:
    devAddr = LED1202_GLOBAL_7BIT_ADDR; /*GLOBAL ADDRESS*/
 8001738:	2317      	movs	r3, #23
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	225c      	movs	r2, #92	; 0x5c
 800173e:	701a      	strb	r2, [r3, #0]
    break;
 8001740:	e004      	b.n	800174c <LED12A1_DeviceEnable+0x68>
    
  default:
    devAddr = LED1202_GLOBAL_7BIT_ADDR;
 8001742:	2317      	movs	r3, #23
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	225c      	movs	r2, #92	; 0x5c
 8001748:	701a      	strb	r2, [r3, #0]
    break;
 800174a:	46c0      	nop			; (mov r8, r8)
    
  }
  
  pObj->IO.Address = (uint8_t)(devAddr<<1);
 800174c:	2317      	movs	r3, #23
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	18db      	adds	r3, r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	711a      	strb	r2, [r3, #4]
  
  ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_DEVICE_ENABLE, &tmp, 1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	331c      	adds	r3, #28
 800175e:	0018      	movs	r0, r3
 8001760:	230f      	movs	r3, #15
 8001762:	18fa      	adds	r2, r7, r3
 8001764:	2301      	movs	r3, #1
 8001766:	2101      	movs	r1, #1
 8001768:	f7ff fea6 	bl	80014b8 <LED1202_WriteReg>
 800176c:	0003      	movs	r3, r0
 800176e:	613b      	str	r3, [r7, #16]
  return(ret);
 8001770:	693b      	ldr	r3, [r7, #16]
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	b006      	add	sp, #24
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	080052d4 	.word	0x080052d4

08001780 <LED12A1_SetDeviceAddr>:
* @param  pObj pointer to Object
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_SetDeviceAddr( LED1202_Object_TypeDef* pObj , TypedefEnumDevAddr DevSelect)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	000a      	movs	r2, r1
 800178a:	1cfb      	adds	r3, r7, #3
 800178c:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  uint8_t devAddr;
  
  switch(DevSelect)
 8001792:	1cfb      	adds	r3, r7, #3
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b04      	cmp	r3, #4
 8001798:	d81d      	bhi.n	80017d6 <LED12A1_SetDeviceAddr+0x56>
 800179a:	009a      	lsls	r2, r3, #2
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <LED12A1_SetDeviceAddr+0x74>)
 800179e:	18d3      	adds	r3, r2, r3
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	469f      	mov	pc, r3
  {
  case LED_DEVICE1:
    devAddr = LED1202_DEV1_7BIT_ADDR;
 80017a4:	230f      	movs	r3, #15
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	2258      	movs	r2, #88	; 0x58
 80017aa:	701a      	strb	r2, [r3, #0]
    
    break;
 80017ac:	e018      	b.n	80017e0 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE2:
    devAddr = LED1202_DEV2_7BIT_ADDR;
 80017ae:	230f      	movs	r3, #15
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	2259      	movs	r2, #89	; 0x59
 80017b4:	701a      	strb	r2, [r3, #0]
    break;
 80017b6:	e013      	b.n	80017e0 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE3:
    devAddr = LED1202_DEV3_7BIT_ADDR;
 80017b8:	230f      	movs	r3, #15
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	225a      	movs	r2, #90	; 0x5a
 80017be:	701a      	strb	r2, [r3, #0]
    break;
 80017c0:	e00e      	b.n	80017e0 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE4:
    devAddr = LED1202_DEV4_7BIT_ADDR;
 80017c2:	230f      	movs	r3, #15
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	225b      	movs	r2, #91	; 0x5b
 80017c8:	701a      	strb	r2, [r3, #0]
    break;
 80017ca:	e009      	b.n	80017e0 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE_ALL:
    devAddr = LED1202_GLOBAL_7BIT_ADDR; /*GLOBAL ADDRESS*/
 80017cc:	230f      	movs	r3, #15
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	225c      	movs	r2, #92	; 0x5c
 80017d2:	701a      	strb	r2, [r3, #0]
    break;
 80017d4:	e004      	b.n	80017e0 <LED12A1_SetDeviceAddr+0x60>
    
  default:
    devAddr = LED1202_GLOBAL_7BIT_ADDR;
 80017d6:	230f      	movs	r3, #15
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	225c      	movs	r2, #92	; 0x5c
 80017dc:	701a      	strb	r2, [r3, #0]
    break;
 80017de:	46c0      	nop			; (mov r8, r8)
    
  }
  
  pObj->IO.Address = devAddr;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	220f      	movs	r2, #15
 80017e4:	18ba      	adds	r2, r7, r2
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	711a      	strb	r2, [r3, #4]
  
  return(ret);
 80017ea:	68bb      	ldr	r3, [r7, #8]
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b004      	add	sp, #16
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	080052e8 	.word	0x080052e8

080017f8 <LED12A1_ScanAvailDevice>:
* @param  pObj pointer to Object
* @param  pBuff Pointer to buffer to store the Available devices 7 bit addresses
* @retval Number of LED1202 devices available on board
*/
int32_t LED12A1_ScanAvailDevice( LED1202_Object_TypeDef* pObj ,uint8_t *pBuff)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint8_t i2cStartAddr = 0x58;
 8001802:	2113      	movs	r1, #19
 8001804:	187b      	adds	r3, r7, r1
 8001806:	2258      	movs	r2, #88	; 0x58
 8001808:	701a      	strb	r2, [r3, #0]
  uint8_t i2cEndAddr = 0x60;
 800180a:	2312      	movs	r3, #18
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	2260      	movs	r2, #96	; 0x60
 8001810:	701a      	strb	r2, [r3, #0]
  uint8_t addr;
  uint8_t *buffPtr = pBuff;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	61bb      	str	r3, [r7, #24]
  uint8_t devId;
  int32_t status;
  int32_t numDev = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  
  for (addr = i2cStartAddr; addr<=i2cEndAddr; addr++)
 800181a:	231f      	movs	r3, #31
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	187a      	adds	r2, r7, r1
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e020      	b.n	8001868 <LED12A1_ScanAvailDevice+0x70>
  {
    devId = 0;
 8001826:	210b      	movs	r1, #11
 8001828:	187b      	adds	r3, r7, r1
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
    status =  LED1202_ReadID(pObj, &devId, addr);
 800182e:	241f      	movs	r4, #31
 8001830:	193b      	adds	r3, r7, r4
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	1879      	adds	r1, r7, r1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff fd3f 	bl	80012bc <LED1202_ReadID>
 800183e:	0003      	movs	r3, r0
 8001840:	60fb      	str	r3, [r7, #12]
    
    if(status == ((int32_t)LED1202_OK))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <LED12A1_ScanAvailDevice+0x64>
    {
      numDev++;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
      *buffPtr = addr;
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	193a      	adds	r2, r7, r4
 8001852:	7812      	ldrb	r2, [r2, #0]
 8001854:	701a      	strb	r2, [r3, #0]
      buffPtr++;
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	3301      	adds	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
  for (addr = i2cStartAddr; addr<=i2cEndAddr; addr++)
 800185c:	211f      	movs	r1, #31
 800185e:	187b      	adds	r3, r7, r1
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	187b      	adds	r3, r7, r1
 8001864:	3201      	adds	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	231f      	movs	r3, #31
 800186a:	18fa      	adds	r2, r7, r3
 800186c:	2312      	movs	r3, #18
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d9d6      	bls.n	8001826 <LED12A1_ScanAvailDevice+0x2e>
    }
  }
  
  return(numDev);
 8001878:	697b      	ldr	r3, [r7, #20]
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b009      	add	sp, #36	; 0x24
 8001880:	bd90      	pop	{r4, r7, pc}

08001882 <LED12A1_DigitalDimming>:
* @param  PatternNum Pattern Number
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval ret the status of the operartion
*/
int32_t LED12A1_DigitalDimming( LED1202_Object_TypeDef* pObj ,uint16_t *pBuff,uint8_t Channel, uint8_t PatternNum, TypedefEnumDevAddr DevSelect)
{
 8001882:	b590      	push	{r4, r7, lr}
 8001884:	b089      	sub	sp, #36	; 0x24
 8001886:	af02      	add	r7, sp, #8
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	0019      	movs	r1, r3
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	1dbb      	adds	r3, r7, #6
 8001894:	1c0a      	adds	r2, r1, #0
 8001896:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 800189c:	2328      	movs	r3, #40	; 0x28
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	0011      	movs	r1, r2
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff ff6a 	bl	8001780 <LED12A1_SetDeviceAddr>
 80018ac:	0003      	movs	r3, r0
 80018ae:	617b      	str	r3, [r7, #20]
  ret = LED1202_WritePatternPWMConfig(pObj ,(uint8_t *)pBuff,Channel, PatternNum, pObj->IO.Address);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	791b      	ldrb	r3, [r3, #4]
 80018b4:	1dba      	adds	r2, r7, #6
 80018b6:	7814      	ldrb	r4, [r2, #0]
 80018b8:	1dfa      	adds	r2, r7, #7
 80018ba:	7812      	ldrb	r2, [r2, #0]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	0023      	movs	r3, r4
 80018c4:	f7ff fd97 	bl	80013f6 <LED1202_WritePatternPWMConfig>
 80018c8:	0003      	movs	r3, r0
 80018ca:	617b      	str	r3, [r7, #20]
  return(ret);
 80018cc:	697b      	ldr	r3, [r7, #20]
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b007      	add	sp, #28
 80018d4:	bd90      	pop	{r4, r7, pc}

080018d6 <LED12A1_ChannelEnable>:
* @param  Channel any combination of LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_ChannelEnable( LED1202_Object_TypeDef* pObj , TypeDefChannel Channel, TypedefEnumDevAddr DevSelect)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	0008      	movs	r0, r1
 80018e0:	0011      	movs	r1, r2
 80018e2:	1cbb      	adds	r3, r7, #2
 80018e4:	1c02      	adds	r2, r0, #0
 80018e6:	801a      	strh	r2, [r3, #0]
 80018e8:	1c7b      	adds	r3, r7, #1
 80018ea:	1c0a      	adds	r2, r1, #0
 80018ec:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 80018f2:	1c7b      	adds	r3, r7, #1
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0011      	movs	r1, r2
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff ff40 	bl	8001780 <LED12A1_SetDeviceAddr>
 8001900:	0003      	movs	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]
  ret = LED1202_SetChannelState(pObj ,(uint16_t) Channel ,CH_STATE_ENABLE, pObj->IO.Address);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	791a      	ldrb	r2, [r3, #4]
 8001908:	1cbb      	adds	r3, r7, #2
 800190a:	8819      	ldrh	r1, [r3, #0]
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	0013      	movs	r3, r2
 8001910:	2200      	movs	r2, #0
 8001912:	f7ff fcfb 	bl	800130c <LED1202_SetChannelState>
 8001916:	0003      	movs	r3, r0
 8001918:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b004      	add	sp, #16
 8001922:	bd80      	pop	{r7, pc}

08001924 <LED12A1_ChannelDisable>:
* @param  Channel any combination of LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_ChannelDisable( LED1202_Object_TypeDef* pObj , TypeDefChannel Channel,TypedefEnumDevAddr DevSelect)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	0008      	movs	r0, r1
 800192e:	0011      	movs	r1, r2
 8001930:	1cbb      	adds	r3, r7, #2
 8001932:	1c02      	adds	r2, r0, #0
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	1c7b      	adds	r3, r7, #1
 8001938:	1c0a      	adds	r2, r1, #0
 800193a:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret =  (int32_t)LED1202_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 8001940:	1c7b      	adds	r3, r7, #1
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0011      	movs	r1, r2
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff19 	bl	8001780 <LED12A1_SetDeviceAddr>
 800194e:	0003      	movs	r3, r0
 8001950:	60fb      	str	r3, [r7, #12]
  ret = LED1202_SetChannelState(pObj , (uint16_t) Channel ,CH_STATE_DISABLE, pObj->IO.Address);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	791a      	ldrb	r2, [r3, #4]
 8001956:	1cbb      	adds	r3, r7, #2
 8001958:	8819      	ldrh	r1, [r3, #0]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	0013      	movs	r3, r2
 800195e:	2201      	movs	r2, #1
 8001960:	f7ff fcd4 	bl	800130c <LED1202_SetChannelState>
 8001964:	0003      	movs	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_Init+0x3c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Init+0x3c>)
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	0049      	lsls	r1, r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f810 	bl	80019b4 <HAL_InitTick>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d003      	beq.n	80019a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e001      	b.n	80019a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fabc 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	781b      	ldrb	r3, [r3, #0]
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40022000 	.word	0x40022000

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019bc:	230f      	movs	r3, #15
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_InitTick+0x88>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d02b      	beq.n	8001a24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_InitTick+0x8c>)
 80019ce:	681c      	ldr	r4, [r3, #0]
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_InitTick+0x88>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	0019      	movs	r1, r3
 80019d6:	23fa      	movs	r3, #250	; 0xfa
 80019d8:	0098      	lsls	r0, r3, #2
 80019da:	f7fe fb93 	bl	8000104 <__udivsi3>
 80019de:	0003      	movs	r3, r0
 80019e0:	0019      	movs	r1, r3
 80019e2:	0020      	movs	r0, r4
 80019e4:	f7fe fb8e 	bl	8000104 <__udivsi3>
 80019e8:	0003      	movs	r3, r0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 f913 	bl	8001c16 <HAL_SYSTICK_Config>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d112      	bne.n	8001a1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d80a      	bhi.n	8001a10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	2301      	movs	r3, #1
 80019fe:	425b      	negs	r3, r3
 8001a00:	2200      	movs	r2, #0
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 f8f2 	bl	8001bec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_InitTick+0x90>)
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e00d      	b.n	8001a2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a10:	230f      	movs	r3, #15
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e008      	b.n	8001a2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e003      	b.n	8001a2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	781b      	ldrb	r3, [r3, #0]
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b005      	add	sp, #20
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_IncTick+0x1c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	001a      	movs	r2, r3
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_IncTick+0x20>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	18d2      	adds	r2, r2, r3
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_IncTick+0x20>)
 8001a5a:	601a      	str	r2, [r3, #0]
}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000268 	.word	0x20000268

08001a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <HAL_GetTick+0x10>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	20000268 	.word	0x20000268

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff fff0 	bl	8001a6c <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3301      	adds	r3, #1
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	189b      	adds	r3, r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	f7ff ffe0 	bl	8001a6c <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	46c0      	nop			; (mov r8, r8)
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	0002      	movs	r2, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b7f      	cmp	r3, #127	; 0x7f
 8001adc:	d828      	bhi.n	8001b30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ade:	4a2f      	ldr	r2, [pc, #188]	; (8001b9c <__NVIC_SetPriority+0xd4>)
 8001ae0:	1dfb      	adds	r3, r7, #7
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	33c0      	adds	r3, #192	; 0xc0
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	589b      	ldr	r3, [r3, r2]
 8001aee:	1dfa      	adds	r2, r7, #7
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	0011      	movs	r1, r2
 8001af4:	2203      	movs	r2, #3
 8001af6:	400a      	ands	r2, r1
 8001af8:	00d2      	lsls	r2, r2, #3
 8001afa:	21ff      	movs	r1, #255	; 0xff
 8001afc:	4091      	lsls	r1, r2
 8001afe:	000a      	movs	r2, r1
 8001b00:	43d2      	mvns	r2, r2
 8001b02:	401a      	ands	r2, r3
 8001b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	019b      	lsls	r3, r3, #6
 8001b0a:	22ff      	movs	r2, #255	; 0xff
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	0018      	movs	r0, r3
 8001b14:	2303      	movs	r3, #3
 8001b16:	4003      	ands	r3, r0
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b1c:	481f      	ldr	r0, [pc, #124]	; (8001b9c <__NVIC_SetPriority+0xd4>)
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	430a      	orrs	r2, r1
 8001b28:	33c0      	adds	r3, #192	; 0xc0
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b2e:	e031      	b.n	8001b94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <__NVIC_SetPriority+0xd8>)
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	0019      	movs	r1, r3
 8001b38:	230f      	movs	r3, #15
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	3b08      	subs	r3, #8
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3306      	adds	r3, #6
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	18d3      	adds	r3, r2, r3
 8001b46:	3304      	adds	r3, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	1dfa      	adds	r2, r7, #7
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	0011      	movs	r1, r2
 8001b50:	2203      	movs	r2, #3
 8001b52:	400a      	ands	r2, r1
 8001b54:	00d2      	lsls	r2, r2, #3
 8001b56:	21ff      	movs	r1, #255	; 0xff
 8001b58:	4091      	lsls	r1, r2
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	43d2      	mvns	r2, r2
 8001b5e:	401a      	ands	r2, r3
 8001b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	019b      	lsls	r3, r3, #6
 8001b66:	22ff      	movs	r2, #255	; 0xff
 8001b68:	401a      	ands	r2, r3
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	0018      	movs	r0, r3
 8001b70:	2303      	movs	r3, #3
 8001b72:	4003      	ands	r3, r0
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <__NVIC_SetPriority+0xd8>)
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	001c      	movs	r4, r3
 8001b80:	230f      	movs	r3, #15
 8001b82:	4023      	ands	r3, r4
 8001b84:	3b08      	subs	r3, #8
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	3306      	adds	r3, #6
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	18c3      	adds	r3, r0, r3
 8001b90:	3304      	adds	r3, #4
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b003      	add	sp, #12
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	e000e100 	.word	0xe000e100
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	1e5a      	subs	r2, r3, #1
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	045b      	lsls	r3, r3, #17
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d301      	bcc.n	8001bbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e010      	b.n	8001bde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <SysTick_Config+0x44>)
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	3a01      	subs	r2, #1
 8001bc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	2103      	movs	r1, #3
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7ff ff7c 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x44>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x44>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	1c02      	adds	r2, r0, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	0011      	movs	r1, r2
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff ff5d 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b004      	add	sp, #16
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff ffbf 	bl	8001ba4 <SysTick_Config>
 8001c26:	0003      	movs	r3, r0
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3e:	e14d      	b.n	8001edc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4091      	lsls	r1, r2
 8001c4a:	000a      	movs	r2, r1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d100      	bne.n	8001c58 <HAL_GPIO_Init+0x28>
 8001c56:	e13e      	b.n	8001ed6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d005      	beq.n	8001c70 <HAL_GPIO_Init+0x40>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d130      	bne.n	8001cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	0013      	movs	r3, r2
 8001c80:	43da      	mvns	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	409a      	lsls	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d017      	beq.n	8001d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2203      	movs	r2, #3
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d123      	bne.n	8001d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	58d3      	ldr	r3, [r2, r3]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	409a      	lsls	r2, r3
 8001d34:	0013      	movs	r3, r2
 8001d36:	43da      	mvns	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2107      	movs	r1, #7
 8001d46:	400b      	ands	r3, r1
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	6939      	ldr	r1, [r7, #16]
 8001d60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	43da      	mvns	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2203      	movs	r2, #3
 8001d80:	401a      	ands	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	029b      	lsls	r3, r3, #10
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d100      	bne.n	8001da4 <HAL_GPIO_Init+0x174>
 8001da2:	e098      	b.n	8001ed6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001da4:	4a53      	ldr	r2, [pc, #332]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3318      	adds	r3, #24
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	589b      	ldr	r3, [r3, r2]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2203      	movs	r2, #3
 8001db6:	4013      	ands	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	220f      	movs	r2, #15
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	23a0      	movs	r3, #160	; 0xa0
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x1d6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a48      	ldr	r2, [pc, #288]	; (8001ef8 <HAL_GPIO_Init+0x2c8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x1d2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a47      	ldr	r2, [pc, #284]	; (8001efc <HAL_GPIO_Init+0x2cc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x1ce>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a46      	ldr	r2, [pc, #280]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x1ca>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a45      	ldr	r2, [pc, #276]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x1c6>
 8001df2:	2304      	movs	r3, #4
 8001df4:	e008      	b.n	8001e08 <HAL_GPIO_Init+0x1d8>
 8001df6:	2305      	movs	r3, #5
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x1d8>
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e004      	b.n	8001e08 <HAL_GPIO_Init+0x1d8>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e002      	b.n	8001e08 <HAL_GPIO_Init+0x1d8>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x1d8>
 8001e06:	2300      	movs	r3, #0
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	2103      	movs	r1, #3
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	00d2      	lsls	r2, r2, #3
 8001e10:	4093      	lsls	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e18:	4936      	ldr	r1, [pc, #216]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3318      	adds	r3, #24
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	035b      	lsls	r3, r3, #13
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	039b      	lsls	r3, r3, #14
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001e7c:	2384      	movs	r3, #132	; 0x84
 8001e7e:	58d3      	ldr	r3, [r2, r3]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43da      	mvns	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	4013      	ands	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ea0:	4914      	ldr	r1, [pc, #80]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001ea2:	2284      	movs	r2, #132	; 0x84
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ea8:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	58d3      	ldr	r3, [r2, r3]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	025b      	lsls	r3, r3, #9
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ece:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	40da      	lsrs	r2, r3
 8001ee4:	1e13      	subs	r3, r2, #0
 8001ee6:	d000      	beq.n	8001eea <HAL_GPIO_Init+0x2ba>
 8001ee8:	e6aa      	b.n	8001c40 <HAL_GPIO_Init+0x10>
  }
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b006      	add	sp, #24
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021800 	.word	0x40021800
 8001ef8:	50000400 	.word	0x50000400
 8001efc:	50000800 	.word	0x50000800
 8001f00:	50000c00 	.word	0x50000c00
 8001f04:	50001000 	.word	0x50001000

08001f08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f16:	e0ba      	b.n	800208e <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d100      	bne.n	8001f2c <HAL_GPIO_DeInit+0x24>
 8001f2a:	e0ad      	b.n	8002088 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8001f2c:	4a5d      	ldr	r2, [pc, #372]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3318      	adds	r3, #24
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	589b      	ldr	r3, [r3, r2]
 8001f38:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	220f      	movs	r2, #15
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	23a0      	movs	r3, #160	; 0xa0
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d019      	beq.n	8001f8a <HAL_GPIO_DeInit+0x82>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a53      	ldr	r2, [pc, #332]	; (80020a8 <HAL_GPIO_DeInit+0x1a0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_GPIO_DeInit+0x7e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a52      	ldr	r2, [pc, #328]	; (80020ac <HAL_GPIO_DeInit+0x1a4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00d      	beq.n	8001f82 <HAL_GPIO_DeInit+0x7a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <HAL_GPIO_DeInit+0x1a8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d007      	beq.n	8001f7e <HAL_GPIO_DeInit+0x76>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a50      	ldr	r2, [pc, #320]	; (80020b4 <HAL_GPIO_DeInit+0x1ac>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_GPIO_DeInit+0x72>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e008      	b.n	8001f8c <HAL_GPIO_DeInit+0x84>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_DeInit+0x84>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e004      	b.n	8001f8c <HAL_GPIO_DeInit+0x84>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_DeInit+0x84>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_DeInit+0x84>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	2103      	movs	r1, #3
 8001f90:	400a      	ands	r2, r1
 8001f92:	00d2      	lsls	r2, r2, #3
 8001f94:	4093      	lsls	r3, r2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d136      	bne.n	800200a <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f9c:	4a41      	ldr	r2, [pc, #260]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	58d3      	ldr	r3, [r2, r3]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	43d2      	mvns	r2, r2
 8001fa6:	493f      	ldr	r1, [pc, #252]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8001fae:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001fb0:	2384      	movs	r3, #132	; 0x84
 8001fb2:	58d3      	ldr	r3, [r2, r3]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	43d2      	mvns	r2, r2
 8001fb8:	493a      	ldr	r1, [pc, #232]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2284      	movs	r2, #132	; 0x84
 8001fbe:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001fc0:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001fce:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43d9      	mvns	r1, r3
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001fd8:	400a      	ands	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	0013      	movs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001fec:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	589a      	ldr	r2, [r3, r2]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	4829      	ldr	r0, [pc, #164]	; (80020a4 <HAL_GPIO_DeInit+0x19c>)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	400a      	ands	r2, r1
 8002004:	3318      	adds	r3, #24
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2103      	movs	r1, #3
 8002014:	4099      	lsls	r1, r3
 8002016:	000b      	movs	r3, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	0092      	lsls	r2, r2, #2
 8002028:	58d3      	ldr	r3, [r2, r3]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	2107      	movs	r1, #7
 800202e:	400a      	ands	r2, r1
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	210f      	movs	r1, #15
 8002034:	4091      	lsls	r1, r2
 8002036:	000a      	movs	r2, r1
 8002038:	43d1      	mvns	r1, r2
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	08d2      	lsrs	r2, r2, #3
 800203e:	4019      	ands	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	0092      	lsls	r2, r2, #2
 8002046:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	0052      	lsls	r2, r2, #1
 8002050:	2103      	movs	r1, #3
 8002052:	4091      	lsls	r1, r2
 8002054:	000a      	movs	r2, r1
 8002056:	43d2      	mvns	r2, r2
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2101      	movs	r1, #1
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4091      	lsls	r1, r2
 8002068:	000a      	movs	r2, r1
 800206a:	43d2      	mvns	r2, r2
 800206c:	401a      	ands	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	0052      	lsls	r2, r2, #1
 800207a:	2103      	movs	r1, #3
 800207c:	4091      	lsls	r1, r2
 800207e:	000a      	movs	r2, r1
 8002080:	43d2      	mvns	r2, r2
 8002082:	401a      	ands	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	40da      	lsrs	r2, r3
 8002094:	1e13      	subs	r3, r2, #0
 8002096:	d000      	beq.n	800209a <HAL_GPIO_DeInit+0x192>
 8002098:	e73e      	b.n	8001f18 <HAL_GPIO_DeInit+0x10>
  }
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b006      	add	sp, #24
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021800 	.word	0x40021800
 80020a8:	50000400 	.word	0x50000400
 80020ac:	50000800 	.word	0x50000800
 80020b0:	50000c00 	.word	0x50000c00
 80020b4:	50001000 	.word	0x50001000

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	0008      	movs	r0, r1
 80020c2:	0011      	movs	r1, r2
 80020c4:	1cbb      	adds	r3, r7, #2
 80020c6:	1c02      	adds	r2, r0, #0
 80020c8:	801a      	strh	r2, [r3, #0]
 80020ca:	1c7b      	adds	r3, r7, #1
 80020cc:	1c0a      	adds	r2, r1, #0
 80020ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d0:	1c7b      	adds	r3, r7, #1
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020d8:	1cbb      	adds	r3, r7, #2
 80020da:	881a      	ldrh	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e0:	e003      	b.n	80020ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e2:	1cbb      	adds	r3, r7, #2
 80020e4:	881a      	ldrh	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b002      	add	sp, #8
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e082      	b.n	800220c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2241      	movs	r2, #65	; 0x41
 800210a:	5c9b      	ldrb	r3, [r3, r2]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d107      	bne.n	8002122 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2240      	movs	r2, #64	; 0x40
 8002116:	2100      	movs	r1, #0
 8002118:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f7fe ff21 	bl	8000f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2241      	movs	r2, #65	; 0x41
 8002126:	2124      	movs	r1, #36	; 0x24
 8002128:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	438a      	bics	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4934      	ldr	r1, [pc, #208]	; (8002214 <HAL_I2C_Init+0x120>)
 8002144:	400a      	ands	r2, r1
 8002146:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4931      	ldr	r1, [pc, #196]	; (8002218 <HAL_I2C_Init+0x124>)
 8002154:	400a      	ands	r2, r1
 8002156:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d108      	bne.n	8002172 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2180      	movs	r1, #128	; 0x80
 800216a:	0209      	lsls	r1, r1, #8
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e007      	b.n	8002182 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2184      	movs	r1, #132	; 0x84
 800217c:	0209      	lsls	r1, r1, #8
 800217e:	430a      	orrs	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d104      	bne.n	8002194 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	491f      	ldr	r1, [pc, #124]	; (800221c <HAL_I2C_Init+0x128>)
 80021a0:	430a      	orrs	r2, r1
 80021a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	491a      	ldr	r1, [pc, #104]	; (8002218 <HAL_I2C_Init+0x124>)
 80021b0:	400a      	ands	r2, r1
 80021b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	431a      	orrs	r2, r3
 80021be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69d9      	ldr	r1, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2101      	movs	r1, #1
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2241      	movs	r2, #65	; 0x41
 80021f8:	2120      	movs	r1, #32
 80021fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2242      	movs	r2, #66	; 0x42
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}
 8002214:	f0ffffff 	.word	0xf0ffffff
 8002218:	ffff7fff 	.word	0xffff7fff
 800221c:	02008000 	.word	0x02008000

08002220 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e022      	b.n	8002278 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2241      	movs	r2, #65	; 0x41
 8002236:	2124      	movs	r1, #36	; 0x24
 8002238:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	438a      	bics	r2, r1
 8002248:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	0018      	movs	r0, r3
 800224e:	f7fe feeb 	bl	8001028 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2241      	movs	r2, #65	; 0x41
 800225c:	2100      	movs	r1, #0
 800225e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2242      	movs	r2, #66	; 0x42
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2240      	movs	r2, #64	; 0x40
 8002272:	2100      	movs	r1, #0
 8002274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	000c      	movs	r4, r1
 800228a:	0010      	movs	r0, r2
 800228c:	0019      	movs	r1, r3
 800228e:	230a      	movs	r3, #10
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	1c22      	adds	r2, r4, #0
 8002294:	801a      	strh	r2, [r3, #0]
 8002296:	2308      	movs	r3, #8
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	1c02      	adds	r2, r0, #0
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	1dbb      	adds	r3, r7, #6
 80022a0:	1c0a      	adds	r2, r1, #0
 80022a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2241      	movs	r2, #65	; 0x41
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d000      	beq.n	80022b2 <HAL_I2C_Mem_Write+0x32>
 80022b0:	e10c      	b.n	80024cc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_I2C_Mem_Write+0x42>
 80022b8:	232c      	movs	r3, #44	; 0x2c
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0ff      	b.n	80024ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2240      	movs	r2, #64	; 0x40
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_I2C_Mem_Write+0x5c>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0f8      	b.n	80024ce <HAL_I2C_Mem_Write+0x24e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	2101      	movs	r1, #1
 80022e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022e4:	f7ff fbc2 	bl	8001a6c <HAL_GetTick>
 80022e8:	0003      	movs	r3, r0
 80022ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	0219      	lsls	r1, r3, #8
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2319      	movs	r3, #25
 80022f8:	2201      	movs	r2, #1
 80022fa:	f000 fb0b 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80022fe:	1e03      	subs	r3, r0, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0e3      	b.n	80024ce <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2241      	movs	r2, #65	; 0x41
 800230a:	2121      	movs	r1, #33	; 0x21
 800230c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2242      	movs	r2, #66	; 0x42
 8002312:	2140      	movs	r1, #64	; 0x40
 8002314:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	222c      	movs	r2, #44	; 0x2c
 8002326:	18ba      	adds	r2, r7, r2
 8002328:	8812      	ldrh	r2, [r2, #0]
 800232a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002332:	1dbb      	adds	r3, r7, #6
 8002334:	881c      	ldrh	r4, [r3, #0]
 8002336:	2308      	movs	r3, #8
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	881a      	ldrh	r2, [r3, #0]
 800233c:	230a      	movs	r3, #10
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	8819      	ldrh	r1, [r3, #0]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	0023      	movs	r3, r4
 800234e:	f000 f9f9 	bl	8002744 <I2C_RequestMemoryWrite>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d005      	beq.n	8002362 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2240      	movs	r2, #64	; 0x40
 800235a:	2100      	movs	r1, #0
 800235c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e0b5      	b.n	80024ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2bff      	cmp	r3, #255	; 0xff
 800236a:	d911      	bls.n	8002390 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	b2da      	uxtb	r2, r3
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	045c      	lsls	r4, r3, #17
 800237c:	230a      	movs	r3, #10
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	8819      	ldrh	r1, [r3, #0]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	2300      	movs	r3, #0
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	0023      	movs	r3, r4
 800238a:	f000 fc7d 	bl	8002c88 <I2C_TransferConfig>
 800238e:	e012      	b.n	80023b6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	049c      	lsls	r4, r3, #18
 80023a4:	230a      	movs	r3, #10
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	8819      	ldrh	r1, [r3, #0]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	2300      	movs	r3, #0
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	0023      	movs	r3, r4
 80023b2:	f000 fc69 	bl	8002c88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 fae8 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 80023c2:	1e03      	subs	r3, r0, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e081      	b.n	80024ce <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03a      	beq.n	800247a <HAL_I2C_Mem_Write+0x1fa>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d136      	bne.n	800247a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800240c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	0013      	movs	r3, r2
 8002416:	2200      	movs	r2, #0
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	f000 fa7b 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e053      	b.n	80024ce <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2bff      	cmp	r3, #255	; 0xff
 800242e:	d911      	bls.n	8002454 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	b2da      	uxtb	r2, r3
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	045c      	lsls	r4, r3, #17
 8002440:	230a      	movs	r3, #10
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	8819      	ldrh	r1, [r3, #0]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	2300      	movs	r3, #0
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	0023      	movs	r3, r4
 800244e:	f000 fc1b 	bl	8002c88 <I2C_TransferConfig>
 8002452:	e012      	b.n	800247a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	b2da      	uxtb	r2, r3
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	049c      	lsls	r4, r3, #18
 8002468:	230a      	movs	r3, #10
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	8819      	ldrh	r1, [r3, #0]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	0023      	movs	r3, r4
 8002476:	f000 fc07 	bl	8002c88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d198      	bne.n	80023b6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	0018      	movs	r0, r3
 800248c:	f000 fac0 	bl	8002a10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002490:	1e03      	subs	r3, r0, #0
 8002492:	d001      	beq.n	8002498 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e01a      	b.n	80024ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2220      	movs	r2, #32
 800249e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	490b      	ldr	r1, [pc, #44]	; (80024d8 <HAL_I2C_Mem_Write+0x258>)
 80024ac:	400a      	ands	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2241      	movs	r2, #65	; 0x41
 80024b4:	2120      	movs	r1, #32
 80024b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2242      	movs	r2, #66	; 0x42
 80024bc:	2100      	movs	r1, #0
 80024be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b007      	add	sp, #28
 80024d4:	bd90      	pop	{r4, r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	fe00e800 	.word	0xfe00e800

080024dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	000c      	movs	r4, r1
 80024e6:	0010      	movs	r0, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	230a      	movs	r3, #10
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	1c22      	adds	r2, r4, #0
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	2308      	movs	r3, #8
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	1c02      	adds	r2, r0, #0
 80024f8:	801a      	strh	r2, [r3, #0]
 80024fa:	1dbb      	adds	r3, r7, #6
 80024fc:	1c0a      	adds	r2, r1, #0
 80024fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2241      	movs	r2, #65	; 0x41
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b20      	cmp	r3, #32
 800250a:	d000      	beq.n	800250e <HAL_I2C_Mem_Read+0x32>
 800250c:	e110      	b.n	8002730 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <HAL_I2C_Mem_Read+0x42>
 8002514:	232c      	movs	r3, #44	; 0x2c
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e103      	b.n	8002732 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2240      	movs	r2, #64	; 0x40
 800252e:	5c9b      	ldrb	r3, [r3, r2]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2C_Mem_Read+0x5c>
 8002534:	2302      	movs	r3, #2
 8002536:	e0fc      	b.n	8002732 <HAL_I2C_Mem_Read+0x256>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2240      	movs	r2, #64	; 0x40
 800253c:	2101      	movs	r1, #1
 800253e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002540:	f7ff fa94 	bl	8001a6c <HAL_GetTick>
 8002544:	0003      	movs	r3, r0
 8002546:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	0219      	lsls	r1, r3, #8
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2319      	movs	r3, #25
 8002554:	2201      	movs	r2, #1
 8002556:	f000 f9dd 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0e7      	b.n	8002732 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2241      	movs	r2, #65	; 0x41
 8002566:	2122      	movs	r1, #34	; 0x22
 8002568:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2242      	movs	r2, #66	; 0x42
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	222c      	movs	r2, #44	; 0x2c
 8002582:	18ba      	adds	r2, r7, r2
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800258e:	1dbb      	adds	r3, r7, #6
 8002590:	881c      	ldrh	r4, [r3, #0]
 8002592:	2308      	movs	r3, #8
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	881a      	ldrh	r2, [r3, #0]
 8002598:	230a      	movs	r3, #10
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	8819      	ldrh	r1, [r3, #0]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	0023      	movs	r3, r4
 80025aa:	f000 f92f 	bl	800280c <I2C_RequestMemoryRead>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d005      	beq.n	80025be <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	2100      	movs	r1, #0
 80025b8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0b9      	b.n	8002732 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2bff      	cmp	r3, #255	; 0xff
 80025c6:	d911      	bls.n	80025ec <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	22ff      	movs	r2, #255	; 0xff
 80025cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	045c      	lsls	r4, r3, #17
 80025d8:	230a      	movs	r3, #10
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	8819      	ldrh	r1, [r3, #0]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_I2C_Mem_Read+0x260>)
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	0023      	movs	r3, r4
 80025e6:	f000 fb4f 	bl	8002c88 <I2C_TransferConfig>
 80025ea:	e012      	b.n	8002612 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	049c      	lsls	r4, r3, #18
 8002600:	230a      	movs	r3, #10
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	8819      	ldrh	r1, [r3, #0]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_I2C_Mem_Read+0x260>)
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	0023      	movs	r3, r4
 800260e:	f000 fb3b 	bl	8002c88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	0013      	movs	r3, r2
 800261c:	2200      	movs	r2, #0
 800261e:	2104      	movs	r1, #4
 8002620:	f000 f978 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e082      	b.n	8002732 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d03a      	beq.n	80026de <HAL_I2C_Mem_Read+0x202>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d136      	bne.n	80026de <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	0013      	movs	r3, r2
 800267a:	2200      	movs	r2, #0
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	f000 f949 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e053      	b.n	8002732 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	2bff      	cmp	r3, #255	; 0xff
 8002692:	d911      	bls.n	80026b8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	22ff      	movs	r2, #255	; 0xff
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	045c      	lsls	r4, r3, #17
 80026a4:	230a      	movs	r3, #10
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	8819      	ldrh	r1, [r3, #0]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	2300      	movs	r3, #0
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	0023      	movs	r3, r4
 80026b2:	f000 fae9 	bl	8002c88 <I2C_TransferConfig>
 80026b6:	e012      	b.n	80026de <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	049c      	lsls	r4, r3, #18
 80026cc:	230a      	movs	r3, #10
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	8819      	ldrh	r1, [r3, #0]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	2300      	movs	r3, #0
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	0023      	movs	r3, r4
 80026da:	f000 fad5 	bl	8002c88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d194      	bne.n	8002612 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 f98e 	bl	8002a10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026f4:	1e03      	subs	r3, r0, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e01a      	b.n	8002732 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2220      	movs	r2, #32
 8002702:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	490c      	ldr	r1, [pc, #48]	; (8002740 <HAL_I2C_Mem_Read+0x264>)
 8002710:	400a      	ands	r2, r1
 8002712:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2241      	movs	r2, #65	; 0x41
 8002718:	2120      	movs	r1, #32
 800271a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2242      	movs	r2, #66	; 0x42
 8002720:	2100      	movs	r1, #0
 8002722:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b007      	add	sp, #28
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	80002400 	.word	0x80002400
 8002740:	fe00e800 	.word	0xfe00e800

08002744 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002744:	b5b0      	push	{r4, r5, r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	000c      	movs	r4, r1
 800274e:	0010      	movs	r0, r2
 8002750:	0019      	movs	r1, r3
 8002752:	250a      	movs	r5, #10
 8002754:	197b      	adds	r3, r7, r5
 8002756:	1c22      	adds	r2, r4, #0
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	2308      	movs	r3, #8
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	1c02      	adds	r2, r0, #0
 8002760:	801a      	strh	r2, [r3, #0]
 8002762:	1dbb      	adds	r3, r7, #6
 8002764:	1c0a      	adds	r2, r1, #0
 8002766:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	045c      	lsls	r4, r3, #17
 8002772:	197b      	adds	r3, r7, r5
 8002774:	8819      	ldrh	r1, [r3, #0]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <I2C_RequestMemoryWrite+0xc4>)
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	0023      	movs	r3, r4
 800277e:	f000 fa83 	bl	8002c88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	6a39      	ldr	r1, [r7, #32]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 f902 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 800278e:	1e03      	subs	r3, r0, #0
 8002790:	d001      	beq.n	8002796 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e033      	b.n	80027fe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002796:	1dbb      	adds	r3, r7, #6
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800279e:	2308      	movs	r3, #8
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
 80027ac:	e019      	b.n	80027e2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027ae:	2308      	movs	r3, #8
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c2:	6a39      	ldr	r1, [r7, #32]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f8e3 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e014      	b.n	80027fe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d4:	2308      	movs	r3, #8
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027e2:	6a3a      	ldr	r2, [r7, #32]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	0013      	movs	r3, r2
 80027ec:	2200      	movs	r2, #0
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	f000 f890 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d001      	beq.n	80027fc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bdb0      	pop	{r4, r5, r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	80002000 	.word	0x80002000

0800280c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800280c:	b5b0      	push	{r4, r5, r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	000c      	movs	r4, r1
 8002816:	0010      	movs	r0, r2
 8002818:	0019      	movs	r1, r3
 800281a:	250a      	movs	r5, #10
 800281c:	197b      	adds	r3, r7, r5
 800281e:	1c22      	adds	r2, r4, #0
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	2308      	movs	r3, #8
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	1c02      	adds	r2, r0, #0
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	1dbb      	adds	r3, r7, #6
 800282c:	1c0a      	adds	r2, r1, #0
 800282e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002830:	1dbb      	adds	r3, r7, #6
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	197b      	adds	r3, r7, r5
 8002838:	8819      	ldrh	r1, [r3, #0]
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	4b23      	ldr	r3, [pc, #140]	; (80028cc <I2C_RequestMemoryRead+0xc0>)
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2300      	movs	r3, #0
 8002842:	f000 fa21 	bl	8002c88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	6a39      	ldr	r1, [r7, #32]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	0018      	movs	r0, r3
 800284e:	f000 f8a0 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 8002852:	1e03      	subs	r3, r0, #0
 8002854:	d001      	beq.n	800285a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e033      	b.n	80028c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800285a:	1dbb      	adds	r3, r7, #6
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d107      	bne.n	8002872 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002862:	2308      	movs	r3, #8
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
 8002870:	e019      	b.n	80028a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002872:	2308      	movs	r3, #8
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	b29b      	uxth	r3, r3
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	6a39      	ldr	r1, [r7, #32]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 f881 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 8002890:	1e03      	subs	r3, r0, #0
 8002892:	d001      	beq.n	8002898 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e014      	b.n	80028c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002898:	2308      	movs	r3, #8
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028a6:	6a3a      	ldr	r2, [r7, #32]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	0013      	movs	r3, r2
 80028b0:	2200      	movs	r2, #0
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	f000 f82e 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d001      	beq.n	80028c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	80002000 	.word	0x80002000

080028d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d103      	bne.n	80028ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2201      	movs	r2, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d007      	beq.n	800290c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	619a      	str	r2, [r3, #24]
  }
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	1dfb      	adds	r3, r7, #7
 8002922:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002924:	e021      	b.n	800296a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	d01e      	beq.n	800296a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292c:	f7ff f89e 	bl	8001a6c <HAL_GetTick>
 8002930:	0002      	movs	r2, r0
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d302      	bcc.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d113      	bne.n	800296a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	2220      	movs	r2, #32
 8002948:	431a      	orrs	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2241      	movs	r2, #65	; 0x41
 8002952:	2120      	movs	r1, #32
 8002954:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2242      	movs	r2, #66	; 0x42
 800295a:	2100      	movs	r1, #0
 800295c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	2100      	movs	r1, #0
 8002964:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	425a      	negs	r2, r3
 800297a:	4153      	adcs	r3, r2
 800297c:	b2db      	uxtb	r3, r3
 800297e:	001a      	movs	r2, r3
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d0ce      	beq.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b004      	add	sp, #16
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800299e:	e02b      	b.n	80029f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 f86e 	bl	8002a88 <I2C_IsErrorOccurred>
 80029ac:	1e03      	subs	r3, r0, #0
 80029ae:	d001      	beq.n	80029b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e029      	b.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3301      	adds	r3, #1
 80029b8:	d01e      	beq.n	80029f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7ff f857 	bl	8001a6c <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d113      	bne.n	80029f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	2220      	movs	r2, #32
 80029d6:	431a      	orrs	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2241      	movs	r2, #65	; 0x41
 80029e0:	2120      	movs	r1, #32
 80029e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2242      	movs	r2, #66	; 0x42
 80029e8:	2100      	movs	r1, #0
 80029ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2240      	movs	r2, #64	; 0x40
 80029f0:	2100      	movs	r1, #0
 80029f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e007      	b.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2202      	movs	r2, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d1cc      	bne.n	80029a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a1c:	e028      	b.n	8002a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 f82f 	bl	8002a88 <I2C_IsErrorOccurred>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e026      	b.n	8002a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7ff f81b 	bl	8001a6c <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d113      	bne.n	8002a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2241      	movs	r2, #65	; 0x41
 8002a58:	2120      	movs	r1, #32
 8002a5a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2242      	movs	r2, #66	; 0x42
 8002a60:	2100      	movs	r1, #0
 8002a62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2240      	movs	r2, #64	; 0x40
 8002a68:	2100      	movs	r1, #0
 8002a6a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e007      	b.n	8002a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2220      	movs	r2, #32
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d1cf      	bne.n	8002a1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b004      	add	sp, #16
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b08b      	sub	sp, #44	; 0x2c
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2327      	movs	r3, #39	; 0x27
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d100      	bne.n	8002ab6 <I2C_IsErrorOccurred+0x2e>
 8002ab4:	e082      	b.n	8002bbc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2210      	movs	r2, #16
 8002abc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002abe:	e060      	b.n	8002b82 <I2C_IsErrorOccurred+0xfa>
 8002ac0:	2427      	movs	r4, #39	; 0x27
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	193a      	adds	r2, r7, r4
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3301      	adds	r3, #1
 8002ace:	d058      	beq.n	8002b82 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ad0:	f7fe ffcc 	bl	8001a6c <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d306      	bcc.n	8002aee <I2C_IsErrorOccurred+0x66>
 8002ae0:	193b      	adds	r3, r7, r4
 8002ae2:	193a      	adds	r2, r7, r4
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d149      	bne.n	8002b82 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	01db      	lsls	r3, r3, #7
 8002af8:	4013      	ands	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002afc:	2013      	movs	r0, #19
 8002afe:	183b      	adds	r3, r7, r0
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	2142      	movs	r1, #66	; 0x42
 8002b04:	5c52      	ldrb	r2, [r2, r1]
 8002b06:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	401a      	ands	r2, r3
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d126      	bne.n	8002b6a <I2C_IsErrorOccurred+0xe2>
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	01db      	lsls	r3, r3, #7
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d021      	beq.n	8002b6a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002b26:	183b      	adds	r3, r7, r0
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d01d      	beq.n	8002b6a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	01c9      	lsls	r1, r1, #7
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b40:	f7fe ff94 	bl	8001a6c <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b48:	e00f      	b.n	8002b6a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b4a:	f7fe ff8f 	bl	8001a6c <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b19      	cmp	r3, #25
 8002b56:	d908      	bls.n	8002b6a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b60:	2327      	movs	r3, #39	; 0x27
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]

              break;
 8002b68:	e00b      	b.n	8002b82 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2220      	movs	r2, #32
 8002b72:	4013      	ands	r3, r2
 8002b74:	2127      	movs	r1, #39	; 0x27
 8002b76:	187a      	adds	r2, r7, r1
 8002b78:	1879      	adds	r1, r7, r1
 8002b7a:	7809      	ldrb	r1, [r1, #0]
 8002b7c:	7011      	strb	r1, [r2, #0]
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d1e3      	bne.n	8002b4a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d004      	beq.n	8002b9a <I2C_IsErrorOccurred+0x112>
 8002b90:	2327      	movs	r3, #39	; 0x27
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d092      	beq.n	8002ac0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b9a:	2327      	movs	r3, #39	; 0x27
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d103      	bne.n	8002bac <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bb4:	2327      	movs	r3, #39	; 0x27
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d00c      	beq.n	8002be8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	0052      	lsls	r2, r2, #1
 8002bde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002be0:	2327      	movs	r3, #39	; 0x27
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d00c      	beq.n	8002c0c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	00d2      	lsls	r2, r2, #3
 8002c02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c04:	2327      	movs	r3, #39	; 0x27
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	d00c      	beq.n	8002c30 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	0092      	lsls	r2, r2, #2
 8002c26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c28:	2327      	movs	r3, #39	; 0x27
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c30:	2327      	movs	r3, #39	; 0x27
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01d      	beq.n	8002c76 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7ff fe47 	bl	80028d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	490d      	ldr	r1, [pc, #52]	; (8002c84 <I2C_IsErrorOccurred+0x1fc>)
 8002c4e:	400a      	ands	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2241      	movs	r2, #65	; 0x41
 8002c62:	2120      	movs	r1, #32
 8002c64:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2242      	movs	r2, #66	; 0x42
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2240      	movs	r2, #64	; 0x40
 8002c72:	2100      	movs	r1, #0
 8002c74:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002c76:	2327      	movs	r3, #39	; 0x27
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	781b      	ldrb	r3, [r3, #0]
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b00b      	add	sp, #44	; 0x2c
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	fe00e800 	.word	0xfe00e800

08002c88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	0008      	movs	r0, r1
 8002c92:	0011      	movs	r1, r2
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	240a      	movs	r4, #10
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	1c02      	adds	r2, r0, #0
 8002c9c:	801a      	strh	r2, [r3, #0]
 8002c9e:	2009      	movs	r0, #9
 8002ca0:	183b      	adds	r3, r7, r0
 8002ca2:	1c0a      	adds	r2, r1, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ca6:	193b      	adds	r3, r7, r4
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	059b      	lsls	r3, r3, #22
 8002cac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cae:	183b      	adds	r3, r7, r0
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	0419      	lsls	r1, r3, #16
 8002cb4:	23ff      	movs	r3, #255	; 0xff
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd2:	0d51      	lsrs	r1, r2, #21
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	00d2      	lsls	r2, r2, #3
 8002cd8:	400a      	ands	r2, r1
 8002cda:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <I2C_TransferConfig+0x70>)
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	43d2      	mvns	r2, r2
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b007      	add	sp, #28
 8002cf4:	bd90      	pop	{r4, r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	03ff63ff 	.word	0x03ff63ff

08002cfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2241      	movs	r2, #65	; 0x41
 8002d0a:	5c9b      	ldrb	r3, [r3, r2]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d138      	bne.n	8002d84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2240      	movs	r2, #64	; 0x40
 8002d16:	5c9b      	ldrb	r3, [r3, r2]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e032      	b.n	8002d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2240      	movs	r2, #64	; 0x40
 8002d24:	2101      	movs	r1, #1
 8002d26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2241      	movs	r2, #65	; 0x41
 8002d2c:	2124      	movs	r1, #36	; 0x24
 8002d2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4911      	ldr	r1, [pc, #68]	; (8002d90 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2241      	movs	r2, #65	; 0x41
 8002d74:	2120      	movs	r1, #32
 8002d76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	ffffefff 	.word	0xffffefff

08002d94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2241      	movs	r2, #65	; 0x41
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d139      	bne.n	8002e1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2240      	movs	r2, #64	; 0x40
 8002dae:	5c9b      	ldrb	r3, [r3, r2]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e033      	b.n	8002e20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2241      	movs	r2, #65	; 0x41
 8002dc4:	2124      	movs	r1, #36	; 0x24
 8002dc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2241      	movs	r2, #65	; 0x41
 8002e0e:	2120      	movs	r1, #32
 8002e10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2240      	movs	r2, #64	; 0x40
 8002e16:	2100      	movs	r1, #0
 8002e18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
  }
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b004      	add	sp, #16
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	fffff0ff 	.word	0xfffff0ff

08002e2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d11f      	bne.n	8002e90 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	0013      	movs	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	189b      	adds	r3, r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4912      	ldr	r1, [pc, #72]	; (8002ea8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7fd f950 	bl	8000104 <__udivsi3>
 8002e64:	0003      	movs	r3, r0
 8002e66:	3301      	adds	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e6a:	e008      	b.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e001      	b.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e009      	b.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	401a      	ands	r2, r3
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d0ed      	beq.n	8002e6c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b004      	add	sp, #16
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	fffff9ff 	.word	0xfffff9ff
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	000f4240 	.word	0x000f4240

08002eac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	23e0      	movs	r3, #224	; 0xe0
 8002eb6:	01db      	lsls	r3, r3, #7
 8002eb8:	4013      	ands	r3, r2
}
 8002eba:	0018      	movs	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f000 fb50 	bl	8003578 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d100      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x20>
 8002ee2:	e07c      	b.n	8002fde <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee4:	4bc3      	ldr	r3, [pc, #780]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2238      	movs	r2, #56	; 0x38
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eee:	4bc1      	ldr	r3, [pc, #772]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_OscConfig+0x40>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d002      	beq.n	8002f0a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d10b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0a:	4bba      	ldr	r3, [pc, #744]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	4013      	ands	r3, r2
 8002f14:	d062      	beq.n	8002fdc <HAL_RCC_OscConfig+0x118>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d15e      	bne.n	8002fdc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e32a      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	025b      	lsls	r3, r3, #9
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_OscConfig+0x7a>
 8002f2e:	4bb1      	ldr	r3, [pc, #708]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	4bb0      	ldr	r3, [pc, #704]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	0249      	lsls	r1, r1, #9
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e020      	b.n	8002f80 <HAL_RCC_OscConfig+0xbc>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	23a0      	movs	r3, #160	; 0xa0
 8002f44:	02db      	lsls	r3, r3, #11
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d10e      	bne.n	8002f68 <HAL_RCC_OscConfig+0xa4>
 8002f4a:	4baa      	ldr	r3, [pc, #680]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4ba9      	ldr	r3, [pc, #676]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	02c9      	lsls	r1, r1, #11
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	4ba6      	ldr	r3, [pc, #664]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4ba5      	ldr	r3, [pc, #660]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	0249      	lsls	r1, r1, #9
 8002f62:	430a      	orrs	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xbc>
 8002f68:	4ba2      	ldr	r3, [pc, #648]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4ba1      	ldr	r3, [pc, #644]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f6e:	49a2      	ldr	r1, [pc, #648]	; (80031f8 <HAL_RCC_OscConfig+0x334>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	4b9f      	ldr	r3, [pc, #636]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b9e      	ldr	r3, [pc, #632]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002f7a:	49a0      	ldr	r1, [pc, #640]	; (80031fc <HAL_RCC_OscConfig+0x338>)
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d014      	beq.n	8002fb2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fd70 	bl	8001a6c <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f92:	f7fe fd6b 	bl	8001a6c <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b64      	cmp	r3, #100	; 0x64
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e2e9      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa4:	4b93      	ldr	r3, [pc, #588]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	029b      	lsls	r3, r3, #10
 8002fac:	4013      	ands	r3, r2
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0xce>
 8002fb0:	e015      	b.n	8002fde <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fd5b 	bl	8001a6c <HAL_GetTick>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fd56 	bl	8001a6c <HAL_GetTick>
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e2d4      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fce:	4b89      	ldr	r3, [pc, #548]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	029b      	lsls	r3, r3, #10
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0xf8>
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d100      	bne.n	8002fea <HAL_RCC_OscConfig+0x126>
 8002fe8:	e099      	b.n	800311e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fea:	4b82      	ldr	r3, [pc, #520]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2238      	movs	r2, #56	; 0x38
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff4:	4b7f      	ldr	r3, [pc, #508]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b10      	cmp	r3, #16
 8003002:	d102      	bne.n	800300a <HAL_RCC_OscConfig+0x146>
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d002      	beq.n	8003010 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d135      	bne.n	800307c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003010:	4b78      	ldr	r3, [pc, #480]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4013      	ands	r3, r2
 800301a:	d005      	beq.n	8003028 <HAL_RCC_OscConfig+0x164>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e2a7      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003028:	4b72      	ldr	r3, [pc, #456]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a74      	ldr	r2, [pc, #464]	; (8003200 <HAL_RCC_OscConfig+0x33c>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	021a      	lsls	r2, r3, #8
 8003038:	4b6e      	ldr	r3, [pc, #440]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d112      	bne.n	800306a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003044:	4b6b      	ldr	r3, [pc, #428]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <HAL_RCC_OscConfig+0x340>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	4b68      	ldr	r3, [pc, #416]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003058:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0adb      	lsrs	r3, r3, #11
 800305e:	2207      	movs	r2, #7
 8003060:	4013      	ands	r3, r2
 8003062:	4a69      	ldr	r2, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x344>)
 8003064:	40da      	lsrs	r2, r3
 8003066:	4b69      	ldr	r3, [pc, #420]	; (800320c <HAL_RCC_OscConfig+0x348>)
 8003068:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800306a:	4b69      	ldr	r3, [pc, #420]	; (8003210 <HAL_RCC_OscConfig+0x34c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	0018      	movs	r0, r3
 8003070:	f7fe fca0 	bl	80019b4 <HAL_InitTick>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d051      	beq.n	800311c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e27d      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d030      	beq.n	80030e6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003084:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a5e      	ldr	r2, [pc, #376]	; (8003204 <HAL_RCC_OscConfig+0x340>)
 800308a:	4013      	ands	r3, r2
 800308c:	0019      	movs	r1, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	4b58      	ldr	r3, [pc, #352]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b56      	ldr	r3, [pc, #344]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	0049      	lsls	r1, r1, #1
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fe fce1 	bl	8001a6c <HAL_GetTick>
 80030aa:	0003      	movs	r3, r0
 80030ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fe fcdc 	bl	8001a6c <HAL_GetTick>
 80030b4:	0002      	movs	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e25a      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c2:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4013      	ands	r3, r2
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b49      	ldr	r3, [pc, #292]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a4b      	ldr	r2, [pc, #300]	; (8003200 <HAL_RCC_OscConfig+0x33c>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	021a      	lsls	r2, r3, #8
 80030de:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	e01b      	b.n	800311e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b42      	ldr	r3, [pc, #264]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 80030ec:	4949      	ldr	r1, [pc, #292]	; (8003214 <HAL_RCC_OscConfig+0x350>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fcbb 	bl	8001a6c <HAL_GetTick>
 80030f6:	0003      	movs	r3, r0
 80030f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fe fcb6 	bl	8001a6c <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e234      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310e:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4013      	ands	r3, r2
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x238>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800311c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2208      	movs	r2, #8
 8003124:	4013      	ands	r3, r2
 8003126:	d047      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003128:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2238      	movs	r2, #56	; 0x38
 800312e:	4013      	ands	r3, r2
 8003130:	2b18      	cmp	r3, #24
 8003132:	d10a      	bne.n	800314a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003138:	2202      	movs	r2, #2
 800313a:	4013      	ands	r3, r2
 800313c:	d03c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2f4>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d138      	bne.n	80031b8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e216      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d019      	beq.n	8003186 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003152:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003154:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003156:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003158:	2101      	movs	r1, #1
 800315a:	430a      	orrs	r2, r1
 800315c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe fc85 	bl	8001a6c <HAL_GetTick>
 8003162:	0003      	movs	r3, r0
 8003164:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003168:	f7fe fc80 	bl	8001a6c <HAL_GetTick>
 800316c:	0002      	movs	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1fe      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 800317c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317e:	2202      	movs	r2, #2
 8003180:	4013      	ands	r3, r2
 8003182:	d0f1      	beq.n	8003168 <HAL_RCC_OscConfig+0x2a4>
 8003184:	e018      	b.n	80031b8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 8003188:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800318a:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 800318c:	2101      	movs	r1, #1
 800318e:	438a      	bics	r2, r1
 8003190:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe fc6b 	bl	8001a6c <HAL_GetTick>
 8003196:	0003      	movs	r3, r0
 8003198:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319c:	f7fe fc66 	bl	8001a6c <HAL_GetTick>
 80031a0:	0002      	movs	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1e4      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ae:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	2202      	movs	r2, #2
 80031b4:	4013      	ands	r3, r2
 80031b6:	d1f1      	bne.n	800319c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2204      	movs	r2, #4
 80031be:	4013      	ands	r3, r2
 80031c0:	d100      	bne.n	80031c4 <HAL_RCC_OscConfig+0x300>
 80031c2:	e0c7      	b.n	8003354 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c4:	231f      	movs	r3, #31
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2238      	movs	r2, #56	; 0x38
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d11f      	bne.n	8003218 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_RCC_OscConfig+0x330>)
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	2202      	movs	r2, #2
 80031de:	4013      	ands	r3, r2
 80031e0:	d100      	bne.n	80031e4 <HAL_RCC_OscConfig+0x320>
 80031e2:	e0b7      	b.n	8003354 <HAL_RCC_OscConfig+0x490>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d000      	beq.n	80031ee <HAL_RCC_OscConfig+0x32a>
 80031ec:	e0b2      	b.n	8003354 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1c2      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	40021000 	.word	0x40021000
 80031f8:	fffeffff 	.word	0xfffeffff
 80031fc:	fffbffff 	.word	0xfffbffff
 8003200:	ffff80ff 	.word	0xffff80ff
 8003204:	ffffc7ff 	.word	0xffffc7ff
 8003208:	00f42400 	.word	0x00f42400
 800320c:	20000000 	.word	0x20000000
 8003210:	20000004 	.word	0x20000004
 8003214:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003218:	4bb5      	ldr	r3, [pc, #724]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800321a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	055b      	lsls	r3, r3, #21
 8003220:	4013      	ands	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_RCC_OscConfig+0x364>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x366>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d011      	beq.n	8003252 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4bb0      	ldr	r3, [pc, #704]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 8003230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003232:	4baf      	ldr	r3, [pc, #700]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	0549      	lsls	r1, r1, #21
 8003238:	430a      	orrs	r2, r1
 800323a:	63da      	str	r2, [r3, #60]	; 0x3c
 800323c:	4bac      	ldr	r3, [pc, #688]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800323e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	055b      	lsls	r3, r3, #21
 8003244:	4013      	ands	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800324a:	231f      	movs	r3, #31
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003252:	4ba8      	ldr	r3, [pc, #672]	; (80034f4 <HAL_RCC_OscConfig+0x630>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4013      	ands	r3, r2
 800325c:	d11a      	bne.n	8003294 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325e:	4ba5      	ldr	r3, [pc, #660]	; (80034f4 <HAL_RCC_OscConfig+0x630>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4ba4      	ldr	r3, [pc, #656]	; (80034f4 <HAL_RCC_OscConfig+0x630>)
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0049      	lsls	r1, r1, #1
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800326c:	f7fe fbfe 	bl	8001a6c <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fe fbf9 	bl	8001a6c <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e177      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003288:	4b9a      	ldr	r3, [pc, #616]	; (80034f4 <HAL_RCC_OscConfig+0x630>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4013      	ands	r3, r2
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x3e6>
 800329c:	4b94      	ldr	r3, [pc, #592]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800329e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032a0:	4b93      	ldr	r3, [pc, #588]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80032a2:	2101      	movs	r1, #1
 80032a4:	430a      	orrs	r2, r1
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80032a8:	e01c      	b.n	80032e4 <HAL_RCC_OscConfig+0x420>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x408>
 80032b2:	4b8f      	ldr	r3, [pc, #572]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80032b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032b6:	4b8e      	ldr	r3, [pc, #568]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80032b8:	2104      	movs	r1, #4
 80032ba:	430a      	orrs	r2, r1
 80032bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80032be:	4b8c      	ldr	r3, [pc, #560]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80032c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032c2:	4b8b      	ldr	r3, [pc, #556]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0x420>
 80032cc:	4b88      	ldr	r3, [pc, #544]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80032ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032d0:	4b87      	ldr	r3, [pc, #540]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	438a      	bics	r2, r1
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d8:	4b85      	ldr	r3, [pc, #532]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80032da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032dc:	4b84      	ldr	r3, [pc, #528]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80032de:	2104      	movs	r1, #4
 80032e0:	438a      	bics	r2, r1
 80032e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d014      	beq.n	8003316 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe fbbe 	bl	8001a6c <HAL_GetTick>
 80032f0:	0003      	movs	r3, r0
 80032f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f4:	e009      	b.n	800330a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe fbb9 	bl	8001a6c <HAL_GetTick>
 80032fa:	0002      	movs	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	4a7d      	ldr	r2, [pc, #500]	; (80034f8 <HAL_RCC_OscConfig+0x634>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e136      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330a:	4b79      	ldr	r3, [pc, #484]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x432>
 8003314:	e013      	b.n	800333e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fe fba9 	bl	8001a6c <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800331e:	e009      	b.n	8003334 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe fba4 	bl	8001a6c <HAL_GetTick>
 8003324:	0002      	movs	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	4a73      	ldr	r2, [pc, #460]	; (80034f8 <HAL_RCC_OscConfig+0x634>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e121      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003334:	4b6e      	ldr	r3, [pc, #440]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2202      	movs	r2, #2
 800333a:	4013      	ands	r3, r2
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800333e:	231f      	movs	r3, #31
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003348:	4b69      	ldr	r3, [pc, #420]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800334a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800334e:	496b      	ldr	r1, [pc, #428]	; (80034fc <HAL_RCC_OscConfig+0x638>)
 8003350:	400a      	ands	r2, r1
 8003352:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2220      	movs	r2, #32
 800335a:	4013      	ands	r3, r2
 800335c:	d039      	beq.n	80033d2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01b      	beq.n	800339e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003366:	4b62      	ldr	r3, [pc, #392]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	03c9      	lsls	r1, r1, #15
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fe fb7a 	bl	8001a6c <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800337e:	f7fe fb75 	bl	8001a6c <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e0f3      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003390:	4b57      	ldr	r3, [pc, #348]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	041b      	lsls	r3, r3, #16
 8003398:	4013      	ands	r3, r2
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x4ba>
 800339c:	e019      	b.n	80033d2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800339e:	4b54      	ldr	r3, [pc, #336]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80033a4:	4956      	ldr	r1, [pc, #344]	; (8003500 <HAL_RCC_OscConfig+0x63c>)
 80033a6:	400a      	ands	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe fb5f 	bl	8001a6c <HAL_GetTick>
 80033ae:	0003      	movs	r3, r0
 80033b0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b4:	f7fe fb5a 	bl	8001a6c <HAL_GetTick>
 80033b8:	0002      	movs	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0d8      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80033c6:	4b4a      	ldr	r3, [pc, #296]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	4013      	ands	r3, r2
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d100      	bne.n	80033dc <HAL_RCC_OscConfig+0x518>
 80033da:	e0cc      	b.n	8003576 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033dc:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2238      	movs	r2, #56	; 0x38
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d100      	bne.n	80033ea <HAL_RCC_OscConfig+0x526>
 80033e8:	e07b      	b.n	80034e2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d156      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80033f8:	4942      	ldr	r1, [pc, #264]	; (8003504 <HAL_RCC_OscConfig+0x640>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fe fb35 	bl	8001a6c <HAL_GetTick>
 8003402:	0003      	movs	r3, r0
 8003404:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe fb30 	bl	8001a6c <HAL_GetTick>
 800340c:	0002      	movs	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0ae      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341a:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	049b      	lsls	r3, r3, #18
 8003422:	4013      	ands	r3, r2
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003426:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	4a37      	ldr	r2, [pc, #220]	; (8003508 <HAL_RCC_OscConfig+0x644>)
 800342c:	4013      	ands	r3, r2
 800342e:	0019      	movs	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	431a      	orrs	r2, r3
 8003454:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 8003456:	430a      	orrs	r2, r1
 8003458:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 8003460:	2180      	movs	r1, #128	; 0x80
 8003462:	0449      	lsls	r1, r1, #17
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	0549      	lsls	r1, r1, #21
 8003472:	430a      	orrs	r2, r1
 8003474:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe faf9 	bl	8001a6c <HAL_GetTick>
 800347a:	0003      	movs	r3, r0
 800347c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003480:	f7fe faf4 	bl	8001a6c <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e072      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003492:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	049b      	lsls	r3, r3, #18
 800349a:	4013      	ands	r3, r2
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x5bc>
 800349e:	e06a      	b.n	8003576 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80034a6:	4917      	ldr	r1, [pc, #92]	; (8003504 <HAL_RCC_OscConfig+0x640>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe fade 	bl	8001a6c <HAL_GetTick>
 80034b0:	0003      	movs	r3, r0
 80034b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe fad9 	bl	8001a6c <HAL_GetTick>
 80034ba:	0002      	movs	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e057      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	049b      	lsls	r3, r3, #18
 80034d0:	4013      	ands	r3, r2
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_OscConfig+0x62c>)
 80034da:	490c      	ldr	r1, [pc, #48]	; (800350c <HAL_RCC_OscConfig+0x648>)
 80034dc:	400a      	ands	r2, r1
 80034de:	60da      	str	r2, [r3, #12]
 80034e0:	e049      	b.n	8003576 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d112      	bne.n	8003510 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e044      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
 80034f8:	00001388 	.word	0x00001388
 80034fc:	efffffff 	.word	0xefffffff
 8003500:	ffbfffff 	.word	0xffbfffff
 8003504:	feffffff 	.word	0xfeffffff
 8003508:	11c1808c 	.word	0x11c1808c
 800350c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCC_OscConfig+0x6bc>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2203      	movs	r2, #3
 800351a:	401a      	ands	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	429a      	cmp	r2, r3
 8003522:	d126      	bne.n	8003572 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2270      	movs	r2, #112	; 0x70
 8003528:	401a      	ands	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d11f      	bne.n	8003572 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	23fe      	movs	r3, #254	; 0xfe
 8003536:	01db      	lsls	r3, r3, #7
 8003538:	401a      	ands	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d116      	bne.n	8003572 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	23f8      	movs	r3, #248	; 0xf8
 8003548:	039b      	lsls	r3, r3, #14
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d10e      	bne.n	8003572 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	23e0      	movs	r3, #224	; 0xe0
 8003558:	051b      	lsls	r3, r3, #20
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	0f5b      	lsrs	r3, r3, #29
 8003568:	075a      	lsls	r2, r3, #29
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b008      	add	sp, #32
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0e9      	b.n	800376c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b76      	ldr	r3, [pc, #472]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2207      	movs	r2, #7
 800359e:	4013      	ands	r3, r2
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d91e      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b73      	ldr	r3, [pc, #460]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2207      	movs	r2, #7
 80035ac:	4393      	bics	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035b8:	f7fe fa58 	bl	8001a6c <HAL_GetTick>
 80035bc:	0003      	movs	r3, r0
 80035be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035c0:	e009      	b.n	80035d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c2:	f7fe fa53 	bl	8001a6c <HAL_GetTick>
 80035c6:	0002      	movs	r2, r0
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	4a6a      	ldr	r2, [pc, #424]	; (8003778 <HAL_RCC_ClockConfig+0x1f4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0ca      	b.n	800376c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035d6:	4b67      	ldr	r3, [pc, #412]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2207      	movs	r2, #7
 80035dc:	4013      	ands	r3, r2
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1ee      	bne.n	80035c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2202      	movs	r2, #2
 80035ea:	4013      	ands	r3, r2
 80035ec:	d015      	beq.n	800361a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2204      	movs	r2, #4
 80035f4:	4013      	ands	r3, r2
 80035f6:	d006      	beq.n	8003606 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035f8:	4b60      	ldr	r3, [pc, #384]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	4b5f      	ldr	r3, [pc, #380]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 80035fe:	21e0      	movs	r1, #224	; 0xe0
 8003600:	01c9      	lsls	r1, r1, #7
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003606:	4b5d      	ldr	r3, [pc, #372]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4a5d      	ldr	r2, [pc, #372]	; (8003780 <HAL_RCC_ClockConfig+0x1fc>)
 800360c:	4013      	ands	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	4013      	ands	r3, r2
 8003622:	d057      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d107      	bne.n	800363c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	029b      	lsls	r3, r3, #10
 8003634:	4013      	ands	r3, r2
 8003636:	d12b      	bne.n	8003690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e097      	b.n	800376c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d107      	bne.n	8003654 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003644:	4b4d      	ldr	r3, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	049b      	lsls	r3, r3, #18
 800364c:	4013      	ands	r3, r2
 800364e:	d11f      	bne.n	8003690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e08b      	b.n	800376c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4013      	ands	r3, r2
 8003666:	d113      	bne.n	8003690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e07f      	b.n	800376c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d106      	bne.n	8003682 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003674:	4b41      	ldr	r3, [pc, #260]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 8003676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003678:	2202      	movs	r2, #2
 800367a:	4013      	ands	r3, r2
 800367c:	d108      	bne.n	8003690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e074      	b.n	800376c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003682:	4b3e      	ldr	r3, [pc, #248]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2202      	movs	r2, #2
 8003688:	4013      	ands	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e06d      	b.n	800376c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003690:	4b3a      	ldr	r3, [pc, #232]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2207      	movs	r2, #7
 8003696:	4393      	bics	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 80036a0:	430a      	orrs	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a4:	f7fe f9e2 	bl	8001a6c <HAL_GetTick>
 80036a8:	0003      	movs	r3, r0
 80036aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ac:	e009      	b.n	80036c2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ae:	f7fe f9dd 	bl	8001a6c <HAL_GetTick>
 80036b2:	0002      	movs	r2, r0
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <HAL_RCC_ClockConfig+0x1f4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e054      	b.n	800376c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2238      	movs	r2, #56	; 0x38
 80036c8:	401a      	ands	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1ec      	bne.n	80036ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d4:	4b27      	ldr	r3, [pc, #156]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2207      	movs	r2, #7
 80036da:	4013      	ands	r3, r2
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d21e      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2207      	movs	r2, #7
 80036e8:	4393      	bics	r3, r2
 80036ea:	0019      	movs	r1, r3
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036f4:	f7fe f9ba 	bl	8001a6c <HAL_GetTick>
 80036f8:	0003      	movs	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036fc:	e009      	b.n	8003712 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fe:	f7fe f9b5 	bl	8001a6c <HAL_GetTick>
 8003702:	0002      	movs	r2, r0
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <HAL_RCC_ClockConfig+0x1f4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e02c      	b.n	800376c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2207      	movs	r2, #7
 8003718:	4013      	ands	r3, r2
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d1ee      	bne.n	80036fe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2204      	movs	r2, #4
 8003726:	4013      	ands	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	4a15      	ldr	r2, [pc, #84]	; (8003784 <HAL_RCC_ClockConfig+0x200>)
 8003730:	4013      	ands	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800373e:	f000 f829 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003742:	0001      	movs	r1, r0
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	220f      	movs	r2, #15
 800374c:	401a      	ands	r2, r3
 800374e:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <HAL_RCC_ClockConfig+0x204>)
 8003750:	0092      	lsls	r2, r2, #2
 8003752:	58d3      	ldr	r3, [r2, r3]
 8003754:	221f      	movs	r2, #31
 8003756:	4013      	ands	r3, r2
 8003758:	000a      	movs	r2, r1
 800375a:	40da      	lsrs	r2, r3
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x208>)
 800375e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_ClockConfig+0x20c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0018      	movs	r0, r3
 8003766:	f7fe f925 	bl	80019b4 <HAL_InitTick>
 800376a:	0003      	movs	r3, r0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40022000 	.word	0x40022000
 8003778:	00001388 	.word	0x00001388
 800377c:	40021000 	.word	0x40021000
 8003780:	fffff0ff 	.word	0xfffff0ff
 8003784:	ffff8fff 	.word	0xffff8fff
 8003788:	08005274 	.word	0x08005274
 800378c:	20000000 	.word	0x20000000
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800379a:	4b3c      	ldr	r3, [pc, #240]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2238      	movs	r2, #56	; 0x38
 80037a0:	4013      	ands	r3, r2
 80037a2:	d10f      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80037a4:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0adb      	lsrs	r3, r3, #11
 80037aa:	2207      	movs	r2, #7
 80037ac:	4013      	ands	r3, r2
 80037ae:	2201      	movs	r2, #1
 80037b0:	409a      	lsls	r2, r3
 80037b2:	0013      	movs	r3, r2
 80037b4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	4835      	ldr	r0, [pc, #212]	; (8003890 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037ba:	f7fc fca3 	bl	8000104 <__udivsi3>
 80037be:	0003      	movs	r3, r0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	e05d      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2238      	movs	r2, #56	; 0x38
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037d0:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_RCC_GetSysClockFreq+0x100>)
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	e054      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d6:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2238      	movs	r2, #56	; 0x38
 80037dc:	4013      	ands	r3, r2
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d138      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2203      	movs	r2, #3
 80037e8:	4013      	ands	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037ec:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	2207      	movs	r2, #7
 80037f4:	4013      	ands	r3, r2
 80037f6:	3301      	adds	r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d10d      	bne.n	800381c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4824      	ldr	r0, [pc, #144]	; (8003894 <HAL_RCC_GetSysClockFreq+0x100>)
 8003804:	f7fc fc7e 	bl	8000104 <__udivsi3>
 8003808:	0003      	movs	r3, r0
 800380a:	0019      	movs	r1, r3
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	227f      	movs	r2, #127	; 0x7f
 8003814:	4013      	ands	r3, r2
 8003816:	434b      	muls	r3, r1
 8003818:	617b      	str	r3, [r7, #20]
        break;
 800381a:	e00d      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	481c      	ldr	r0, [pc, #112]	; (8003890 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003820:	f7fc fc70 	bl	8000104 <__udivsi3>
 8003824:	0003      	movs	r3, r0
 8003826:	0019      	movs	r1, r3
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	227f      	movs	r2, #127	; 0x7f
 8003830:	4013      	ands	r3, r2
 8003832:	434b      	muls	r3, r1
 8003834:	617b      	str	r3, [r7, #20]
        break;
 8003836:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0f5b      	lsrs	r3, r3, #29
 800383e:	2207      	movs	r2, #7
 8003840:	4013      	ands	r3, r2
 8003842:	3301      	adds	r3, #1
 8003844:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	6978      	ldr	r0, [r7, #20]
 800384a:	f7fc fc5b 	bl	8000104 <__udivsi3>
 800384e:	0003      	movs	r3, r0
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	e015      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2238      	movs	r2, #56	; 0x38
 800385a:	4013      	ands	r3, r2
 800385c:	2b20      	cmp	r3, #32
 800385e:	d103      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	e00b      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_RCC_GetSysClockFreq+0xf8>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2238      	movs	r2, #56	; 0x38
 800386e:	4013      	ands	r3, r2
 8003870:	2b18      	cmp	r3, #24
 8003872:	d103      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003874:	23fa      	movs	r3, #250	; 0xfa
 8003876:	01db      	lsls	r3, r3, #7
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	e001      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003880:	693b      	ldr	r3, [r7, #16]
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b006      	add	sp, #24
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	40021000 	.word	0x40021000
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200

08003898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b02      	ldr	r3, [pc, #8]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	20000000 	.word	0x20000000

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b5b0      	push	{r4, r5, r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80038b0:	f7ff fff2 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b4:	0004      	movs	r4, r0
 80038b6:	f7ff faf9 	bl	8002eac <LL_RCC_GetAPB1Prescaler>
 80038ba:	0003      	movs	r3, r0
 80038bc:	0b1a      	lsrs	r2, r3, #12
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038c0:	0092      	lsls	r2, r2, #2
 80038c2:	58d3      	ldr	r3, [r2, r3]
 80038c4:	221f      	movs	r2, #31
 80038c6:	4013      	ands	r3, r2
 80038c8:	40dc      	lsrs	r4, r3
 80038ca:	0023      	movs	r3, r4
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bdb0      	pop	{r4, r5, r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	080052b4 	.word	0x080052b4

080038d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80038e0:	2313      	movs	r3, #19
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038e8:	2312      	movs	r3, #18
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	029b      	lsls	r3, r3, #10
 80038f8:	4013      	ands	r3, r2
 80038fa:	d100      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 80038fc:	e0ad      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fe:	2011      	movs	r0, #17
 8003900:	183b      	adds	r3, r7, r0
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	055b      	lsls	r3, r3, #21
 800390e:	4013      	ands	r3, r2
 8003910:	d110      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	4b44      	ldr	r3, [pc, #272]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003916:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	0549      	lsls	r1, r1, #21
 800391c:	430a      	orrs	r2, r1
 800391e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003920:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	055b      	lsls	r3, r3, #21
 8003928:	4013      	ands	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800392e:	183b      	adds	r3, r7, r0
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003934:	4b3c      	ldr	r3, [pc, #240]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	0049      	lsls	r1, r1, #1
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003942:	f7fe f893 	bl	8001a6c <HAL_GetTick>
 8003946:	0003      	movs	r3, r0
 8003948:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800394a:	e00b      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394c:	f7fe f88e 	bl	8001a6c <HAL_GetTick>
 8003950:	0002      	movs	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d904      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800395a:	2313      	movs	r3, #19
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2203      	movs	r2, #3
 8003960:	701a      	strb	r2, [r3, #0]
        break;
 8003962:	e005      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4013      	ands	r3, r2
 800396e:	d0ed      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003970:	2313      	movs	r3, #19
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d15e      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800397c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800397e:	23c0      	movs	r3, #192	; 0xc0
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4013      	ands	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d019      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	429a      	cmp	r2, r3
 8003994:	d014      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003996:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	4a24      	ldr	r2, [pc, #144]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800399c:	4013      	ands	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039a4:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	0249      	lsls	r1, r1, #9
 80039aa:	430a      	orrs	r2, r1
 80039ac:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039b2:	4b1c      	ldr	r3, [pc, #112]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039b4:	491e      	ldr	r1, [pc, #120]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80039b6:	400a      	ands	r2, r1
 80039b8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039ba:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2201      	movs	r2, #1
 80039c4:	4013      	ands	r3, r2
 80039c6:	d016      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe f850 	bl	8001a6c <HAL_GetTick>
 80039cc:	0003      	movs	r3, r0
 80039ce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d0:	e00c      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe f84b 	bl	8001a6c <HAL_GetTick>
 80039d6:	0002      	movs	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d904      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80039e2:	2313      	movs	r3, #19
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	2203      	movs	r2, #3
 80039e8:	701a      	strb	r2, [r3, #0]
            break;
 80039ea:	e004      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ec:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	2202      	movs	r2, #2
 80039f2:	4013      	ands	r3, r2
 80039f4:	d0ed      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80039f6:	2313      	movs	r3, #19
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a10:	430a      	orrs	r2, r1
 8003a12:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a14:	e016      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a16:	2312      	movs	r3, #18
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2213      	movs	r2, #19
 8003a1c:	18ba      	adds	r2, r7, r2
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e00f      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	fffffcff 	.word	0xfffffcff
 8003a30:	fffeffff 	.word	0xfffeffff
 8003a34:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	2312      	movs	r3, #18
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2213      	movs	r2, #19
 8003a3e:	18ba      	adds	r2, r7, r2
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a44:	2311      	movs	r3, #17
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d105      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4e:	4bb6      	ldr	r3, [pc, #728]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a52:	4bb5      	ldr	r3, [pc, #724]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a54:	49b5      	ldr	r1, [pc, #724]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a64:	4bb0      	ldr	r3, [pc, #704]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	2203      	movs	r2, #3
 8003a6a:	4393      	bics	r3, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4bad      	ldr	r3, [pc, #692]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a74:	430a      	orrs	r2, r1
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d009      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a82:	4ba9      	ldr	r3, [pc, #676]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	220c      	movs	r2, #12
 8003a88:	4393      	bics	r3, r2
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	4ba5      	ldr	r3, [pc, #660]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a92:	430a      	orrs	r2, r1
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aa0:	4ba1      	ldr	r3, [pc, #644]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	2230      	movs	r2, #48	; 0x30
 8003aa6:	4393      	bics	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	4b9e      	ldr	r3, [pc, #632]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2210      	movs	r2, #16
 8003aba:	4013      	ands	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003abe:	4b9a      	ldr	r3, [pc, #616]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	4a9b      	ldr	r2, [pc, #620]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	4b96      	ldr	r3, [pc, #600]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	015b      	lsls	r3, r3, #5
 8003ada:	4013      	ands	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003ade:	4b92      	ldr	r3, [pc, #584]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	4a94      	ldr	r2, [pc, #592]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	4b8e      	ldr	r3, [pc, #568]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aee:	430a      	orrs	r2, r1
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4013      	ands	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003afe:	4b8a      	ldr	r3, [pc, #552]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	4a8d      	ldr	r2, [pc, #564]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	0019      	movs	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b0c:	4b86      	ldr	r3, [pc, #536]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b1e:	4b82      	ldr	r3, [pc, #520]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	4a86      	ldr	r2, [pc, #536]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	0019      	movs	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	4b7e      	ldr	r3, [pc, #504]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2220      	movs	r2, #32
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b3c:	4b7a      	ldr	r3, [pc, #488]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	4a7f      	ldr	r2, [pc, #508]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	0019      	movs	r1, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	4b77      	ldr	r3, [pc, #476]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	4013      	ands	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b5a:	4b73      	ldr	r3, [pc, #460]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	4a79      	ldr	r2, [pc, #484]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	0019      	movs	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	4b6f      	ldr	r3, [pc, #444]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	01db      	lsls	r3, r3, #7
 8003b76:	4013      	ands	r3, r2
 8003b78:	d015      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b7a:	4b6b      	ldr	r3, [pc, #428]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	0899      	lsrs	r1, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b86:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	05db      	lsls	r3, r3, #23
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b98:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	4b62      	ldr	r3, [pc, #392]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b9e:	2180      	movs	r1, #128	; 0x80
 8003ba0:	0249      	lsls	r1, r1, #9
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	031b      	lsls	r3, r3, #12
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	2240      	movs	r2, #64	; 0x40
 8003bb8:	4393      	bics	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc0:	4b59      	ldr	r3, [pc, #356]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	039b      	lsls	r3, r3, #14
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d016      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bd2:	4b55      	ldr	r3, [pc, #340]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	4a5c      	ldr	r2, [pc, #368]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	0019      	movs	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be0:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be2:	430a      	orrs	r2, r1
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	03db      	lsls	r3, r3, #15
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bf2:	4b4d      	ldr	r3, [pc, #308]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	0449      	lsls	r1, r1, #17
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	03db      	lsls	r3, r3, #15
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d016      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c0c:	4b46      	ldr	r3, [pc, #280]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	4a4e      	ldr	r2, [pc, #312]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	0019      	movs	r1, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c1a:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	045b      	lsls	r3, r3, #17
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c2c:	4b3e      	ldr	r3, [pc, #248]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	4b3d      	ldr	r3, [pc, #244]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	0449      	lsls	r1, r1, #17
 8003c36:	430a      	orrs	r2, r1
 8003c38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4013      	ands	r3, r2
 8003c44:	d014      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c46:	4b38      	ldr	r3, [pc, #224]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	4393      	bics	r3, r2
 8003c4e:	0019      	movs	r1, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1a      	ldr	r2, [r3, #32]
 8003c54:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c56:	430a      	orrs	r2, r1
 8003c58:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d106      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	0249      	lsls	r1, r1, #9
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	019b      	lsls	r3, r3, #6
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d014      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c7c:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	220c      	movs	r2, #12
 8003c82:	4393      	bics	r3, r2
 8003c84:	0019      	movs	r1, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c8a:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	0249      	lsls	r1, r1, #9
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	045b      	lsls	r3, r3, #17
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d016      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	019b      	lsls	r3, r3, #6
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d106      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	0449      	lsls	r1, r1, #17
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	049b      	lsls	r3, r3, #18
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d016      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	0449      	lsls	r1, r1, #17
 8003d16:	430a      	orrs	r2, r1
 8003d18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003d1a:	2312      	movs	r3, #18
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	781b      	ldrb	r3, [r3, #0]
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b006      	add	sp, #24
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	efffffff 	.word	0xefffffff
 8003d30:	fffff3ff 	.word	0xfffff3ff
 8003d34:	fffffcff 	.word	0xfffffcff
 8003d38:	fff3ffff 	.word	0xfff3ffff
 8003d3c:	ffcfffff 	.word	0xffcfffff
 8003d40:	ffffcfff 	.word	0xffffcfff
 8003d44:	ffff3fff 	.word	0xffff3fff
 8003d48:	ffbfffff 	.word	0xffbfffff
 8003d4c:	feffffff 	.word	0xfeffffff

08003d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e04a      	b.n	8003df8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	223d      	movs	r2, #61	; 0x3d
 8003d66:	5c9b      	ldrb	r3, [r3, r2]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223c      	movs	r2, #60	; 0x3c
 8003d72:	2100      	movs	r1, #0
 8003d74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7fd f97f 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	223d      	movs	r2, #61	; 0x3d
 8003d82:	2102      	movs	r1, #2
 8003d84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	0019      	movs	r1, r3
 8003d90:	0010      	movs	r0, r2
 8003d92:	f000 f90b 	bl	8003fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2248      	movs	r2, #72	; 0x48
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	223e      	movs	r2, #62	; 0x3e
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	223f      	movs	r2, #63	; 0x3f
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2240      	movs	r2, #64	; 0x40
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2241      	movs	r2, #65	; 0x41
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2242      	movs	r2, #66	; 0x42
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2243      	movs	r2, #67	; 0x43
 8003dca:	2101      	movs	r1, #1
 8003dcc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2244      	movs	r2, #68	; 0x44
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2245      	movs	r2, #69	; 0x45
 8003dda:	2101      	movs	r1, #1
 8003ddc:	5499      	strb	r1, [r3, r2]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2246      	movs	r2, #70	; 0x46
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2247      	movs	r2, #71	; 0x47
 8003dea:	2101      	movs	r1, #1
 8003dec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	223d      	movs	r2, #61	; 0x3d
 8003df2:	2101      	movs	r1, #1
 8003df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	230f      	movs	r3, #15
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	223c      	movs	r2, #60	; 0x3c
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIM_ConfigClockSource+0x20>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0bc      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x19a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	223c      	movs	r2, #60	; 0x3c
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	223d      	movs	r2, #61	; 0x3d
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4a5a      	ldr	r2, [pc, #360]	; (8003fa4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4a59      	ldr	r2, [pc, #356]	; (8003fa8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	0192      	lsls	r2, r2, #6
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d040      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xde>
 8003e5c:	2280      	movs	r2, #128	; 0x80
 8003e5e:	0192      	lsls	r2, r2, #6
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d900      	bls.n	8003e66 <HAL_TIM_ConfigClockSource+0x66>
 8003e64:	e088      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	0152      	lsls	r2, r2, #5
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d100      	bne.n	8003e70 <HAL_TIM_ConfigClockSource+0x70>
 8003e6e:	e088      	b.n	8003f82 <HAL_TIM_ConfigClockSource+0x182>
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	0152      	lsls	r2, r2, #5
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d900      	bls.n	8003e7a <HAL_TIM_ConfigClockSource+0x7a>
 8003e78:	e07e      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
 8003e7a:	2b70      	cmp	r3, #112	; 0x70
 8003e7c:	d018      	beq.n	8003eb0 <HAL_TIM_ConfigClockSource+0xb0>
 8003e7e:	d900      	bls.n	8003e82 <HAL_TIM_ConfigClockSource+0x82>
 8003e80:	e07a      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
 8003e82:	2b60      	cmp	r3, #96	; 0x60
 8003e84:	d04f      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x126>
 8003e86:	d900      	bls.n	8003e8a <HAL_TIM_ConfigClockSource+0x8a>
 8003e88:	e076      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
 8003e8a:	2b50      	cmp	r3, #80	; 0x50
 8003e8c:	d03b      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x106>
 8003e8e:	d900      	bls.n	8003e92 <HAL_TIM_ConfigClockSource+0x92>
 8003e90:	e072      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d057      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x146>
 8003e96:	d900      	bls.n	8003e9a <HAL_TIM_ConfigClockSource+0x9a>
 8003e98:	e06e      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
 8003e9a:	2b30      	cmp	r3, #48	; 0x30
 8003e9c:	d063      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x166>
 8003e9e:	d86b      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d060      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x166>
 8003ea4:	d868      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d05d      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x166>
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d05b      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x166>
 8003eae:	e063      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	6899      	ldr	r1, [r3, #8]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f000 f97a 	bl	80041b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2277      	movs	r2, #119	; 0x77
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]
      break;
 8003edc:	e052      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f000 f963 	bl	80041b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	01c9      	lsls	r1, r1, #7
 8003f00:	430a      	orrs	r2, r1
 8003f02:	609a      	str	r2, [r3, #8]
      break;
 8003f04:	e03e      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	001a      	movs	r2, r3
 8003f14:	f000 f8d4 	bl	80040c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2150      	movs	r1, #80	; 0x50
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f000 f92e 	bl	8004180 <TIM_ITRx_SetConfig>
      break;
 8003f24:	e02e      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	001a      	movs	r2, r3
 8003f34:	f000 f8f2 	bl	800411c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2160      	movs	r1, #96	; 0x60
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 f91e 	bl	8004180 <TIM_ITRx_SetConfig>
      break;
 8003f44:	e01e      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	001a      	movs	r2, r3
 8003f54:	f000 f8b4 	bl	80040c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2140      	movs	r1, #64	; 0x40
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 f90e 	bl	8004180 <TIM_ITRx_SetConfig>
      break;
 8003f64:	e00e      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	0019      	movs	r1, r3
 8003f70:	0010      	movs	r0, r2
 8003f72:	f000 f905 	bl	8004180 <TIM_ITRx_SetConfig>
      break;
 8003f76:	e005      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003f78:	230f      	movs	r3, #15
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
      break;
 8003f80:	e000      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003f82:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	223d      	movs	r2, #61	; 0x3d
 8003f88:	2101      	movs	r1, #1
 8003f8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	223c      	movs	r2, #60	; 0x3c
 8003f90:	2100      	movs	r1, #0
 8003f92:	5499      	strb	r1, [r3, r2]

  return status;
 8003f94:	230f      	movs	r3, #15
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	781b      	ldrb	r3, [r3, #0]
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b004      	add	sp, #16
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	ffceff88 	.word	0xffceff88
 8003fa8:	ffff00ff 	.word	0xffff00ff

08003fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a38      	ldr	r2, [pc, #224]	; (80040a0 <TIM_Base_SetConfig+0xf4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00c      	beq.n	8003fde <TIM_Base_SetConfig+0x32>
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	05db      	lsls	r3, r3, #23
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d007      	beq.n	8003fde <TIM_Base_SetConfig+0x32>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a34      	ldr	r2, [pc, #208]	; (80040a4 <TIM_Base_SetConfig+0xf8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_Base_SetConfig+0x32>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a33      	ldr	r2, [pc, #204]	; (80040a8 <TIM_Base_SetConfig+0xfc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2270      	movs	r2, #112	; 0x70
 8003fe2:	4393      	bics	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a2b      	ldr	r2, [pc, #172]	; (80040a0 <TIM_Base_SetConfig+0xf4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d01c      	beq.n	8004032 <TIM_Base_SetConfig+0x86>
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	05db      	lsls	r3, r3, #23
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d017      	beq.n	8004032 <TIM_Base_SetConfig+0x86>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a27      	ldr	r2, [pc, #156]	; (80040a4 <TIM_Base_SetConfig+0xf8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <TIM_Base_SetConfig+0x86>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a26      	ldr	r2, [pc, #152]	; (80040a8 <TIM_Base_SetConfig+0xfc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_Base_SetConfig+0x86>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a25      	ldr	r2, [pc, #148]	; (80040ac <TIM_Base_SetConfig+0x100>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_Base_SetConfig+0x86>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a24      	ldr	r2, [pc, #144]	; (80040b0 <TIM_Base_SetConfig+0x104>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_Base_SetConfig+0x86>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <TIM_Base_SetConfig+0x108>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_Base_SetConfig+0x86>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <TIM_Base_SetConfig+0x10c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a21      	ldr	r2, [pc, #132]	; (80040bc <TIM_Base_SetConfig+0x110>)
 8004036:	4013      	ands	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	4393      	bics	r3, r2
 800404a:	001a      	movs	r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <TIM_Base_SetConfig+0xf4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00b      	beq.n	800408a <TIM_Base_SetConfig+0xde>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a0e      	ldr	r2, [pc, #56]	; (80040b0 <TIM_Base_SetConfig+0x104>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <TIM_Base_SetConfig+0xde>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <TIM_Base_SetConfig+0x108>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_Base_SetConfig+0xde>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <TIM_Base_SetConfig+0x10c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d103      	bne.n	8004092 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	615a      	str	r2, [r3, #20]
}
 8004098:	46c0      	nop			; (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	b004      	add	sp, #16
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40002000 	.word	0x40002000
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800
 80040bc:	fffffcff 	.word	0xfffffcff

080040c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	2201      	movs	r2, #1
 80040d8:	4393      	bics	r3, r2
 80040da:	001a      	movs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	22f0      	movs	r2, #240	; 0xf0
 80040ea:	4393      	bics	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	220a      	movs	r2, #10
 80040fc:	4393      	bics	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	621a      	str	r2, [r3, #32]
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b006      	add	sp, #24
 800411a:	bd80      	pop	{r7, pc}

0800411c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	2210      	movs	r2, #16
 800412e:	4393      	bics	r3, r2
 8004130:	001a      	movs	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	4a0d      	ldr	r2, [pc, #52]	; (800417c <TIM_TI2_ConfigInputStage+0x60>)
 8004146:	4013      	ands	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	031b      	lsls	r3, r3, #12
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	22a0      	movs	r2, #160	; 0xa0
 8004158:	4393      	bics	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b006      	add	sp, #24
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	ffff0fff 	.word	0xffff0fff

08004180 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <TIM_ITRx_SetConfig+0x34>)
 8004194:	4013      	ands	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	2207      	movs	r2, #7
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	609a      	str	r2, [r3, #8]
}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b004      	add	sp, #16
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	ffcfff8f 	.word	0xffcfff8f

080041b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <TIM_ETR_SetConfig+0x3c>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	431a      	orrs	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b006      	add	sp, #24
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	ffff00ff 	.word	0xffff00ff

080041f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	223c      	movs	r2, #60	; 0x3c
 8004206:	5c9b      	ldrb	r3, [r3, r2]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800420c:	2302      	movs	r3, #2
 800420e:	e05a      	b.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	223c      	movs	r2, #60	; 0x3c
 8004214:	2101      	movs	r1, #1
 8004216:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	223d      	movs	r2, #61	; 0x3d
 800421c:	2102      	movs	r1, #2
 800421e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d108      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800423e:	4013      	ands	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2270      	movs	r2, #112	; 0x70
 8004250:	4393      	bics	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d014      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	05db      	lsls	r3, r3, #23
 8004278:	429a      	cmp	r2, r3
 800427a:	d00e      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a14      	ldr	r2, [pc, #80]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10c      	bne.n	80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	4393      	bics	r3, r2
 80042a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	223d      	movs	r2, #61	; 0x3d
 80042b8:	2101      	movs	r1, #1
 80042ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	223c      	movs	r2, #60	; 0x3c
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	ff0fffff 	.word	0xff0fffff
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40014000 	.word	0x40014000

080042e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e046      	b.n	8004384 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2288      	movs	r2, #136	; 0x88
 80042fa:	589b      	ldr	r3, [r3, r2]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2284      	movs	r2, #132	; 0x84
 8004304:	2100      	movs	r1, #0
 8004306:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	0018      	movs	r0, r3
 800430c:	f7fc fee6 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2288      	movs	r2, #136	; 0x88
 8004314:	2124      	movs	r1, #36	; 0x24
 8004316:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2101      	movs	r1, #1
 8004324:	438a      	bics	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f830 	bl	8004390 <UART_SetConfig>
 8004330:	0003      	movs	r3, r0
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e024      	b.n	8004384 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0018      	movs	r0, r3
 8004346:	f000 fb79 	bl	8004a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	490d      	ldr	r1, [pc, #52]	; (800438c <HAL_UART_Init+0xa8>)
 8004356:	400a      	ands	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	212a      	movs	r1, #42	; 0x2a
 8004366:	438a      	bics	r2, r1
 8004368:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	430a      	orrs	r2, r1
 8004378:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0018      	movs	r0, r3
 800437e:	f000 fc11 	bl	8004ba4 <UART_CheckIdleState>
 8004382:	0003      	movs	r3, r0
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b002      	add	sp, #8
 800438a:	bd80      	pop	{r7, pc}
 800438c:	ffffb7ff 	.word	0xffffb7ff

08004390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	b5b0      	push	{r4, r5, r7, lr}
 8004392:	b090      	sub	sp, #64	; 0x40
 8004394:	af00      	add	r7, sp, #0
 8004396:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004398:	231a      	movs	r3, #26
 800439a:	2220      	movs	r2, #32
 800439c:	189b      	adds	r3, r3, r2
 800439e:	19db      	adds	r3, r3, r7
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4ac1      	ldr	r2, [pc, #772]	; (80046c8 <UART_SetConfig+0x338>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ce:	430b      	orrs	r3, r1
 80043d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4abc      	ldr	r2, [pc, #752]	; (80046cc <UART_SetConfig+0x33c>)
 80043da:	4013      	ands	r3, r2
 80043dc:	0018      	movs	r0, r3
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	68d9      	ldr	r1, [r3, #12]
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	0003      	movs	r3, r0
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4ab6      	ldr	r2, [pc, #728]	; (80046d0 <UART_SetConfig+0x340>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d009      	beq.n	8004410 <UART_SetConfig+0x80>
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4ab4      	ldr	r2, [pc, #720]	; (80046d4 <UART_SetConfig+0x344>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800440c:	4313      	orrs	r3, r2
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	4ab0      	ldr	r2, [pc, #704]	; (80046d8 <UART_SetConfig+0x348>)
 8004418:	4013      	ands	r3, r2
 800441a:	0019      	movs	r1, r3
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004422:	430b      	orrs	r3, r1
 8004424:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	220f      	movs	r2, #15
 800442e:	4393      	bics	r3, r2
 8004430:	0018      	movs	r0, r3
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	0003      	movs	r3, r0
 800443c:	430b      	orrs	r3, r1
 800443e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4aa5      	ldr	r2, [pc, #660]	; (80046dc <UART_SetConfig+0x34c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d131      	bne.n	80044ae <UART_SetConfig+0x11e>
 800444a:	4ba5      	ldr	r3, [pc, #660]	; (80046e0 <UART_SetConfig+0x350>)
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	2203      	movs	r2, #3
 8004450:	4013      	ands	r3, r2
 8004452:	2b03      	cmp	r3, #3
 8004454:	d01d      	beq.n	8004492 <UART_SetConfig+0x102>
 8004456:	d823      	bhi.n	80044a0 <UART_SetConfig+0x110>
 8004458:	2b02      	cmp	r3, #2
 800445a:	d00c      	beq.n	8004476 <UART_SetConfig+0xe6>
 800445c:	d820      	bhi.n	80044a0 <UART_SetConfig+0x110>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <UART_SetConfig+0xd8>
 8004462:	2b01      	cmp	r3, #1
 8004464:	d00e      	beq.n	8004484 <UART_SetConfig+0xf4>
 8004466:	e01b      	b.n	80044a0 <UART_SetConfig+0x110>
 8004468:	231b      	movs	r3, #27
 800446a:	2220      	movs	r2, #32
 800446c:	189b      	adds	r3, r3, r2
 800446e:	19db      	adds	r3, r3, r7
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e154      	b.n	8004720 <UART_SetConfig+0x390>
 8004476:	231b      	movs	r3, #27
 8004478:	2220      	movs	r2, #32
 800447a:	189b      	adds	r3, r3, r2
 800447c:	19db      	adds	r3, r3, r7
 800447e:	2202      	movs	r2, #2
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	e14d      	b.n	8004720 <UART_SetConfig+0x390>
 8004484:	231b      	movs	r3, #27
 8004486:	2220      	movs	r2, #32
 8004488:	189b      	adds	r3, r3, r2
 800448a:	19db      	adds	r3, r3, r7
 800448c:	2204      	movs	r2, #4
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e146      	b.n	8004720 <UART_SetConfig+0x390>
 8004492:	231b      	movs	r3, #27
 8004494:	2220      	movs	r2, #32
 8004496:	189b      	adds	r3, r3, r2
 8004498:	19db      	adds	r3, r3, r7
 800449a:	2208      	movs	r2, #8
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e13f      	b.n	8004720 <UART_SetConfig+0x390>
 80044a0:	231b      	movs	r3, #27
 80044a2:	2220      	movs	r2, #32
 80044a4:	189b      	adds	r3, r3, r2
 80044a6:	19db      	adds	r3, r3, r7
 80044a8:	2210      	movs	r2, #16
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	e138      	b.n	8004720 <UART_SetConfig+0x390>
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a8c      	ldr	r2, [pc, #560]	; (80046e4 <UART_SetConfig+0x354>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d131      	bne.n	800451c <UART_SetConfig+0x18c>
 80044b8:	4b89      	ldr	r3, [pc, #548]	; (80046e0 <UART_SetConfig+0x350>)
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	220c      	movs	r2, #12
 80044be:	4013      	ands	r3, r2
 80044c0:	2b0c      	cmp	r3, #12
 80044c2:	d01d      	beq.n	8004500 <UART_SetConfig+0x170>
 80044c4:	d823      	bhi.n	800450e <UART_SetConfig+0x17e>
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d00c      	beq.n	80044e4 <UART_SetConfig+0x154>
 80044ca:	d820      	bhi.n	800450e <UART_SetConfig+0x17e>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <UART_SetConfig+0x146>
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d00e      	beq.n	80044f2 <UART_SetConfig+0x162>
 80044d4:	e01b      	b.n	800450e <UART_SetConfig+0x17e>
 80044d6:	231b      	movs	r3, #27
 80044d8:	2220      	movs	r2, #32
 80044da:	189b      	adds	r3, r3, r2
 80044dc:	19db      	adds	r3, r3, r7
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e11d      	b.n	8004720 <UART_SetConfig+0x390>
 80044e4:	231b      	movs	r3, #27
 80044e6:	2220      	movs	r2, #32
 80044e8:	189b      	adds	r3, r3, r2
 80044ea:	19db      	adds	r3, r3, r7
 80044ec:	2202      	movs	r2, #2
 80044ee:	701a      	strb	r2, [r3, #0]
 80044f0:	e116      	b.n	8004720 <UART_SetConfig+0x390>
 80044f2:	231b      	movs	r3, #27
 80044f4:	2220      	movs	r2, #32
 80044f6:	189b      	adds	r3, r3, r2
 80044f8:	19db      	adds	r3, r3, r7
 80044fa:	2204      	movs	r2, #4
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e10f      	b.n	8004720 <UART_SetConfig+0x390>
 8004500:	231b      	movs	r3, #27
 8004502:	2220      	movs	r2, #32
 8004504:	189b      	adds	r3, r3, r2
 8004506:	19db      	adds	r3, r3, r7
 8004508:	2208      	movs	r2, #8
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e108      	b.n	8004720 <UART_SetConfig+0x390>
 800450e:	231b      	movs	r3, #27
 8004510:	2220      	movs	r2, #32
 8004512:	189b      	adds	r3, r3, r2
 8004514:	19db      	adds	r3, r3, r7
 8004516:	2210      	movs	r2, #16
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	e101      	b.n	8004720 <UART_SetConfig+0x390>
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a71      	ldr	r2, [pc, #452]	; (80046e8 <UART_SetConfig+0x358>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d131      	bne.n	800458a <UART_SetConfig+0x1fa>
 8004526:	4b6e      	ldr	r3, [pc, #440]	; (80046e0 <UART_SetConfig+0x350>)
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	2230      	movs	r2, #48	; 0x30
 800452c:	4013      	ands	r3, r2
 800452e:	2b30      	cmp	r3, #48	; 0x30
 8004530:	d01d      	beq.n	800456e <UART_SetConfig+0x1de>
 8004532:	d823      	bhi.n	800457c <UART_SetConfig+0x1ec>
 8004534:	2b20      	cmp	r3, #32
 8004536:	d00c      	beq.n	8004552 <UART_SetConfig+0x1c2>
 8004538:	d820      	bhi.n	800457c <UART_SetConfig+0x1ec>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <UART_SetConfig+0x1b4>
 800453e:	2b10      	cmp	r3, #16
 8004540:	d00e      	beq.n	8004560 <UART_SetConfig+0x1d0>
 8004542:	e01b      	b.n	800457c <UART_SetConfig+0x1ec>
 8004544:	231b      	movs	r3, #27
 8004546:	2220      	movs	r2, #32
 8004548:	189b      	adds	r3, r3, r2
 800454a:	19db      	adds	r3, r3, r7
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e0e6      	b.n	8004720 <UART_SetConfig+0x390>
 8004552:	231b      	movs	r3, #27
 8004554:	2220      	movs	r2, #32
 8004556:	189b      	adds	r3, r3, r2
 8004558:	19db      	adds	r3, r3, r7
 800455a:	2202      	movs	r2, #2
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e0df      	b.n	8004720 <UART_SetConfig+0x390>
 8004560:	231b      	movs	r3, #27
 8004562:	2220      	movs	r2, #32
 8004564:	189b      	adds	r3, r3, r2
 8004566:	19db      	adds	r3, r3, r7
 8004568:	2204      	movs	r2, #4
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	e0d8      	b.n	8004720 <UART_SetConfig+0x390>
 800456e:	231b      	movs	r3, #27
 8004570:	2220      	movs	r2, #32
 8004572:	189b      	adds	r3, r3, r2
 8004574:	19db      	adds	r3, r3, r7
 8004576:	2208      	movs	r2, #8
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	e0d1      	b.n	8004720 <UART_SetConfig+0x390>
 800457c:	231b      	movs	r3, #27
 800457e:	2220      	movs	r2, #32
 8004580:	189b      	adds	r3, r3, r2
 8004582:	19db      	adds	r3, r3, r7
 8004584:	2210      	movs	r2, #16
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e0ca      	b.n	8004720 <UART_SetConfig+0x390>
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a57      	ldr	r2, [pc, #348]	; (80046ec <UART_SetConfig+0x35c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d106      	bne.n	80045a2 <UART_SetConfig+0x212>
 8004594:	231b      	movs	r3, #27
 8004596:	2220      	movs	r2, #32
 8004598:	189b      	adds	r3, r3, r2
 800459a:	19db      	adds	r3, r3, r7
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	e0be      	b.n	8004720 <UART_SetConfig+0x390>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a52      	ldr	r2, [pc, #328]	; (80046f0 <UART_SetConfig+0x360>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d106      	bne.n	80045ba <UART_SetConfig+0x22a>
 80045ac:	231b      	movs	r3, #27
 80045ae:	2220      	movs	r2, #32
 80045b0:	189b      	adds	r3, r3, r2
 80045b2:	19db      	adds	r3, r3, r7
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	e0b2      	b.n	8004720 <UART_SetConfig+0x390>
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a4d      	ldr	r2, [pc, #308]	; (80046f4 <UART_SetConfig+0x364>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d106      	bne.n	80045d2 <UART_SetConfig+0x242>
 80045c4:	231b      	movs	r3, #27
 80045c6:	2220      	movs	r2, #32
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e0a6      	b.n	8004720 <UART_SetConfig+0x390>
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a3e      	ldr	r2, [pc, #248]	; (80046d0 <UART_SetConfig+0x340>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d13e      	bne.n	800465a <UART_SetConfig+0x2ca>
 80045dc:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <UART_SetConfig+0x350>)
 80045de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045e0:	23c0      	movs	r3, #192	; 0xc0
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	4013      	ands	r3, r2
 80045e6:	22c0      	movs	r2, #192	; 0xc0
 80045e8:	0112      	lsls	r2, r2, #4
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d027      	beq.n	800463e <UART_SetConfig+0x2ae>
 80045ee:	22c0      	movs	r2, #192	; 0xc0
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d82a      	bhi.n	800464c <UART_SetConfig+0x2bc>
 80045f6:	2280      	movs	r2, #128	; 0x80
 80045f8:	0112      	lsls	r2, r2, #4
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d011      	beq.n	8004622 <UART_SetConfig+0x292>
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	0112      	lsls	r2, r2, #4
 8004602:	4293      	cmp	r3, r2
 8004604:	d822      	bhi.n	800464c <UART_SetConfig+0x2bc>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <UART_SetConfig+0x284>
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	00d2      	lsls	r2, r2, #3
 800460e:	4293      	cmp	r3, r2
 8004610:	d00e      	beq.n	8004630 <UART_SetConfig+0x2a0>
 8004612:	e01b      	b.n	800464c <UART_SetConfig+0x2bc>
 8004614:	231b      	movs	r3, #27
 8004616:	2220      	movs	r2, #32
 8004618:	189b      	adds	r3, r3, r2
 800461a:	19db      	adds	r3, r3, r7
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	e07e      	b.n	8004720 <UART_SetConfig+0x390>
 8004622:	231b      	movs	r3, #27
 8004624:	2220      	movs	r2, #32
 8004626:	189b      	adds	r3, r3, r2
 8004628:	19db      	adds	r3, r3, r7
 800462a:	2202      	movs	r2, #2
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	e077      	b.n	8004720 <UART_SetConfig+0x390>
 8004630:	231b      	movs	r3, #27
 8004632:	2220      	movs	r2, #32
 8004634:	189b      	adds	r3, r3, r2
 8004636:	19db      	adds	r3, r3, r7
 8004638:	2204      	movs	r2, #4
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e070      	b.n	8004720 <UART_SetConfig+0x390>
 800463e:	231b      	movs	r3, #27
 8004640:	2220      	movs	r2, #32
 8004642:	189b      	adds	r3, r3, r2
 8004644:	19db      	adds	r3, r3, r7
 8004646:	2208      	movs	r2, #8
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	e069      	b.n	8004720 <UART_SetConfig+0x390>
 800464c:	231b      	movs	r3, #27
 800464e:	2220      	movs	r2, #32
 8004650:	189b      	adds	r3, r3, r2
 8004652:	19db      	adds	r3, r3, r7
 8004654:	2210      	movs	r2, #16
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e062      	b.n	8004720 <UART_SetConfig+0x390>
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <UART_SetConfig+0x344>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d157      	bne.n	8004714 <UART_SetConfig+0x384>
 8004664:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <UART_SetConfig+0x350>)
 8004666:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004668:	23c0      	movs	r3, #192	; 0xc0
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4013      	ands	r3, r2
 800466e:	22c0      	movs	r2, #192	; 0xc0
 8004670:	0092      	lsls	r2, r2, #2
 8004672:	4293      	cmp	r3, r2
 8004674:	d040      	beq.n	80046f8 <UART_SetConfig+0x368>
 8004676:	22c0      	movs	r2, #192	; 0xc0
 8004678:	0092      	lsls	r2, r2, #2
 800467a:	4293      	cmp	r3, r2
 800467c:	d843      	bhi.n	8004706 <UART_SetConfig+0x376>
 800467e:	2280      	movs	r2, #128	; 0x80
 8004680:	0092      	lsls	r2, r2, #2
 8004682:	4293      	cmp	r3, r2
 8004684:	d011      	beq.n	80046aa <UART_SetConfig+0x31a>
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	0092      	lsls	r2, r2, #2
 800468a:	4293      	cmp	r3, r2
 800468c:	d83b      	bhi.n	8004706 <UART_SetConfig+0x376>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <UART_SetConfig+0x30c>
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	0052      	lsls	r2, r2, #1
 8004696:	4293      	cmp	r3, r2
 8004698:	d00e      	beq.n	80046b8 <UART_SetConfig+0x328>
 800469a:	e034      	b.n	8004706 <UART_SetConfig+0x376>
 800469c:	231b      	movs	r3, #27
 800469e:	2220      	movs	r2, #32
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	19db      	adds	r3, r3, r7
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e03a      	b.n	8004720 <UART_SetConfig+0x390>
 80046aa:	231b      	movs	r3, #27
 80046ac:	2220      	movs	r2, #32
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	19db      	adds	r3, r3, r7
 80046b2:	2202      	movs	r2, #2
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e033      	b.n	8004720 <UART_SetConfig+0x390>
 80046b8:	231b      	movs	r3, #27
 80046ba:	2220      	movs	r2, #32
 80046bc:	189b      	adds	r3, r3, r2
 80046be:	19db      	adds	r3, r3, r7
 80046c0:	2204      	movs	r2, #4
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e02c      	b.n	8004720 <UART_SetConfig+0x390>
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	cfff69f3 	.word	0xcfff69f3
 80046cc:	ffffcfff 	.word	0xffffcfff
 80046d0:	40008000 	.word	0x40008000
 80046d4:	40008400 	.word	0x40008400
 80046d8:	11fff4ff 	.word	0x11fff4ff
 80046dc:	40013800 	.word	0x40013800
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40004400 	.word	0x40004400
 80046e8:	40004800 	.word	0x40004800
 80046ec:	40004c00 	.word	0x40004c00
 80046f0:	40005000 	.word	0x40005000
 80046f4:	40013c00 	.word	0x40013c00
 80046f8:	231b      	movs	r3, #27
 80046fa:	2220      	movs	r2, #32
 80046fc:	189b      	adds	r3, r3, r2
 80046fe:	19db      	adds	r3, r3, r7
 8004700:	2208      	movs	r2, #8
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	e00c      	b.n	8004720 <UART_SetConfig+0x390>
 8004706:	231b      	movs	r3, #27
 8004708:	2220      	movs	r2, #32
 800470a:	189b      	adds	r3, r3, r2
 800470c:	19db      	adds	r3, r3, r7
 800470e:	2210      	movs	r2, #16
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e005      	b.n	8004720 <UART_SetConfig+0x390>
 8004714:	231b      	movs	r3, #27
 8004716:	2220      	movs	r2, #32
 8004718:	189b      	adds	r3, r3, r2
 800471a:	19db      	adds	r3, r3, r7
 800471c:	2210      	movs	r2, #16
 800471e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4ac1      	ldr	r2, [pc, #772]	; (8004a2c <UART_SetConfig+0x69c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d005      	beq.n	8004736 <UART_SetConfig+0x3a6>
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4ac0      	ldr	r2, [pc, #768]	; (8004a30 <UART_SetConfig+0x6a0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d000      	beq.n	8004736 <UART_SetConfig+0x3a6>
 8004734:	e093      	b.n	800485e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004736:	231b      	movs	r3, #27
 8004738:	2220      	movs	r2, #32
 800473a:	189b      	adds	r3, r3, r2
 800473c:	19db      	adds	r3, r3, r7
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d015      	beq.n	8004770 <UART_SetConfig+0x3e0>
 8004744:	dc18      	bgt.n	8004778 <UART_SetConfig+0x3e8>
 8004746:	2b04      	cmp	r3, #4
 8004748:	d00d      	beq.n	8004766 <UART_SetConfig+0x3d6>
 800474a:	dc15      	bgt.n	8004778 <UART_SetConfig+0x3e8>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <UART_SetConfig+0x3c6>
 8004750:	2b02      	cmp	r3, #2
 8004752:	d005      	beq.n	8004760 <UART_SetConfig+0x3d0>
 8004754:	e010      	b.n	8004778 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004756:	f7ff f8a9 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 800475a:	0003      	movs	r3, r0
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800475e:	e014      	b.n	800478a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004760:	4bb4      	ldr	r3, [pc, #720]	; (8004a34 <UART_SetConfig+0x6a4>)
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004764:	e011      	b.n	800478a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004766:	f7ff f815 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 800476a:	0003      	movs	r3, r0
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800476e:	e00c      	b.n	800478a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004776:	e008      	b.n	800478a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800477c:	231a      	movs	r3, #26
 800477e:	2220      	movs	r2, #32
 8004780:	189b      	adds	r3, r3, r2
 8004782:	19db      	adds	r3, r3, r7
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
        break;
 8004788:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d100      	bne.n	8004792 <UART_SetConfig+0x402>
 8004790:	e135      	b.n	80049fe <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004796:	4ba8      	ldr	r3, [pc, #672]	; (8004a38 <UART_SetConfig+0x6a8>)
 8004798:	0052      	lsls	r2, r2, #1
 800479a:	5ad3      	ldrh	r3, [r2, r3]
 800479c:	0019      	movs	r1, r3
 800479e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047a0:	f7fb fcb0 	bl	8000104 <__udivsi3>
 80047a4:	0003      	movs	r3, r0
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	0013      	movs	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	189b      	adds	r3, r3, r2
 80047b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d305      	bcc.n	80047c4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d906      	bls.n	80047d2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80047c4:	231a      	movs	r3, #26
 80047c6:	2220      	movs	r2, #32
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	19db      	adds	r3, r3, r7
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e044      	b.n	800485c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047de:	4b96      	ldr	r3, [pc, #600]	; (8004a38 <UART_SetConfig+0x6a8>)
 80047e0:	0052      	lsls	r2, r2, #1
 80047e2:	5ad3      	ldrh	r3, [r2, r3]
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	69b8      	ldr	r0, [r7, #24]
 80047f0:	69f9      	ldr	r1, [r7, #28]
 80047f2:	f7fb fdfd 	bl	80003f0 <__aeabi_uldivmod>
 80047f6:	0002      	movs	r2, r0
 80047f8:	000b      	movs	r3, r1
 80047fa:	0e11      	lsrs	r1, r2, #24
 80047fc:	021d      	lsls	r5, r3, #8
 80047fe:	430d      	orrs	r5, r1
 8004800:	0214      	lsls	r4, r2, #8
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	68b8      	ldr	r0, [r7, #8]
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	1900      	adds	r0, r0, r4
 8004814:	4169      	adcs	r1, r5
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	2300      	movs	r3, #0
 800481e:	607b      	str	r3, [r7, #4]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f7fb fde4 	bl	80003f0 <__aeabi_uldivmod>
 8004828:	0002      	movs	r2, r0
 800482a:	000b      	movs	r3, r1
 800482c:	0013      	movs	r3, r2
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004832:	23c0      	movs	r3, #192	; 0xc0
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	429a      	cmp	r2, r3
 8004838:	d309      	bcc.n	800484e <UART_SetConfig+0x4be>
 800483a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	035b      	lsls	r3, r3, #13
 8004840:	429a      	cmp	r2, r3
 8004842:	d204      	bcs.n	800484e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	e006      	b.n	800485c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800484e:	231a      	movs	r3, #26
 8004850:	2220      	movs	r2, #32
 8004852:	189b      	adds	r3, r3, r2
 8004854:	19db      	adds	r3, r3, r7
 8004856:	2201      	movs	r2, #1
 8004858:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800485a:	e0d0      	b.n	80049fe <UART_SetConfig+0x66e>
 800485c:	e0cf      	b.n	80049fe <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	429a      	cmp	r2, r3
 8004868:	d000      	beq.n	800486c <UART_SetConfig+0x4dc>
 800486a:	e070      	b.n	800494e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800486c:	231b      	movs	r3, #27
 800486e:	2220      	movs	r2, #32
 8004870:	189b      	adds	r3, r3, r2
 8004872:	19db      	adds	r3, r3, r7
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b08      	cmp	r3, #8
 8004878:	d015      	beq.n	80048a6 <UART_SetConfig+0x516>
 800487a:	dc18      	bgt.n	80048ae <UART_SetConfig+0x51e>
 800487c:	2b04      	cmp	r3, #4
 800487e:	d00d      	beq.n	800489c <UART_SetConfig+0x50c>
 8004880:	dc15      	bgt.n	80048ae <UART_SetConfig+0x51e>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <UART_SetConfig+0x4fc>
 8004886:	2b02      	cmp	r3, #2
 8004888:	d005      	beq.n	8004896 <UART_SetConfig+0x506>
 800488a:	e010      	b.n	80048ae <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7ff f80e 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8004890:	0003      	movs	r3, r0
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004894:	e014      	b.n	80048c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004896:	4b67      	ldr	r3, [pc, #412]	; (8004a34 <UART_SetConfig+0x6a4>)
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800489a:	e011      	b.n	80048c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489c:	f7fe ff7a 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 80048a0:	0003      	movs	r3, r0
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048a4:	e00c      	b.n	80048c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048ac:	e008      	b.n	80048c0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80048b2:	231a      	movs	r3, #26
 80048b4:	2220      	movs	r2, #32
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	19db      	adds	r3, r3, r7
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
        break;
 80048be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d100      	bne.n	80048c8 <UART_SetConfig+0x538>
 80048c6:	e09a      	b.n	80049fe <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048cc:	4b5a      	ldr	r3, [pc, #360]	; (8004a38 <UART_SetConfig+0x6a8>)
 80048ce:	0052      	lsls	r2, r2, #1
 80048d0:	5ad3      	ldrh	r3, [r2, r3]
 80048d2:	0019      	movs	r1, r3
 80048d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048d6:	f7fb fc15 	bl	8000104 <__udivsi3>
 80048da:	0003      	movs	r3, r0
 80048dc:	005a      	lsls	r2, r3, #1
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	18d2      	adds	r2, r2, r3
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	0019      	movs	r1, r3
 80048ec:	0010      	movs	r0, r2
 80048ee:	f7fb fc09 	bl	8000104 <__udivsi3>
 80048f2:	0003      	movs	r3, r0
 80048f4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d921      	bls.n	8004940 <UART_SetConfig+0x5b0>
 80048fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	025b      	lsls	r3, r3, #9
 8004902:	429a      	cmp	r2, r3
 8004904:	d21c      	bcs.n	8004940 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	b29a      	uxth	r2, r3
 800490a:	200e      	movs	r0, #14
 800490c:	2420      	movs	r4, #32
 800490e:	1903      	adds	r3, r0, r4
 8004910:	19db      	adds	r3, r3, r7
 8004912:	210f      	movs	r1, #15
 8004914:	438a      	bics	r2, r1
 8004916:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	2207      	movs	r2, #7
 8004920:	4013      	ands	r3, r2
 8004922:	b299      	uxth	r1, r3
 8004924:	1903      	adds	r3, r0, r4
 8004926:	19db      	adds	r3, r3, r7
 8004928:	1902      	adds	r2, r0, r4
 800492a:	19d2      	adds	r2, r2, r7
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1902      	adds	r2, r0, r4
 8004938:	19d2      	adds	r2, r2, r7
 800493a:	8812      	ldrh	r2, [r2, #0]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	e05e      	b.n	80049fe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004940:	231a      	movs	r3, #26
 8004942:	2220      	movs	r2, #32
 8004944:	189b      	adds	r3, r3, r2
 8004946:	19db      	adds	r3, r3, r7
 8004948:	2201      	movs	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e057      	b.n	80049fe <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800494e:	231b      	movs	r3, #27
 8004950:	2220      	movs	r2, #32
 8004952:	189b      	adds	r3, r3, r2
 8004954:	19db      	adds	r3, r3, r7
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d015      	beq.n	8004988 <UART_SetConfig+0x5f8>
 800495c:	dc18      	bgt.n	8004990 <UART_SetConfig+0x600>
 800495e:	2b04      	cmp	r3, #4
 8004960:	d00d      	beq.n	800497e <UART_SetConfig+0x5ee>
 8004962:	dc15      	bgt.n	8004990 <UART_SetConfig+0x600>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <UART_SetConfig+0x5de>
 8004968:	2b02      	cmp	r3, #2
 800496a:	d005      	beq.n	8004978 <UART_SetConfig+0x5e8>
 800496c:	e010      	b.n	8004990 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800496e:	f7fe ff9d 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8004972:	0003      	movs	r3, r0
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004976:	e014      	b.n	80049a2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <UART_SetConfig+0x6a4>)
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800497c:	e011      	b.n	80049a2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fe ff09 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8004982:	0003      	movs	r3, r0
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004986:	e00c      	b.n	80049a2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800498e:	e008      	b.n	80049a2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004994:	231a      	movs	r3, #26
 8004996:	2220      	movs	r2, #32
 8004998:	189b      	adds	r3, r3, r2
 800499a:	19db      	adds	r3, r3, r7
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
        break;
 80049a0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d02a      	beq.n	80049fe <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ac:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <UART_SetConfig+0x6a8>)
 80049ae:	0052      	lsls	r2, r2, #1
 80049b0:	5ad3      	ldrh	r3, [r2, r3]
 80049b2:	0019      	movs	r1, r3
 80049b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80049b6:	f7fb fba5 	bl	8000104 <__udivsi3>
 80049ba:	0003      	movs	r3, r0
 80049bc:	001a      	movs	r2, r3
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	18d2      	adds	r2, r2, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	0019      	movs	r1, r3
 80049cc:	0010      	movs	r0, r2
 80049ce:	f7fb fb99 	bl	8000104 <__udivsi3>
 80049d2:	0003      	movs	r3, r0
 80049d4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	2b0f      	cmp	r3, #15
 80049da:	d90a      	bls.n	80049f2 <UART_SetConfig+0x662>
 80049dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	025b      	lsls	r3, r3, #9
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d205      	bcs.n	80049f2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60da      	str	r2, [r3, #12]
 80049f0:	e005      	b.n	80049fe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80049f2:	231a      	movs	r3, #26
 80049f4:	2220      	movs	r2, #32
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	19db      	adds	r3, r3, r7
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	226a      	movs	r2, #106	; 0x6a
 8004a02:	2101      	movs	r1, #1
 8004a04:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2268      	movs	r2, #104	; 0x68
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	2200      	movs	r2, #0
 8004a12:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	2200      	movs	r2, #0
 8004a18:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004a1a:	231a      	movs	r3, #26
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	19db      	adds	r3, r3, r7
 8004a22:	781b      	ldrb	r3, [r3, #0]
}
 8004a24:	0018      	movs	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b010      	add	sp, #64	; 0x40
 8004a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a2c:	40008000 	.word	0x40008000
 8004a30:	40008400 	.word	0x40008400
 8004a34:	00f42400 	.word	0x00f42400
 8004a38:	080052fc 	.word	0x080052fc

08004a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	2201      	movs	r2, #1
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d00b      	beq.n	8004a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4a4a      	ldr	r2, [pc, #296]	; (8004b80 <UART_AdvFeatureConfig+0x144>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	0019      	movs	r1, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4a43      	ldr	r2, [pc, #268]	; (8004b84 <UART_AdvFeatureConfig+0x148>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d00b      	beq.n	8004aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a3b      	ldr	r2, [pc, #236]	; (8004b88 <UART_AdvFeatureConfig+0x14c>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	2208      	movs	r2, #8
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4a34      	ldr	r2, [pc, #208]	; (8004b8c <UART_AdvFeatureConfig+0x150>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	0019      	movs	r1, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <UART_AdvFeatureConfig+0x154>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	2220      	movs	r2, #32
 8004af4:	4013      	ands	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4a25      	ldr	r2, [pc, #148]	; (8004b94 <UART_AdvFeatureConfig+0x158>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	0019      	movs	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	2240      	movs	r2, #64	; 0x40
 8004b16:	4013      	ands	r3, r2
 8004b18:	d01d      	beq.n	8004b56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <UART_AdvFeatureConfig+0x15c>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	0019      	movs	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	035b      	lsls	r3, r3, #13
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d10b      	bne.n	8004b56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <UART_AdvFeatureConfig+0x160>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	0019      	movs	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4a0e      	ldr	r2, [pc, #56]	; (8004ba0 <UART_AdvFeatureConfig+0x164>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }
}
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b002      	add	sp, #8
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	fffdffff 	.word	0xfffdffff
 8004b84:	fffeffff 	.word	0xfffeffff
 8004b88:	fffbffff 	.word	0xfffbffff
 8004b8c:	ffff7fff 	.word	0xffff7fff
 8004b90:	ffffefff 	.word	0xffffefff
 8004b94:	ffffdfff 	.word	0xffffdfff
 8004b98:	ffefffff 	.word	0xffefffff
 8004b9c:	ff9fffff 	.word	0xff9fffff
 8004ba0:	fff7ffff 	.word	0xfff7ffff

08004ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2290      	movs	r2, #144	; 0x90
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb4:	f7fc ff5a 	bl	8001a6c <HAL_GetTick>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d10c      	bne.n	8004be4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2280      	movs	r2, #128	; 0x80
 8004bce:	0391      	lsls	r1, r2, #14
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <UART_CheckIdleState+0x98>)
 8004bd4:	9200      	str	r2, [sp, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f000 f832 	bl	8004c40 <UART_WaitOnFlagUntilTimeout>
 8004bdc:	1e03      	subs	r3, r0, #0
 8004bde:	d001      	beq.n	8004be4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e026      	b.n	8004c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2204      	movs	r2, #4
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d10c      	bne.n	8004c0c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2280      	movs	r2, #128	; 0x80
 8004bf6:	03d1      	lsls	r1, r2, #15
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <UART_CheckIdleState+0x98>)
 8004bfc:	9200      	str	r2, [sp, #0]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f000 f81e 	bl	8004c40 <UART_WaitOnFlagUntilTimeout>
 8004c04:	1e03      	subs	r3, r0, #0
 8004c06:	d001      	beq.n	8004c0c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e012      	b.n	8004c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2288      	movs	r2, #136	; 0x88
 8004c10:	2120      	movs	r1, #32
 8004c12:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	228c      	movs	r2, #140	; 0x8c
 8004c18:	2120      	movs	r1, #32
 8004c1a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2284      	movs	r2, #132	; 0x84
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	0018      	movs	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b004      	add	sp, #16
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	01ffffff 	.word	0x01ffffff

08004c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b094      	sub	sp, #80	; 0x50
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	1dfb      	adds	r3, r7, #7
 8004c4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c50:	e0a7      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c54:	3301      	adds	r3, #1
 8004c56:	d100      	bne.n	8004c5a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004c58:	e0a3      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5a:	f7fc ff07 	bl	8001a6c <HAL_GetTick>
 8004c5e:	0002      	movs	r2, r0
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d302      	bcc.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d13f      	bne.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c70:	f3ef 8310 	mrs	r3, PRIMASK
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c78:	647b      	str	r3, [r7, #68]	; 0x44
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	494e      	ldr	r1, [pc, #312]	; (8004dcc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40
 8004cac:	2301      	movs	r3, #1
 8004cae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f383 8810 	msr	PRIMASK, r3
}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cce:	f383 8810 	msr	PRIMASK, r3
}
 8004cd2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2288      	movs	r2, #136	; 0x88
 8004cd8:	2120      	movs	r1, #32
 8004cda:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	228c      	movs	r2, #140	; 0x8c
 8004ce0:	2120      	movs	r1, #32
 8004ce2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2284      	movs	r2, #132	; 0x84
 8004ce8:	2100      	movs	r1, #0
 8004cea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e069      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d052      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	401a      	ands	r2, r3
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d148      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	0112      	lsls	r2, r2, #4
 8004d18:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8004d20:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f383 8810 	msr	PRIMASK, r3
}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4924      	ldr	r1, [pc, #144]	; (8004dcc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	f383 8810 	msr	PRIMASK, r3
}
 8004d4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d50:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d52:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d56:	2301      	movs	r3, #1
 8004d58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	438a      	bics	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]
 8004d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	f383 8810 	msr	PRIMASK, r3
}
 8004d7c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2288      	movs	r2, #136	; 0x88
 8004d82:	2120      	movs	r1, #32
 8004d84:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	228c      	movs	r2, #140	; 0x8c
 8004d8a:	2120      	movs	r1, #32
 8004d8c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2290      	movs	r2, #144	; 0x90
 8004d92:	2120      	movs	r1, #32
 8004d94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2284      	movs	r2, #132	; 0x84
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e010      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	425a      	negs	r2, r3
 8004db2:	4153      	adcs	r3, r2
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	001a      	movs	r2, r3
 8004db8:	1dfb      	adds	r3, r7, #7
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d100      	bne.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x182>
 8004dc0:	e747      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b014      	add	sp, #80	; 0x50
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	fffffe5f 	.word	0xfffffe5f

08004dd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2284      	movs	r2, #132	; 0x84
 8004ddc:	5c9b      	ldrb	r3, [r3, r2]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e027      	b.n	8004e36 <HAL_UARTEx_DisableFifoMode+0x66>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2284      	movs	r2, #132	; 0x84
 8004dea:	2101      	movs	r1, #1
 8004dec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2288      	movs	r2, #136	; 0x88
 8004df2:	2124      	movs	r1, #36	; 0x24
 8004df4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2101      	movs	r1, #1
 8004e0a:	438a      	bics	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a0b      	ldr	r2, [pc, #44]	; (8004e40 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2288      	movs	r2, #136	; 0x88
 8004e28:	2120      	movs	r1, #32
 8004e2a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2284      	movs	r2, #132	; 0x84
 8004e30:	2100      	movs	r1, #0
 8004e32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	0018      	movs	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b004      	add	sp, #16
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	dfffffff 	.word	0xdfffffff

08004e44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2284      	movs	r2, #132	; 0x84
 8004e52:	5c9b      	ldrb	r3, [r3, r2]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e02e      	b.n	8004eba <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2284      	movs	r2, #132	; 0x84
 8004e60:	2101      	movs	r1, #1
 8004e62:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2288      	movs	r2, #136	; 0x88
 8004e68:	2124      	movs	r1, #36	; 0x24
 8004e6a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2101      	movs	r1, #1
 8004e80:	438a      	bics	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	08d9      	lsrs	r1, r3, #3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f000 f854 	bl	8004f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2288      	movs	r2, #136	; 0x88
 8004eac:	2120      	movs	r1, #32
 8004eae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2284      	movs	r2, #132	; 0x84
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	0018      	movs	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b004      	add	sp, #16
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2284      	movs	r2, #132	; 0x84
 8004ed2:	5c9b      	ldrb	r3, [r3, r2]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e02f      	b.n	8004f3c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2284      	movs	r2, #132	; 0x84
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2288      	movs	r2, #136	; 0x88
 8004ee8:	2124      	movs	r1, #36	; 0x24
 8004eea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2101      	movs	r1, #1
 8004f00:	438a      	bics	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	4a0e      	ldr	r2, [pc, #56]	; (8004f44 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	0019      	movs	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f000 f813 	bl	8004f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2288      	movs	r2, #136	; 0x88
 8004f2e:	2120      	movs	r1, #32
 8004f30:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2284      	movs	r2, #132	; 0x84
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b004      	add	sp, #16
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	f1ffffff 	.word	0xf1ffffff

08004f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d108      	bne.n	8004f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	226a      	movs	r2, #106	; 0x6a
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2268      	movs	r2, #104	; 0x68
 8004f64:	2101      	movs	r1, #1
 8004f66:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f68:	e043      	b.n	8004ff2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f6a:	260f      	movs	r6, #15
 8004f6c:	19bb      	adds	r3, r7, r6
 8004f6e:	2208      	movs	r2, #8
 8004f70:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f72:	200e      	movs	r0, #14
 8004f74:	183b      	adds	r3, r7, r0
 8004f76:	2208      	movs	r2, #8
 8004f78:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	0e5b      	lsrs	r3, r3, #25
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	240d      	movs	r4, #13
 8004f86:	193b      	adds	r3, r7, r4
 8004f88:	2107      	movs	r1, #7
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	0f5b      	lsrs	r3, r3, #29
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	250c      	movs	r5, #12
 8004f9a:	197b      	adds	r3, r7, r5
 8004f9c:	2107      	movs	r1, #7
 8004f9e:	400a      	ands	r2, r1
 8004fa0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fa2:	183b      	adds	r3, r7, r0
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	197a      	adds	r2, r7, r5
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	4914      	ldr	r1, [pc, #80]	; (8004ffc <UARTEx_SetNbDataToProcess+0xb4>)
 8004fac:	5c8a      	ldrb	r2, [r1, r2]
 8004fae:	435a      	muls	r2, r3
 8004fb0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fb2:	197b      	adds	r3, r7, r5
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	4a12      	ldr	r2, [pc, #72]	; (8005000 <UARTEx_SetNbDataToProcess+0xb8>)
 8004fb8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fba:	0019      	movs	r1, r3
 8004fbc:	f7fb f92c 	bl	8000218 <__divsi3>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	b299      	uxth	r1, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	226a      	movs	r2, #106	; 0x6a
 8004fc8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fca:	19bb      	adds	r3, r7, r6
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	193a      	adds	r2, r7, r4
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	490a      	ldr	r1, [pc, #40]	; (8004ffc <UARTEx_SetNbDataToProcess+0xb4>)
 8004fd4:	5c8a      	ldrb	r2, [r1, r2]
 8004fd6:	435a      	muls	r2, r3
 8004fd8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fda:	193b      	adds	r3, r7, r4
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	4a08      	ldr	r2, [pc, #32]	; (8005000 <UARTEx_SetNbDataToProcess+0xb8>)
 8004fe0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fe2:	0019      	movs	r1, r3
 8004fe4:	f7fb f918 	bl	8000218 <__divsi3>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	b299      	uxth	r1, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2268      	movs	r2, #104	; 0x68
 8004ff0:	5299      	strh	r1, [r3, r2]
}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b005      	add	sp, #20
 8004ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	08005314 	.word	0x08005314
 8005000:	0800531c 	.word	0x0800531c

08005004 <__libc_init_array>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	2600      	movs	r6, #0
 8005008:	4d0c      	ldr	r5, [pc, #48]	; (800503c <__libc_init_array+0x38>)
 800500a:	4c0d      	ldr	r4, [pc, #52]	; (8005040 <__libc_init_array+0x3c>)
 800500c:	1b64      	subs	r4, r4, r5
 800500e:	10a4      	asrs	r4, r4, #2
 8005010:	42a6      	cmp	r6, r4
 8005012:	d109      	bne.n	8005028 <__libc_init_array+0x24>
 8005014:	2600      	movs	r6, #0
 8005016:	f000 f82b 	bl	8005070 <_init>
 800501a:	4d0a      	ldr	r5, [pc, #40]	; (8005044 <__libc_init_array+0x40>)
 800501c:	4c0a      	ldr	r4, [pc, #40]	; (8005048 <__libc_init_array+0x44>)
 800501e:	1b64      	subs	r4, r4, r5
 8005020:	10a4      	asrs	r4, r4, #2
 8005022:	42a6      	cmp	r6, r4
 8005024:	d105      	bne.n	8005032 <__libc_init_array+0x2e>
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	00b3      	lsls	r3, r6, #2
 800502a:	58eb      	ldr	r3, [r5, r3]
 800502c:	4798      	blx	r3
 800502e:	3601      	adds	r6, #1
 8005030:	e7ee      	b.n	8005010 <__libc_init_array+0xc>
 8005032:	00b3      	lsls	r3, r6, #2
 8005034:	58eb      	ldr	r3, [r5, r3]
 8005036:	4798      	blx	r3
 8005038:	3601      	adds	r6, #1
 800503a:	e7f2      	b.n	8005022 <__libc_init_array+0x1e>
 800503c:	0800532c 	.word	0x0800532c
 8005040:	0800532c 	.word	0x0800532c
 8005044:	0800532c 	.word	0x0800532c
 8005048:	08005330 	.word	0x08005330

0800504c <memcpy>:
 800504c:	2300      	movs	r3, #0
 800504e:	b510      	push	{r4, lr}
 8005050:	429a      	cmp	r2, r3
 8005052:	d100      	bne.n	8005056 <memcpy+0xa>
 8005054:	bd10      	pop	{r4, pc}
 8005056:	5ccc      	ldrb	r4, [r1, r3]
 8005058:	54c4      	strb	r4, [r0, r3]
 800505a:	3301      	adds	r3, #1
 800505c:	e7f8      	b.n	8005050 <memcpy+0x4>

0800505e <memset>:
 800505e:	0003      	movs	r3, r0
 8005060:	1882      	adds	r2, r0, r2
 8005062:	4293      	cmp	r3, r2
 8005064:	d100      	bne.n	8005068 <memset+0xa>
 8005066:	4770      	bx	lr
 8005068:	7019      	strb	r1, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	e7f9      	b.n	8005062 <memset+0x4>
	...

08005070 <_init>:
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005076:	bc08      	pop	{r3}
 8005078:	469e      	mov	lr, r3
 800507a:	4770      	bx	lr

0800507c <_fini>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr
